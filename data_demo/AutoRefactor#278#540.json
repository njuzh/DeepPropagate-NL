[{"index": "0", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.ASTNodeFactory", "methodParameterType": "Refactorings#", "methodParameterName": "refactorings#", "methodBody": "public ASTNodeFactory(final Refactorings refactorings) {\n        this.refactorings= refactorings;\n        this.ast= refactorings.getAST();\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Class constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.getAST", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AST getAST() {\n        return ast;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link AST}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.annotation", "methodParameterType": "String#", "methodParameterName": "typeName#", "methodBody": "public Annotation annotation(String typeName) {\n        // TODO handle SingleMemberAnnotation and NormalAnnotation\n        return markerAnnotation(simpleName(typeName));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Annotation} instance.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.markerAnnotation"], "call_func_parameter": [["java.lang.String"], ["org.eclipse.jdt.core.dom.Name"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName": "Builds a new  {@link SimpleName} instance."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.markerAnnotation": "Builds a new  {@link MarkerAnnotation} instance."}]}, {"index": "3", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.parameters", "methodParameterType": "SingleVariableDeclaration#", "methodParameterName": "variableDeclarations#", "methodBody": "public List<SingleVariableDeclaration> parameters(SingleVariableDeclaration... variableDeclarations) {\n        return Arrays.asList(variableDeclarations);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper to create a list of parameters.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.assign", "methodParameterType": "Expression#Assignment.Operator#Expression#", "methodParameterName": "lhs#operator#rhs#", "methodBody": "public Assignment assign(final Expression lhs, final Assignment.Operator operator, final Expression rhs) {\n        final Assignment assign= ast.newAssignment();\n        assign.setLeftHandSide(lhs);\n        assign.setOperator(operator);\n        assign.setRightHandSide(rhs);\n        return assign;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Assignment} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.block", "methodParameterType": "Statement#", "methodParameterName": "statements#", "methodBody": "public Block block(final Statement... statements) {\n        final Block block= ast.newBlock();\n        addAll(ASTNodes.statements(block), statements);\n        return block;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Block} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.block", "methodParameterType": "Collection<Statement>#", "methodParameterName": "statements#", "methodBody": "public Block block(final Collection<Statement> statements) {\n        final Block block= ast.newBlock();\n        ASTNodes.statements(block).addAll(statements);\n        return block;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Block} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newBlock", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.statements", "java.util.List.addAll"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Block"], ["java.util.Collection"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.statements": "Generecized version of the equivalent JDT method."}]}, {"index": "7", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.boolean0", "methodParameterType": "boolean#", "methodParameterName": "boolValue#", "methodBody": "public BooleanLiteral boolean0(boolean boolValue) {\n        return ast.newBooleanLiteral(boolValue);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link BooleanLiteral} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newBooleanLiteral"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.break0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public BreakStatement break0() {\n        return ast.newBreakStatement();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link BreakStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newBreakStatement"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.case0", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public SwitchCase case0(Expression expression) {\n        final SwitchCase sc= ast.newSwitchCase();\n        sc.setExpression(expression);\n        return sc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link SwitchCase} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newSwitchCase", "org.eclipse.jdt.core.dom.SwitchCase.setExpression"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.cast", "methodParameterType": "Type#Expression#", "methodParameterName": "type#expression#", "methodBody": "public CastExpression cast(Type type, Expression expression) {\n        final CastExpression ce= ast.newCastExpression();\n        ce.setType(type);\n        ce.setExpression(parenthesizeIfNeeded(expression));\n        return ce;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link CastExpression} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newCastExpression", "org.eclipse.jdt.core.dom.CastExpression.setType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.parenthesizeIfNeeded", "org.eclipse.jdt.core.dom.CastExpression.setExpression"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Type"], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.parenthesizeIfNeeded": "Parenthesizes the provided expression if its type requires it."}]}, {"index": "11", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.arrayInitializer", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ArrayInitializer arrayInitializer() {\n        return ast.newArrayInitializer();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ArrayInitializer} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newArrayInitializer"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.default0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SwitchCase default0() {\n        return case0(null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link SwitchCase} instance which represents a {@code default}statement.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.case0"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.case0": "Builds a new  {@link SwitchCase} instance."}]}, {"index": "13", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type", "methodParameterType": "String#", "methodParameterName": "typeName#", "methodBody": "public Type type(String typeName) {\n        if (typeName.indexOf('.') == -1) {\n            return simpleType(typeName);\n        }\n\n        return qualifiedType(typeName.split(\"\\\\.\")); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a type for the provided type name (simple or qualified name).", "call_func_name": ["java.lang.String.indexOf", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleType", "java.lang.String.split", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.qualifiedType"], "call_func_parameter": [["int"], ["java.lang.String"], ["java.lang.String"], ["java.lang.String[]"]], "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.genericType", "methodParameterType": "String#Type#", "methodParameterName": "typeName#typeArguments#", "methodBody": "public Type genericType(String typeName, Type... typeArguments) {\n        final Type type= type(typeName);\n        final ParameterizedType parameterizedType= ast.newParameterizedType(type);\n        Collections.addAll(ASTNodes.typeArguments(parameterizedType), typeArguments);\n        return parameterizedType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a parameterized type with the provided type name and type arguments.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.catch0", "methodParameterType": "String#String#Statement#", "methodParameterName": "exceptionTypeName#caughtExceptionName#statements#", "methodBody": "public CatchClause catch0(String exceptionTypeName, String caughtExceptionName, Statement... statements) {\n        final CatchClause cc= ast.newCatchClause();\n        final SingleVariableDeclaration svd= ast.newSingleVariableDeclaration();\n        svd.setType(simpleType(exceptionTypeName));\n        svd.setName(ast.newSimpleName(caughtExceptionName));\n        cc.setException(svd);\n\n        final Block block= ast.newBlock();\n        addAll(ASTNodes.statements(block), statements);\n        cc.setBody(block);\n        return cc;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link CatchClause} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createCopyTarget", "methodParameterType": "T#", "methodParameterName": "nodeToCopy#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public <T extends ASTNode> T createCopyTarget(T nodeToCopy) {\n        if (nodeToCopy.getNodeType() == ARRAY_TYPE) {\n            return (T) copyType((Type) nodeToCopy);\n        }\n        if (isValidInCurrentAST(nodeToCopy)) {\n            return refactorings.createCopyTarget(nodeToCopy);\n        }\n\n        return copySubtree(nodeToCopy);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a copy of the provided  {@link ASTNode}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.copyType", "methodParameterType": "Expression#TypeNameDecider#", "methodParameterName": "expression#typeNameDecider#", "methodBody": "public Type copyType(Expression expression, TypeNameDecider typeNameDecider) {\n        return toType(expression.resolveTypeBinding(), typeNameDecider);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates a type by copying the type binding of the provided expression.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType": "Converts a type binding into a type."}]}, {"index": "18", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType", "methodParameterType": "ITypeBinding#TypeNameDecider#", "methodParameterName": "typeBinding#typeNameDecider#", "methodBody": "public Type toType(ITypeBinding typeBinding, TypeNameDecider typeNameDecider) {\n        if (typeBinding == null) {\n            throw new IllegalArgumentException(null, \"typeBinding cannot be null\"); //$NON-NLS-1$\n        }\n\n        if (typeBinding.isParameterizedType()) {\n            final ParameterizedType type= ast.newParameterizedType(toType(typeBinding.getErasure(), typeNameDecider));\n            final List<Type> typeArgs= ASTNodes.typeArguments(type);\n            for (ITypeBinding typeArg : typeBinding.getTypeArguments()) {\n                typeArgs.add(toType(typeArg, typeNameDecider));\n            }\n\n            return type;\n        }\n        if (typeBinding.isPrimitive()) {\n            return type(typeBinding.getName());\n        }\n        if (typeBinding.isClass() || typeBinding.isInterface() || typeBinding.isEnum()\n                || typeBinding.isAnnotation() || typeBinding.isNullType() || typeBinding.isRawType()) {\n            return type(typeNameDecider.useSimplestPossibleName(typeBinding));\n        }\n        if (typeBinding.isArray()) {\n            return ast.newArrayType(toType(typeBinding.getElementType(), typeNameDecider), typeBinding.getDimensions());\n        }\n        if (typeBinding.isWildcardType()) {\n            final WildcardType type= ast.newWildcardType();\n            if (typeBinding.getBound() != null) {\n                type.setBound(toType(typeBinding.getBound(), typeNameDecider), typeBinding.isUpperbound());\n            }\n\n            return type;\n        }\n        if (typeBinding.isTypeVariable()) {\n            return type(typeBinding.getName());\n        }\n        if (typeBinding.isCapture()) {\n            if (typeBinding.getTypeBounds().length > 1) {\n                throw new NotImplementedException(null,\n                        \"because it violates the javadoc of `ITypeBinding.getTypeBounds()`: \" //$NON-NLS-1$\n                                + \"\\\"Note that per construction, it can only contain one class or array type, \" //$NON-NLS-1$\n                                + \"at most, and then it is located in first position.\\\"\"); //$NON-NLS-1$\n            }\n\n            return toType(typeBinding.getWildcard(), typeNameDecider);\n        }\n        throw new NotImplementedException(null, \" for the type binding '\" + typeBinding + \"'\"); //$NON-NLS-1$ //$NON-NLS-2$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#NumberLiteral#InfixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#NullLiteral#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Converts a type binding into a type.", "call_func_name": ["org.autorefactor.util.IllegalArgumentException.<init>", "org.eclipse.jdt.core.dom.ITypeBinding.isParameterizedType", "org.eclipse.jdt.core.dom.ITypeBinding.getErasure", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType", "org.eclipse.jdt.core.dom.AST.newParameterizedType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeArguments", "java.util.List.add", "org.eclipse.jdt.core.dom.ITypeBinding.isPrimitive", "org.eclipse.jdt.core.dom.ITypeBinding.getName", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type", "org.eclipse.jdt.core.dom.ITypeBinding.isClass", "org.eclipse.jdt.core.dom.ITypeBinding.isInterface", "org.eclipse.jdt.core.dom.ITypeBinding.isEnum", "org.eclipse.jdt.core.dom.ITypeBinding.isAnnotation", "org.eclipse.jdt.core.dom.ITypeBinding.isNullType", "org.eclipse.jdt.core.dom.ITypeBinding.isRawType", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName", "org.eclipse.jdt.core.dom.ITypeBinding.isArray", "org.eclipse.jdt.core.dom.ITypeBinding.getElementType", "org.eclipse.jdt.core.dom.ITypeBinding.getDimensions", "org.eclipse.jdt.core.dom.AST.newArrayType", "org.eclipse.jdt.core.dom.ITypeBinding.isWildcardType", "org.eclipse.jdt.core.dom.AST.newWildcardType", "org.eclipse.jdt.core.dom.ITypeBinding.getBound", "org.eclipse.jdt.core.dom.ITypeBinding.isUpperbound", "org.eclipse.jdt.core.dom.WildcardType.setBound", "org.eclipse.jdt.core.dom.ITypeBinding.isTypeVariable", "org.eclipse.jdt.core.dom.ITypeBinding.isCapture", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeBounds", "org.autorefactor.util.NotImplementedException.<init>", "org.eclipse.jdt.core.dom.ITypeBinding.getWildcard", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"], ["org.eclipse.jdt.core.dom.Type"], ["org.eclipse.jdt.core.dom.ParameterizedType"], [""], ["java.lang.Object"], [""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding"], [""], [""], [""], ["org.eclipse.jdt.core.dom.Type", "int"], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.Type", "boolean"], [""], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType": "Converts a type binding into a type."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type": "Returns a type for the provided type name (simple or qualified name)."}, {"org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName": "Returns the simplest possible name that should be used when referring to the provided type binding."}]}, {"index": "19", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.copyExpression", "methodParameterType": "MethodInvocation#", "methodParameterName": "node#", "methodBody": "public Expression copyExpression(MethodInvocation node) {\n        return node.getExpression() != null ? createCopyTarget(node.getExpression()) : null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a copy of the expression of the provided  {@link MethodInvocation} ornull if no such expression exists.", "call_func_name": ["org.eclipse.jdt.core.dom.MethodInvocation.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createCopyTarget"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.copyRange", "methodParameterType": "List<T>#", "methodParameterName": "nodes#", "methodBody": "public <T extends ASTNode> T copyRange(List<T> nodes) {\n        if (nodes.isEmpty()) {\n            return null;\n        }\n        if (!isValidForRangeOperation(nodes)) {\n            throw new IllegalArgumentException(nodes.get(0),\n                    \"The provided nodes are not valid for doing a range copy: \" + nodes); //$NON-NLS-1$\n        }\n\n        return refactorings.createCopyTarget(nodes.get(0), nodes.get(nodes.size() - 1));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a copy of the provided nodes list.", "call_func_name": ["java.util.List.isEmpty", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.isValidForRangeOperation", "java.util.List.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.util.IllegalArgumentException.<init>", "java.util.List.size", "org.autorefactor.jdt.internal.corext.dom.Refactorings.createCopyTarget"], "call_func_parameter": [[""], ["java.util.List"], ["int"], ["java.lang.String"], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.moveRange", "methodParameterType": "List<T>#", "methodParameterName": "nodes#", "methodBody": "public <T extends ASTNode> T moveRange(List<T> nodes) {\n        if (nodes.isEmpty()) {\n            return null;\n        }\n        if (!isValidForRangeOperation(nodes)) {\n            throw new IllegalArgumentException(nodes.get(0),\n                    \"The provided nodes are not valid for doing a range move: \" + nodes); //$NON-NLS-1$\n        }\n\n        return refactorings.createMoveTarget(nodes.get(0), nodes.get(nodes.size() - 1));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a move for the provided nodes list.", "call_func_name": ["java.util.List.isEmpty", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.isValidForRangeOperation", "java.util.List.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.util.IllegalArgumentException.<init>", "java.util.List.size", "org.autorefactor.jdt.internal.corext.dom.Refactorings.createMoveTarget"], "call_func_parameter": [[""], ["java.util.List"], ["int"], ["java.lang.String"], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.copySubtree", "methodParameterType": "T#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public <T extends ASTNode> T copySubtree(T node) {\n        return (T) ASTNode.copySubtree(ast, node);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a copy of the provided  {@link ASTNode}. This method loses code comments. Prefer using  {@link #createCopyTarget(ASTNode)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareStatement", "methodParameterType": "Type#SimpleName#Expression#", "methodParameterName": "type#varName#initializer#", "methodBody": "public VariableDeclarationStatement declareStatement(Type type, SimpleName varName, Expression initializer) {\n        final VariableDeclarationFragment fragment= declareFragment(varName, initializer);\n        return declareStatement(type, fragment);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link VariableDeclarationStatement} instance.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareFragment", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareStatement"], "call_func_parameter": [["org.eclipse.jdt.core.dom.SimpleName", "org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Type", "org.eclipse.jdt.core.dom.VariableDeclarationFragment"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareFragment": "Builds a new  {@link VariableDeclarationFragment} instance."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareStatement": "Builds a new  {@link VariableDeclarationStatement} instance."}]}, {"index": "24", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareStatement", "methodParameterType": "Type#VariableDeclarationFragment#", "methodParameterName": "type#fragment#", "methodBody": "public VariableDeclarationStatement declareStatement(Type type, VariableDeclarationFragment fragment) {\n        final VariableDeclarationStatement vds= ast.newVariableDeclarationStatement(fragment);\n        vds.setType(type);\n        return vds;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link VariableDeclarationStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newVariableDeclarationStatement", "org.eclipse.jdt.core.dom.VariableDeclarationStatement.setType"], "call_func_parameter": [["org.eclipse.jdt.core.dom.VariableDeclarationFragment"], ["org.eclipse.jdt.core.dom.Type"]], "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareExpression", "methodParameterType": "Type#SimpleName#Expression#", "methodParameterName": "type#varName#initializer#", "methodBody": "public VariableDeclarationExpression declareExpression(Type type, SimpleName varName, Expression initializer) {\n        final VariableDeclarationFragment fragment= declareFragment(varName, initializer);\n        final VariableDeclarationExpression vde= ast.newVariableDeclarationExpression(fragment);\n        ASTNodes.modifiers(vde).add(final0());\n        vde.setType(type);\n        return vde;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link VariableDeclarationExpression} instance.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareFragment", "org.eclipse.jdt.core.dom.AST.newVariableDeclarationExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.final0", "java.util.List.add", "org.eclipse.jdt.core.dom.VariableDeclarationExpression.setType"], "call_func_parameter": [["org.eclipse.jdt.core.dom.SimpleName", "org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.VariableDeclarationFragment"], ["org.eclipse.jdt.core.dom.VariableDeclarationExpression"], [""], ["java.lang.Object"], ["org.eclipse.jdt.core.dom.Type"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareFragment": "Builds a new  {@link VariableDeclarationFragment} instance."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.final0": "Builds a new  {@link Modifier} with keyword {@code final}."}]}, {"index": "26", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareExpression", "methodParameterType": "Type#VariableDeclarationFragment#", "methodParameterName": "type#fragment#", "methodBody": "public VariableDeclarationExpression declareExpression(Type type, VariableDeclarationFragment fragment) {\n        final VariableDeclarationExpression vde= ast.newVariableDeclarationExpression(fragment);\n        vde.setType(type);\n        return vde;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link VariableDeclarationExpression} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newVariableDeclarationExpression", "org.eclipse.jdt.core.dom.VariableDeclarationExpression.setType"], "call_func_parameter": [["org.eclipse.jdt.core.dom.VariableDeclarationFragment"], ["org.eclipse.jdt.core.dom.Type"]], "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareField", "methodParameterType": "Type#VariableDeclarationFragment#", "methodParameterName": "type#fragment#", "methodBody": "public FieldDeclaration declareField(Type type, VariableDeclarationFragment fragment) {\n        final FieldDeclaration fd= ast.newFieldDeclaration(fragment);\n        fd.setType(type);\n        return fd;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link FieldDeclaration} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newFieldDeclaration", "org.eclipse.jdt.core.dom.FieldDeclaration.setType"], "call_func_parameter": [["org.eclipse.jdt.core.dom.VariableDeclarationFragment"], ["org.eclipse.jdt.core.dom.Type"]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareFragment", "methodParameterType": "SimpleName#", "methodParameterName": "varName#", "methodBody": "public VariableDeclarationFragment declareFragment(SimpleName varName) {\n        final VariableDeclarationFragment vdf= ast.newVariableDeclarationFragment();\n        vdf.setName(varName);\n        return vdf;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link VariableDeclarationFragment} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newVariableDeclarationFragment", "org.eclipse.jdt.core.dom.VariableDeclarationFragment.setName"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.SimpleName"]], "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareFragment", "methodParameterType": "SimpleName#Expression#", "methodParameterName": "varName#initializer#", "methodBody": "public VariableDeclarationFragment declareFragment(SimpleName varName, Expression initializer) {\n        final VariableDeclarationFragment vdf= ast.newVariableDeclarationFragment();\n        vdf.setName(varName);\n        vdf.setInitializer(initializer);\n        return vdf;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link VariableDeclarationFragment} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newVariableDeclarationFragment", "org.eclipse.jdt.core.dom.VariableDeclarationFragment.setName", "org.eclipse.jdt.core.dom.VariableDeclarationFragment.setInitializer"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.SimpleName"], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.extendedModifiers", "methodParameterType": "IExtendedModifier#", "methodParameterName": "modifiers#", "methodBody": "public List<IExtendedModifier> extendedModifiers(IExtendedModifier... modifiers) {\n        return Arrays.asList(modifiers);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper to create a list of modifiers.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.fieldAccess", "methodParameterType": "Expression#SimpleName#", "methodParameterName": "expression#fieldName#", "methodBody": "public FieldAccess fieldAccess(Expression expression, SimpleName fieldName) {\n        final FieldAccess fa= getAST().newFieldAccess();\n        fa.setExpression(expression);\n        fa.setName(fieldName);\n        return fa;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link FieldAccess} instance.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.getAST", "org.eclipse.jdt.core.dom.AST.newFieldAccess", "org.eclipse.jdt.core.dom.FieldAccess.setExpression", "org.eclipse.jdt.core.dom.FieldAccess.setName"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.SimpleName"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.getAST": "Returns the  {@link AST}."}]}, {"index": "32", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.final0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Modifier final0() {\n        return ast.newModifier(ModifierKeyword.FINAL_KEYWORD);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Modifier} with keyword {@code final}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareSingleVariable", "methodParameterType": "String#Type#", "methodParameterName": "varName#type#", "methodBody": "public SingleVariableDeclaration declareSingleVariable(String varName, Type type) {\n        final SingleVariableDeclaration svd= ast.newSingleVariableDeclaration();\n        svd.setName(simpleName(varName));\n        svd.setType(type);\n        return svd;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link SingleVariableDeclaration} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newSingleVariableDeclaration", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName", "org.eclipse.jdt.core.dom.SingleVariableDeclaration.setName", "org.eclipse.jdt.core.dom.SingleVariableDeclaration.setType"], "call_func_parameter": [[""], ["java.lang.String"], ["org.eclipse.jdt.core.dom.SimpleName"], ["org.eclipse.jdt.core.dom.Type"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName": "Builds a new  {@link SimpleName} instance."}]}, {"index": "34", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.if0", "methodParameterType": "Expression#Statement#", "methodParameterName": "condition#thenStatement#", "methodBody": "public IfStatement if0(Expression condition, Statement thenStatement) {\n        return if0(condition, thenStatement, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link IfStatement} instance.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.if0"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Statement", "org.eclipse.jdt.core.dom.Statement"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.if0": "Builds a new  {@link IfStatement} instance."}]}, {"index": "35", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.doWhile", "methodParameterType": "Expression#Statement#", "methodParameterName": "condition#statement#", "methodBody": "public DoStatement doWhile(Expression condition, Statement statement) {\n        final DoStatement ds= ast.newDoStatement();\n        ds.setExpression(condition);\n        ds.setBody(statement);\n        return ds;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link DoStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newDoStatement", "org.eclipse.jdt.core.dom.DoStatement.setExpression", "org.eclipse.jdt.core.dom.DoStatement.setBody"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Statement"]], "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.if0", "methodParameterType": "Expression#Statement#Statement#", "methodParameterName": "condition#thenStatement#elseStatement#", "methodBody": "public IfStatement if0(Expression condition, Statement thenStatement, Statement elseStatement) {\n        final IfStatement is= ast.newIfStatement();\n        is.setExpression(condition);\n        is.setThenStatement(thenStatement);\n        is.setElseStatement(elseStatement);\n        return is;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link IfStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newIfStatement", "org.eclipse.jdt.core.dom.IfStatement.setExpression", "org.eclipse.jdt.core.dom.IfStatement.setThenStatement", "org.eclipse.jdt.core.dom.IfStatement.setElseStatement"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Statement"], ["org.eclipse.jdt.core.dom.Statement"]], "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.import0", "methodParameterType": "Name#", "methodParameterName": "name#", "methodBody": "public ImportDeclaration import0(Name name) {\n        final ImportDeclaration id= ast.newImportDeclaration();\n        id.setName(name);\n        id.setStatic(false);\n        id.setOnDemand(false);\n        return id;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ImportDeclaration} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newImportDeclaration", "org.eclipse.jdt.core.dom.ImportDeclaration.setName", "org.eclipse.jdt.core.dom.ImportDeclaration.setStatic", "org.eclipse.jdt.core.dom.ImportDeclaration.setOnDemand"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Name"], ["boolean"], ["boolean"]], "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.infixExpression", "methodParameterType": "InfixExpression.Operator#Collection<? extends Expression>#", "methodParameterName": "operator#allOperands#", "methodBody": "public InfixExpression infixExpression(InfixExpression.Operator operator, Collection<? extends Expression> allOperands) {\n        if (allOperands.size() < 2) {\n            throw new IllegalArgumentException(null, \"Not enough operands for an infix expression: \" //$NON-NLS-1$\n                    + \"needed at least 2, but got \" + allOperands.size()); //$NON-NLS-1$\n        }\n        final Iterator<? extends Expression> it= allOperands.iterator();\n        final InfixExpression ie= ast.newInfixExpression();\n        ie.setLeftOperand(it.next());\n        ie.setOperator(operator);\n        ie.setRightOperand(it.next());\n        while (it.hasNext()) {\n            ASTNodes.extendedOperands(ie).add(it.next());\n        }\n\n        return ie;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link InfixExpression} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.conditionalExpression", "methodParameterType": "Expression#Expression#Expression#", "methodParameterName": "mainExpression#thenExpression#elseExpression#", "methodBody": "public ConditionalExpression conditionalExpression(Expression mainExpression, Expression thenExpression,\n            Expression elseExpression) {\n        final ConditionalExpression ce= ast.newConditionalExpression();\n        ce.setExpression(mainExpression);\n        ce.setThenExpression(thenExpression);\n        ce.setElseExpression(elseExpression);\n        return ce;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ConditionalExpression} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newConditionalExpression", "org.eclipse.jdt.core.dom.ConditionalExpression.setExpression", "org.eclipse.jdt.core.dom.ConditionalExpression.setThenExpression", "org.eclipse.jdt.core.dom.ConditionalExpression.setElseExpression"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.infixExpression", "methodParameterType": "Expression#InfixExpression.Operator#Expression#Expression#", "methodParameterName": "leftOperand#operator#rightOperand#extendedOperands#", "methodBody": "public InfixExpression infixExpression(Expression leftOperand, InfixExpression.Operator operator, Expression rightOperand,\n            Expression... extendedOperands) {\n        final InfixExpression ie= ast.newInfixExpression();\n        ie.setLeftOperand(leftOperand);\n        ie.setOperator(operator);\n        ie.setRightOperand(rightOperand);\n        Collections.addAll(ASTNodes.extendedOperands(ie), extendedOperands);\n        return ie;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link InfixExpression} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.int0", "methodParameterType": "int#", "methodParameterName": "intValue#", "methodBody": "public NumberLiteral int0(int intValue) {\n        return ast.newNumberLiteral(Integer.toString(intValue));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link NumberLiteral} instance.", "call_func_name": ["java.lang.Integer.toString", "org.eclipse.jdt.core.dom.AST.newNumberLiteral"], "call_func_parameter": [["int"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.invoke", "methodParameterType": "String#String#Expression#", "methodParameterName": "expression#methodName#arguments#", "methodBody": "public MethodInvocation invoke(String expression, String methodName, Expression... arguments) {\n        final MethodInvocation mi= ast.newMethodInvocation();\n        mi.setExpression(ast.newSimpleName(expression));\n        mi.setName(ast.newSimpleName(methodName));\n        addAll(ASTNodes.arguments(mi), arguments);\n        return mi;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link MethodInvocation} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.invoke", "methodParameterType": "String#Expression#", "methodParameterName": "methodName#arguments#", "methodBody": "public MethodInvocation invoke(String methodName, Expression... arguments) {\n        final MethodInvocation mi= ast.newMethodInvocation();\n        mi.setName(ast.newSimpleName(methodName));\n        addAll(ASTNodes.arguments(mi), arguments);\n        return mi;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link MethodInvocation} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.invoke", "methodParameterType": "Expression#String#Expression#", "methodParameterName": "expression#methodName#arguments#", "methodBody": "public MethodInvocation invoke(Expression expression, String methodName, Expression... arguments) {\n        final MethodInvocation mi= ast.newMethodInvocation();\n        mi.setExpression(expression);\n        mi.setName(ast.newSimpleName(methodName));\n        addAll(ASTNodes.arguments(mi), arguments);\n        return mi;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link MethodInvocation} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.invoke", "methodParameterType": "Expression#String#List<E>#", "methodParameterName": "expression#methodName#arguments#", "methodBody": "public <E extends Expression> MethodInvocation invoke(Expression expression, String methodName, List<E> arguments) {\n        final MethodInvocation mi= ast.newMethodInvocation();\n        mi.setExpression(expression);\n        mi.setName(ast.newSimpleName(methodName));\n        addAll(mi, arguments);\n        return mi;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link MethodInvocation} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newMethodInvocation", "org.eclipse.jdt.core.dom.MethodInvocation.setExpression", "org.eclipse.jdt.core.dom.AST.newSimpleName", "org.eclipse.jdt.core.dom.MethodInvocation.setName", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.addAll"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"], ["java.lang.String"], ["org.eclipse.jdt.core.dom.SimpleName"], ["org.eclipse.jdt.core.dom.MethodInvocation", "java.util.List"]], "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.charLiteral", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CharacterLiteral charLiteral() {\n        return ast.newCharacterLiteral();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link CharacterLiteral} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newCharacterLiteral"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.lambda", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LambdaExpression lambda() {\n        return ast.newLambdaExpression();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link LambdaExpression} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newLambdaExpression"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.exprMethodRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ExpressionMethodReference exprMethodRef() {\n        return ast.newExpressionMethodReference();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ExpressionMethodReference} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newExpressionMethodReference"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.typeMethodRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TypeMethodReference typeMethodRef() {\n        return ast.newTypeMethodReference();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link TypeMethodReference} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newTypeMethodReference"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.creationRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CreationReference creationRef() {\n        return ast.newCreationReference();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link CreationReference} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newCreationReference"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.superMethodRef", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SuperMethodReference superMethodRef() {\n        return ast.newSuperMethodReference();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link SuperMethodReference} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newSuperMethodReference"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createMoveTarget", "methodParameterType": "T#", "methodParameterName": "nodeToMove#", "methodBody": "public <T extends ASTNode> T createMoveTarget(T nodeToMove) {\n        return refactorings.createMoveTarget(nodeToMove);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a placeholder where to move the provided  {@link ASTNode}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createMoveTarget", "methodParameterType": "Collection<T>#", "methodParameterName": "nodes#", "methodBody": "public <T extends ASTNode> List<T> createMoveTarget(final Collection<T> nodes) {\n        List<T> movedNodes= new ArrayList<>(nodes.size());\n\n        for (T astNode : nodes) {\n            movedNodes.add(createMoveTarget(astNode));\n        }\n\n        return movedNodes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Moves all the provided  {@link ASTNode}s in place.", "call_func_name": ["java.util.Collection.size", "java.util.ArrayList.<init>", "java.util.Collection.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createMoveTarget", "java.util.List.add", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], ["int"], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.name", "methodParameterType": "String#", "methodParameterName": "names#", "methodBody": "public Name name(String... names) {\n        if (names.length == 0) {\n            throw new IllegalArgumentException(null, \"Expected at least one name, but was given 0 names\"); //$NON-NLS-1$\n        }\n\n        if (names.length == 1) {\n            String[] simpleNames= names[0].split(\"\\\\.\"); //$NON-NLS-1$\n            if (simpleNames.length == 1) {\n                return simpleName(simpleNames[0]);\n            }\n\n            return ast.newName(simpleNames);\n        }\n\n        return ast.newName(names);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Name} instance. If only a single name is provided then a{@link SimpleName} is returned, if several names are provided then a{@link QualifiedName} is built.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName", "methodParameterType": "String#", "methodParameterName": "simpleName#", "methodBody": "public SimpleName simpleName(String simpleName) {\n        return ast.newSimpleName(simpleName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link SimpleName} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newSimpleName"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.new0", "methodParameterType": "String#Expression#", "methodParameterName": "typeName#arguments#", "methodBody": "public ClassInstanceCreation new0(String typeName, Expression... arguments) {\n        final ClassInstanceCreation cic= ast.newClassInstanceCreation();\n        cic.setType(simpleType(typeName));\n        addAll(ASTNodes.arguments(cic), arguments);\n        return cic;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ClassInstanceCreation} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.new0", "methodParameterType": "Type#Expression#", "methodParameterName": "type#arguments#", "methodBody": "public ClassInstanceCreation new0(Type type, Expression... arguments) {\n        final ClassInstanceCreation cic= ast.newClassInstanceCreation();\n        cic.setType(type);\n        addAll(ASTNodes.arguments(cic), arguments);\n        return cic;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ClassInstanceCreation} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.newArray", "methodParameterType": "ArrayType#ArrayInitializer#", "methodParameterName": "arrayType#arrayInitializer#", "methodBody": "public ArrayCreation newArray(ArrayType arrayType, ArrayInitializer arrayInitializer) {\n        final ArrayCreation ac= ast.newArrayCreation();\n        ac.setType(arrayType);\n        ac.setInitializer(arrayInitializer);\n        return ac;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ArrayCreation} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newArrayCreation", "org.eclipse.jdt.core.dom.ArrayCreation.setType", "org.eclipse.jdt.core.dom.ArrayCreation.setInitializer"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ArrayType"], ["org.eclipse.jdt.core.dom.ArrayInitializer"]], "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.not", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public Expression not(Expression expression) {\n        return prefixExpression(PrefixExpression.Operator.NOT, expression);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link PrefixExpression} instance using the not operator ('!').", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.negate", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public Expression negate(Expression expression) {\n        return negate(expression, Copy.MOVE);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Negates the provided expression by moving it in the AST.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.negate", "methodParameterType": "Expression#Copy#", "methodParameterName": "expression#copy#", "methodBody": "public Expression negate(Expression expression, Copy copy) {\n        final Expression exprNoParen= ASTNodes.getUnparenthesedExpression(expression);\n        if (exprNoParen.getNodeType() == PREFIX_EXPRESSION) {\n            final PrefixExpression pe= (PrefixExpression) exprNoParen;\n            if (ASTNodes.hasOperator(pe, PrefixExpression.Operator.NOT)) {\n                return copy.perform(this, ASTNodes.getUnparenthesedExpression(pe.getOperand()));\n            }\n        }\n\n        return not(parenthesizeIfNeeded(copy.perform(this, expression)));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Negates the provided expression and applies the provided copy operation on the returned expression.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.number", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public NumberLiteral number(String s) {\n        return ast.newNumberLiteral(s);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link NumberLiteral} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newNumberLiteral"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.parenthesize", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public ParenthesizedExpression parenthesize(Expression expression) {\n        final ParenthesizedExpression pe= ast.newParenthesizedExpression();\n        pe.setExpression(expression);\n        return pe;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ParenthesizedExpression} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newParenthesizedExpression", "org.eclipse.jdt.core.dom.ParenthesizedExpression.setExpression"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.return0", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public ReturnStatement return0(Expression expression) {\n        final ReturnStatement rs= ast.newReturnStatement();\n        rs.setExpression(expression);\n        return rs;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ReturnStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newReturnStatement", "org.eclipse.jdt.core.dom.ReturnStatement.setExpression"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.markerAnnotation", "methodParameterType": "Name#", "methodParameterName": "typeName#", "methodBody": "public MarkerAnnotation markerAnnotation(Name typeName) {\n        final MarkerAnnotation ma= ast.newMarkerAnnotation();\n        ma.setTypeName(typeName);\n        return ma;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link MarkerAnnotation} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newMarkerAnnotation", "org.eclipse.jdt.core.dom.MarkerAnnotation.setTypeName"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Name"]], "passed_comments": "/"}, {"index": "66", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.singleValueAnnotation", "methodParameterType": "Name#Expression#", "methodParameterName": "typeName#value#", "methodBody": "public SingleMemberAnnotation singleValueAnnotation(Name typeName, Expression value) {\n        final SingleMemberAnnotation sma= ast.newSingleMemberAnnotation();\n        sma.setTypeName(typeName);\n        sma.setValue(value);\n        return sma;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link SingleMemberAnnotation} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newSingleMemberAnnotation", "org.eclipse.jdt.core.dom.SingleMemberAnnotation.setTypeName", "org.eclipse.jdt.core.dom.SingleMemberAnnotation.setValue"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Name"], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.string", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public StringLiteral string(String s) {\n        final StringLiteral sl= ast.newStringLiteral();\n        sl.setLiteralValue(s);\n        return sl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link StringLiteral} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newStringLiteral", "org.eclipse.jdt.core.dom.StringLiteral.setLiteralValue"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.switch0", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public SwitchStatement switch0(Expression expression) {\n        final SwitchStatement ss= ast.newSwitchStatement();\n        ss.setExpression(expression);\n        return ss;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link SwitchStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newSwitchStatement", "org.eclipse.jdt.core.dom.SwitchStatement.setExpression"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.this0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ThisExpression this0() {\n        return ast.newThisExpression();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ThisExpression} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newThisExpression"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.throw0", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public ThrowStatement throw0(final Expression expression) {\n        final ThrowStatement throwS= ast.newThrowStatement();\n        throwS.setExpression(expression);\n        return throwS;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ThrowStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newThrowStatement", "org.eclipse.jdt.core.dom.ThrowStatement.setExpression"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toStatement", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public ExpressionStatement toStatement(final Expression expression) {\n        return ast.newExpressionStatement(expression);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link ExpressionStatement} instance.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newExpressionStatement"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.try0", "methodParameterType": "Block#CatchClause#", "methodParameterName": "body#catchClauses#", "methodBody": "public TryStatement try0(final Block body, CatchClause... catchClauses) {\n        final TryStatement tryS= ast.newTryStatement();\n        tryS.setBody(body);\n        addAll(ASTNodes.catchClauses(tryS), catchClauses);\n        return tryS;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link TryStatement} instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.parenthesizeIfNeeded", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public Expression parenthesizeIfNeeded(Expression expression) {\n        switch (expression.getNodeType()) {\n        case ANNOTATION_TYPE_DECLARATION:\n        case ANNOTATION_TYPE_MEMBER_DECLARATION:\n        case ANONYMOUS_CLASS_DECLARATION:\n        case ARRAY_ACCESS:\n        case ARRAY_CREATION:\n        case ARRAY_INITIALIZER:\n        case BOOLEAN_LITERAL:\n        case CHARACTER_LITERAL:\n        case CLASS_INSTANCE_CREATION:\n        case CREATION_REFERENCE:\n        case EXPRESSION_METHOD_REFERENCE:\n        case FIELD_ACCESS:\n        case MEMBER_REF:\n        case METHOD_INVOCATION:\n        case METHOD_REF:\n        case NULL_LITERAL:\n        case NUMBER_LITERAL:\n        case PARENTHESIZED_EXPRESSION:\n        case POSTFIX_EXPRESSION:\n        case PREFIX_EXPRESSION:\n        case QUALIFIED_NAME:\n        case SIMPLE_NAME:\n        case STRING_LITERAL:\n        case SUPER_FIELD_ACCESS:\n        case SUPER_METHOD_INVOCATION:\n        case SUPER_METHOD_REFERENCE:\n        case THIS_EXPRESSION:\n        case TYPE_LITERAL:\n        case TYPE_METHOD_REFERENCE:\n        case VARIABLE_DECLARATION_EXPRESSION:\n            return expression;\n\n        default:\n            return parenthesize(expression);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#ReturnStatement#SwitchCase#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(SimpleName)SimpleName)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Parenthesizes the provided expression if its type requires it.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.getNodeType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.parenthesize"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.parenthesize": "Builds a new  {@link ParenthesizedExpression} instance."}]}, {"index": "74", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.newlinePlaceholder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Statement newlinePlaceholder() {\n        return (Statement) refactorings.getRewrite().createStringPlaceholder(\"\\n\", ASTNode.EMPTY_STATEMENT); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Statement} instance which is basically a newline.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Refactorings.getRewrite", "org.eclipse.jdt.core.dom.rewrite.ASTRewrite.createStringPlaceholder"], "call_func_parameter": [[""], ["java.lang.String", "int"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Refactorings.getRewrite": "Gets the ASTRewrite rewrite object."}]}, {"index": "75", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.public0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Modifier public0() {\n        return ast.newModifier(ModifierKeyword.PUBLIC_KEYWORD);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Modifier} with keyword {@code public}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.private0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Modifier private0() {\n        return ast.newModifier(ModifierKeyword.PRIVATE_KEYWORD);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Modifier} with keyword {@code private}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.protected0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Modifier protected0() {\n        return ast.newModifier(ModifierKeyword.PROTECTED_KEYWORD);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Modifier} with keyword {@code protected}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.static0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Modifier static0() {\n        return ast.newModifier(ModifierKeyword.STATIC_KEYWORD);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link Modifier} with keyword {@code static}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.superInvoke", "methodParameterType": "String#", "methodParameterName": "methodName#", "methodBody": "public Expression superInvoke(String methodName) {\n        SuperMethodInvocation smi= ast.newSuperMethodInvocation();\n        smi.setName(simpleName(methodName));\n        return smi;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new super method invocation.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newSuperMethodInvocation", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName", "org.eclipse.jdt.core.dom.SuperMethodInvocation.setName"], "call_func_parameter": [[""], ["java.lang.String"], ["org.eclipse.jdt.core.dom.SimpleName"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName": "Builds a new  {@link SimpleName} instance."}]}, {"index": "80", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.method", "methodParameterType": "List<IExtendedModifier>#String#List<SingleVariableDeclaration>#Block#", "methodParameterName": "modifiers#methodName#parameters#block#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public MethodDeclaration method(List<IExtendedModifier> modifiers, String methodName,\n            List<SingleVariableDeclaration> parameters, Block block) {\n        final MethodDeclaration md= ast.newMethodDeclaration();\n        ASTNodes.modifiers(md).addAll(modifiers);\n        md.setName(simpleName(methodName));\n        md.parameters().addAll(parameters);\n        md.setBody(block);\n        return md;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link MethodDeclaration} node.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newMethodDeclaration", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers", "java.util.List.addAll", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName", "org.eclipse.jdt.core.dom.MethodDeclaration.setName", "org.eclipse.jdt.core.dom.MethodDeclaration.parameters", "org.eclipse.jdt.core.dom.MethodDeclaration.setBody"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.BodyDeclaration"], ["java.util.Collection"], ["java.lang.String"], ["org.eclipse.jdt.core.dom.SimpleName"], [""], ["org.eclipse.jdt.core.dom.Block"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName": "Builds a new  {@link SimpleName} instance."}]}, {"index": "81", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodeFactory.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.null0", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NullLiteral null0() {\n        return ast.newNullLiteral();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a new  {@link NullLiteral}.", "call_func_name": ["org.eclipse.jdt.core.dom.AST.newNullLiteral"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarDefinitionsUsesVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarDefinitionsUsesVisitor.VarDefinitionsUsesVisitor", "methodParameterType": "VariableDeclaration#", "methodParameterName": "variableDeclaration#", "methodBody": "public VarDefinitionsUsesVisitor(VariableDeclaration variableDeclaration) {\n        this(variableDeclaration.resolveBinding(), getDeclaringScope(variableDeclaration), true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Builds from a  {@link VariableDeclaration} and infers the variable binding andthe scope from it.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarDefinitionsUsesVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarDefinitionsUsesVisitor.VarDefinitionsUsesVisitor", "methodParameterType": "IVariableBinding#ASTNode#boolean#", "methodParameterName": "variableBinding#scopeNode#includeInnerScopes#", "methodBody": "public VarDefinitionsUsesVisitor(IVariableBinding variableBinding, ASTNode scopeNode, boolean includeInnerScopes) {\n        this.variableBinding= variableBinding;\n        this.scopeNode= scopeNode;\n        this.includeInnerScopes= includeInnerScopes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds with the variable binding to look for and the scope where to look for references.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarDefinitionsUsesVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarDefinitionsUsesVisitor.find", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public VarDefinitionsUsesVisitor find() {\n        if (variableBinding != null && scopeNode != null) {\n            scopeNode.accept(this);\n        }\n\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Finds all the definitions and uses of the variable.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.accept"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTVisitor"]], "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarDefinitionsUsesVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarDefinitionsUsesVisitor.getWrites", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<SimpleName> getWrites() {\n        return writes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all the definitions (declarations and assignments) found.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarDefinitionsUsesVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarDefinitionsUsesVisitor.getReads", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<SimpleName> getReads() {\n        return reads;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all the uses found.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/InterruptibleVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.InterruptibleVisitor.visitNode", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public void visitNode(ASTNode node) {\n        try {\n            node.accept(this);\n        } catch (StopVisitException e) {\n            return;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Visit the node.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.accept"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTVisitor"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/InterruptibleVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.InterruptibleVisitor.interruptVisit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean interruptVisit() {\n        throw new StopVisitException();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Interrupt the visit of a tree.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.StopVisitException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Bindings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Bindings.Bindings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Bindings() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Forbidden.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Bindings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Bindings.getUnboxedTypeName", "methodParameterType": "String#", "methodParameterName": "wrapperName#", "methodBody": "public static String getUnboxedTypeName(String wrapperName) {\n        if (Long.class.getCanonicalName().equals(wrapperName)) {\n            return long.class.getSimpleName();\n        }\n        if (Integer.class.getCanonicalName().equals(wrapperName)) {\n            return int.class.getSimpleName();\n        }\n        if (Short.class.getCanonicalName().equals(wrapperName)) {\n            return short.class.getSimpleName();\n        }\n        if (Character.class.getCanonicalName().equals(wrapperName)) {\n            return char.class.getSimpleName();\n        }\n        if (Byte.class.getCanonicalName().equals(wrapperName)) {\n            return byte.class.getSimpleName();\n        }\n        if (Boolean.class.getCanonicalName().equals(wrapperName)) {\n            return boolean.class.getSimpleName();\n        }\n        if (Float.class.getCanonicalName().equals(wrapperName)) {\n            return float.class.getSimpleName();\n        }\n        if (Double.class.getCanonicalName().equals(wrapperName)) {\n            return double.class.getSimpleName();\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the type of the associated primitive wrapper.", "call_func_name": ["java.lang.Class.getCanonicalName", "java.lang.String.equals", "java.lang.Class.getSimpleName"], "call_func_parameter": [[""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Bindings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Bindings.getBoxedTypeName", "methodParameterType": "String#", "methodParameterName": "primitiveName#", "methodBody": "public static String getBoxedTypeName(String primitiveName) {\n        if (long.class.getSimpleName().equals(primitiveName)) {\n            return Long.class.getCanonicalName();\n        }\n        if (int.class.getSimpleName().equals(primitiveName)) {\n            return Integer.class.getCanonicalName();\n        }\n        if (short.class.getSimpleName().equals(primitiveName)) {\n            return Short.class.getCanonicalName();\n        }\n        if (char.class.getSimpleName().equals(primitiveName)) {\n            return Character.class.getCanonicalName();\n        }\n        if (byte.class.getSimpleName().equals(primitiveName)) {\n            return Byte.class.getCanonicalName();\n        }\n        if (boolean.class.getSimpleName().equals(primitiveName)) {\n            return Boolean.class.getCanonicalName();\n        }\n        if (float.class.getSimpleName().equals(primitiveName)) {\n            return Float.class.getCanonicalName();\n        }\n        if (double.class.getSimpleName().equals(primitiveName)) {\n            return Double.class.getCanonicalName();\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the wrapper of the associated primitive type.", "call_func_name": ["java.lang.Class.getSimpleName", "java.lang.String.equals", "java.lang.Class.getCanonicalName"], "call_func_parameter": [[""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Bindings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Bindings.getBoxedTypeBinding", "methodParameterType": "ITypeBinding#AST#", "methodParameterName": "type#ast#", "methodBody": "public static ITypeBinding getBoxedTypeBinding(ITypeBinding type, AST ast) {\n        if (!type.isPrimitive()) {\n            return type;\n        }\n        String boxedTypeName= getBoxedTypeName(type.getName());\n        if (boxedTypeName == null) {\n            return type;\n        }\n        ITypeBinding boxed= ast.resolveWellKnownType(boxedTypeName);\n        if (boxed == null) {\n            return type;\n        }\n\n        return boxed;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the type of the associated primitive wrapper.", "call_func_name": ["org.eclipse.jdt.core.dom.ITypeBinding.isPrimitive", "org.eclipse.jdt.core.dom.ITypeBinding.getName", "org.autorefactor.jdt.internal.corext.dom.Bindings.getBoxedTypeName", "org.eclipse.jdt.core.dom.AST.resolveWellKnownType"], "call_func_parameter": [[""], [""], ["java.lang.String"], ["java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Bindings.getBoxedTypeName": "Get the wrapper of the associated primitive type."}]}, {"index": "93", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceCode.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceCode.SourceCode", "methodParameterType": "String#CompilationUnit#ICompilationUnit#", "methodParameterName": "text#astRoot#compilationUnit#", "methodBody": "public SourceCode(String text, CompilationUnit astRoot, ICompilationUnit compilationUnit) {\n        this.astRoot= astRoot;\n        this.text= text;\n        this.compilationUnit= compilationUnit;\n        computeLines();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/PrepareApplyRefactoringsJob.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.PrepareApplyRefactoringsJob", "methodParameterType": "List<IJavaElement>#List<RefactoringRule>#Environment#", "methodParameterName": "javaElements#refactoringRulesToApply#environment#", "methodBody": "public PrepareApplyRefactoringsJob(List<IJavaElement> javaElements, List<RefactoringRule> refactoringRulesToApply,\n            Environment environment) {\n        super(\"Prepare AutoRefactor\"); //$NON-NLS-1$\n        setPriority(Job.SHORT);\n        this.javaElements= javaElements;\n        this.refactoringRulesToApply= refactoringRulesToApply;\n        this.environment= environment;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/PrepareApplyRefactoringsJob.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.clone", "methodParameterType": "List<RefactoringRule>#", "methodParameterName": "refactorings#", "methodBody": "private List<RefactoringRule> clone(List<RefactoringRule> refactorings) throws Exception {\n        final List<RefactoringRule> res= new ArrayList<>(refactorings.size());\n        for (RefactoringRule refactoring : refactorings) {\n            res.add(refactoring.getClass().newInstance());\n        }\n\n        return res;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Clones all the cleanups to apply. In fairness, this method is only useful for stateful cleanups.", "call_func_name": ["java.util.List.size", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.next", "java.lang.Object.getClass", "java.lang.Class.newInstance", "java.util.List.add", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], ["int"], [""], [""], [""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/PrepareApplyRefactoringsJob.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.getIJavaProject", "methodParameterType": "IJavaElement#", "methodParameterName": "javaElement#", "methodBody": "public static IJavaProject getIJavaProject(IJavaElement javaElement) {\n        if (javaElement instanceof ICompilationUnit || javaElement instanceof IPackageFragment\n                || javaElement instanceof IPackageFragmentRoot) {\n            return getIJavaProject(javaElement.getParent());\n        }\n        if (javaElement instanceof IJavaProject) {\n            return (IJavaProject) javaElement;\n        }\n        throw new NotImplementedException(null, javaElement);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#NullLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "getIJavaProject.", "call_func_name": ["org.eclipse.jdt.core.IJavaElement.getParent", "org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.getIJavaProject", "org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.IJavaElement"], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Object"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.getIJavaProject": "getIJavaProject."}]}, {"index": "97", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/CollectorVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.CollectorVisitor.addResult", "methodParameterType": "R#", "methodParameterName": "result#", "methodBody": "protected void addResult(R result) {\n        this.results.add(result);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the provided result to the list of results.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/CollectorVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.CollectorVisitor.addResults", "methodParameterType": "Collection<R>#", "methodParameterName": "results#", "methodBody": "protected void addResults(Collection<R> results) {\n        this.results.addAll(results);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the provided result to the list of results.", "call_func_name": ["java.util.List.addAll"], "call_func_parameter": [["java.util.Collection"]], "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/CollectorVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.CollectorVisitor.collect", "methodParameterType": "ASTNode#", "methodParameterName": "nodeToVisit#", "methodBody": "public List<R> collect(final ASTNode nodeToVisit) {\n        nodeToVisit.accept(this);\n        return results;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calls  {@link ASTNode#accept(ASTVisitor)} on the provided node and returns thefound result if one exists, or the default value.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.accept"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTVisitor"]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringUnit.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringUnit.RefactoringUnit", "methodParameterType": "ICompilationUnit#JavaProjectOptions#", "methodParameterName": "compilationUnit#options#", "methodBody": "public RefactoringUnit(ICompilationUnit compilationUnit, JavaProjectOptions options) {\n        this.compilationUnit= compilationUnit;\n        this.options= options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "CleanupUnit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTSemanticMatcher.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.matchOpposite", "methodParameterType": "ASTNode#Object#", "methodParameterName": "node#otherObject#", "methodBody": "public boolean matchOpposite(final ASTNode node, final Object otherObject) {\n        final Object other= unbracket(otherObject);\n\n        if (node instanceof ParenthesizedExpression) {\n            return matchOpposite(((ParenthesizedExpression) node).getExpression(), other);\n        }\n\n        if (node instanceof PrefixExpression) {\n            final PrefixExpression pe= (PrefixExpression) node;\n\n            if (ASTNodes.hasOperator(pe, PrefixExpression.Operator.NOT)) {\n                if (other instanceof PrefixExpression\n                        && ASTNodes.hasOperator((PrefixExpression) other, PrefixExpression.Operator.NOT)) {\n                    return matchOpposite(pe.getOperand(), ((PrefixExpression) other).getOperand());\n                }\n\n                return safeSubtreeMatch(pe.getOperand(), other);\n            }\n        } else if (other instanceof PrefixExpression\n                && ASTNodes.hasOperator((PrefixExpression) other, PrefixExpression.Operator.NOT)) {\n            return safeSubtreeMatch(node, ((PrefixExpression) other).getOperand());\n        }\n\n        if (other instanceof ASTNode) {\n            Boolean value= ASTNodes.booleanConstant(node);\n            Boolean otherValue= ASTNodes.booleanConstant((ASTNode) other);\n\n            if (value != null && otherValue != null) {\n                return value ^ otherValue;\n            }\n        }\n\n        if (!(node instanceof InfixExpression) || !(other instanceof InfixExpression)) {\n            return false;\n        }\n\n        final InfixExpression ie1= (InfixExpression) node;\n        final InfixExpression ie2= (InfixExpression) other;\n\n        final Expression leftOperand1= ie1.getLeftOperand();\n        final Expression rightOperand1= ie1.getRightOperand();\n        final Expression leftOperand2= ie2.getLeftOperand();\n        final Expression rightOperand2= ie2.getRightOperand();\n\n        if (ie1.getOperator().equals(ie2.getOperator())) {\n            if (!ie1.hasExtendedOperands() && !ie2.hasExtendedOperands()) {\n                if (ASTNodes.hasOperator(ie1, InfixExpression.Operator.EQUALS, InfixExpression.Operator.NOT_EQUALS,\n                        InfixExpression.Operator.XOR)) {\n                    if (matchOneOppositeOther(leftOperand1, leftOperand2, rightOperand2, rightOperand1)\n                            || matchOneOppositeOther(rightOperand2, rightOperand1, leftOperand1, leftOperand2) || ASTNodes.isPassiveWithoutFallingThrough(leftOperand1) && ASTNodes.isPassiveWithoutFallingThrough(rightOperand1) && ASTNodes.isPassiveWithoutFallingThrough(leftOperand2)\n                            && ASTNodes.isPassiveWithoutFallingThrough(rightOperand2)\n                            && (matchOneOppositeOther(leftOperand1, leftOperand2, rightOperand2, rightOperand1)\n                                    || matchOneOppositeOther(rightOperand2, rightOperand1, leftOperand1,\n                                            leftOperand2))) {\n                        return true;\n                    }\n                } else if (ASTNodes.isPassiveWithoutFallingThrough(leftOperand1) && ASTNodes.isPassiveWithoutFallingThrough(rightOperand1) && ASTNodes.isPassiveWithoutFallingThrough(leftOperand2)\n                        && ASTNodes.isPassiveWithoutFallingThrough(rightOperand2)\n                        && ASTNodes.hasOperator(ie1, InfixExpression.Operator.GREATER, InfixExpression.Operator.GREATER_EQUALS,\n                                        InfixExpression.Operator.LESS, InfixExpression.Operator.LESS_EQUALS)) {\n                    return safeSubtreeMatch(ie1.getLeftOperand(), ie2.getRightOperand())\n                            && safeSubtreeMatch(ie1.getRightOperand(), ie2.getLeftOperand());\n                }\n            }\n\n            return false;\n        }\n\n        final InfixExpression.Operator reverseOp= (InfixExpression.Operator) OperatorEnum.getOperator(ie1).getReverseBooleanOperator();\n\n        if (ie2.getOperator().equals(reverseOp)) {\n            if (ASTNodes.hasOperator(ie1, InfixExpression.Operator.CONDITIONAL_AND, InfixExpression.Operator.CONDITIONAL_OR,\n                    InfixExpression.Operator.AND, InfixExpression.Operator.OR)) {\n                return isOperandsMatching(ie1, ie2, false);\n            }\n            if (ASTNodes.hasOperator(ie1, InfixExpression.Operator.EQUALS, InfixExpression.Operator.NOT_EQUALS)) {\n                return isOperandsMatching(ie1, ie2, true);\n            }\n            if (ASTNodes.isPassiveWithoutFallingThrough(leftOperand1) && ASTNodes.isPassiveWithoutFallingThrough(rightOperand1) && ASTNodes.isPassiveWithoutFallingThrough(leftOperand2)\n                    && ASTNodes.isPassiveWithoutFallingThrough(rightOperand2)\n                    && ASTNodes.hasOperator(ie1, InfixExpression.Operator.GREATER, InfixExpression.Operator.GREATER_EQUALS,\n                                    InfixExpression.Operator.LESS, InfixExpression.Operator.LESS_EQUALS)) {\n                return safeSubtreeMatch(leftOperand1, leftOperand2) && safeSubtreeMatch(rightOperand1, rightOperand2);\n            }\n\n            return false;\n        }\n\n        return ASTNodes.isPassiveWithoutFallingThrough(leftOperand1) && ASTNodes.isPassiveWithoutFallingThrough(rightOperand1) && ASTNodes.isPassiveWithoutFallingThrough(leftOperand2) && ASTNodes.isPassiveWithoutFallingThrough(rightOperand2)\n                && !ie1.hasExtendedOperands() && !ie2.hasExtendedOperands() && (ASTNodes.hasOperator(ie1, InfixExpression.Operator.GREATER)\n                && ASTNodes.hasOperator(ie2, InfixExpression.Operator.GREATER_EQUALS)\n                || ASTNodes.hasOperator(ie1, InfixExpression.Operator.GREATER_EQUALS)\n                        && ASTNodes.hasOperator(ie2, InfixExpression.Operator.GREATER)\n                || ASTNodes.hasOperator(ie1, InfixExpression.Operator.LESS)\n                        && ASTNodes.hasOperator(ie2, InfixExpression.Operator.LESS_EQUALS)\n                || ASTNodes.hasOperator(ie1, InfixExpression.Operator.LESS_EQUALS)\n                        && ASTNodes.hasOperator(ie2, InfixExpression.Operator.LESS)) && safeSubtreeMatch(leftOperand1, rightOperand2) && safeSubtreeMatch(rightOperand1, leftOperand2);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#IfStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement)IfStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression)InfixExpression)ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Match the boolean opposite.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.unbracket", "org.eclipse.jdt.core.dom.ParenthesizedExpression.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.matchOpposite", "org.eclipse.jdt.core.dom.PrefixExpression.getOperand", "org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.safeSubtreeMatch", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.booleanConstant", "java.lang.Boolean.booleanValue", "org.eclipse.jdt.core.dom.InfixExpression.getLeftOperand", "org.eclipse.jdt.core.dom.InfixExpression.getRightOperand", "org.eclipse.jdt.core.dom.InfixExpression.getOperator", "java.lang.Object.equals", "org.eclipse.jdt.core.dom.InfixExpression.hasExtendedOperands", "org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.matchOneOppositeOther", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPassiveWithoutFallingThrough", "org.autorefactor.jdt.internal.ui.fix.OperatorEnum.getOperator", "org.autorefactor.jdt.internal.ui.fix.OperatorEnum.getReverseBooleanOperator", "org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.isOperandsMatching"], "call_func_parameter": [["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], ["org.eclipse.jdt.core.dom.ASTNode"], [""], [""], [""], [""], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.ASTNode"], [""], ["org.eclipse.jdt.core.dom.InfixExpression", "org.eclipse.jdt.core.dom.InfixExpression", "boolean"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.matchOpposite": "Match the boolean opposite."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.booleanConstant": "Returns a boolean constant value, if present."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPassiveWithoutFallingThrough": "Return true if the node changes nothing and throws no exceptions."}]}, {"index": "102", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static ASTNode getUnparenthesedExpression(ASTNode node) {\n        if (node instanceof Expression) {\n            return getUnparenthesedExpression((Expression) node);\n        }\n\n        return node;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the same node after removing any parentheses around it.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression": "Returns the same expression after removing any parentheses around it."}]}, {"index": "103", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public static Expression getUnparenthesedExpression(Expression expression) {\n        if (expression.getNodeType() == ASTNode.PARENTHESIZED_EXPRESSION) {\n            return getUnparenthesedExpression(((ParenthesizedExpression) expression).getExpression());\n        }\n\n        return expression;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the same expression after removing any parentheses around it.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.getNodeType", "org.eclipse.jdt.core.dom.ParenthesizedExpression.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression": "Returns the same expression after removing any parentheses around it."}]}, {"index": "104", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.asList", "methodParameterType": "Statement#", "methodParameterName": "statement#", "methodBody": "public static List<Statement> asList(Statement statement) {\n        if (statement == null) {\n            return Collections.emptyList();\n        }\n\n        if (statement instanceof Block) {\n            return statements((Block) statement);\n        }\n\n        return Arrays.asList(statement);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the provided statement as a non null list of statements: <ul> <li>if the statement is null, then an empty list is returned</li> <li>if the statement is a  {@link Block}, then its children are returned</li> <li>otherwise, the current node is returned wrapped in a list</li> </ul>", "call_func_name": ["java.util.Collections.emptyList", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.statements", "java.util.Arrays.asList"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Block"], ["java.lang.Object[]"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.statements": "Generecized version of the equivalent JDT method."}]}, {"index": "105", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "methodParameterType": "Statement#Class<T>#", "methodParameterName": "statement#stmtClass#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T extends Statement> T as(Statement statement, Class<T> stmtClass) {\n        if (statement == null) {\n            return null;\n        }\n\n        final List<Statement> statements= asList(statement);\n        if (statements.size() == 1) {\n            final Statement oneStatement= statements.get(0);\n\n            if (stmtClass.isAssignableFrom(oneStatement.getClass())) {\n                return (T) oneStatement;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Casts the provided statement to an object of the provided type if type matches.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.asList", "java.util.List.size", "java.util.List.get", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement"], [""], ["int"], [""], ["java.lang.Class"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.asList": "Returns the provided statement as a non null list of statements: <ul> <li>if the statement is null, then an empty list is returned</li> <li>if the statement is a  {@link Block}, then its children are returned</li> <li>otherwise, the current node is returned wrapped in a list</li> </ul>"}]}, {"index": "106", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.is", "methodParameterType": "Statement#Class<? extends Statement>#", "methodParameterName": "statement#stmtClass#", "methodBody": "public static boolean is(Statement statement, Class<? extends Statement> stmtClass) {\n        return as(statement, stmtClass) != null;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided statement has the provided type.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement", "java.lang.Class"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided statement to an object of the provided type if type matches."}]}, {"index": "107", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "methodParameterType": "Expression#Class<T>#", "methodParameterName": "expression#exprClass#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T extends Expression> T as(Expression expression, Class<T> exprClass) {\n        if (expression != null) {\n            if (exprClass.isAssignableFrom(expression.getClass())) {\n                return (T) expression;\n            }\n            if (expression instanceof ParenthesizedExpression) {\n                return as(((ParenthesizedExpression) expression).getExpression(), exprClass);\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Casts the provided expression to an object of the provided type if type matches.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "org.eclipse.jdt.core.dom.ParenthesizedExpression.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as"], "call_func_parameter": [[""], ["java.lang.Class"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}]}, {"index": "108", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.is", "methodParameterType": "Expression#Class<? extends Expression>#", "methodParameterName": "expression#exprClass#", "methodBody": "public static boolean is(Expression expression, Class<? extends Expression> exprClass) {\n        return as(expression, exprClass) != null;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression has the provided type.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}]}, {"index": "109", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "methodParameterType": "Collection<? extends Expression>#Class<T>#", "methodParameterName": "exprs#exprClass#", "methodBody": "public static <T extends Expression> T as(Collection<? extends Expression> exprs, Class<T> exprClass) {\n        if (exprs != null && exprs.size() == 1) {\n            return as(exprs.iterator().next(), exprClass);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches.", "call_func_name": ["java.util.Collection.size", "java.util.Collection.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as"], "call_func_parameter": [[""], [""], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}]}, {"index": "110", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.asExpression", "methodParameterType": "Statement#Class<T>#", "methodParameterName": "statement#exprClass#", "methodBody": "public static <T extends Expression> T asExpression(Statement statement, Class<T> exprClass) {\n        final ExpressionStatement es= as(statement, ExpressionStatement.class);\n        if (es != null) {\n            return as(es.getExpression(), exprClass);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Expression} of a specified type out of the provided{@link Statement}. Note the provided statement is first converted to an {@link ExpressionStatement} if possible.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.eclipse.jdt.core.dom.ExpressionStatement.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement", "java.lang.Class"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided statement to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}]}, {"index": "111", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isCastCompatible", "methodParameterType": "Expression#Expression#", "methodParameterName": "expr1#expr2#", "methodBody": "public static boolean isCastCompatible(Expression expr1, Expression expr2) {\n        final ITypeBinding tb1= expr1.resolveTypeBinding();\n        final ITypeBinding tb2= expr2.resolveTypeBinding();\n        return tb1 != null && tb2 != null && tb1.isCastCompatible(tb2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided expressions are cast compatible.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.eclipse.jdt.core.dom.ITypeBinding.isCastCompatible"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ITypeBinding"]], "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments", "methodParameterType": "ClassInstanceCreation#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> arguments(ClassInstanceCreation node) {\n        return node.arguments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.ClassInstanceCreation.arguments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments", "methodParameterType": "ConstructorInvocation#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> arguments(ConstructorInvocation node) {\n        return node.arguments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.ConstructorInvocation.arguments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments", "methodParameterType": "MethodInvocation#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> arguments(MethodInvocation node) {\n        return node.arguments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.MethodInvocation.arguments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments", "methodParameterType": "SuperConstructorInvocation#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> arguments(SuperConstructorInvocation node) {\n        return node.arguments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.SuperConstructorInvocation.arguments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments", "methodParameterType": "SuperMethodInvocation#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> arguments(SuperMethodInvocation node) {\n        return node.arguments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.SuperMethodInvocation.arguments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.bodyDeclarations", "methodParameterType": "AnonymousClassDeclaration#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<BodyDeclaration> bodyDeclarations(AnonymousClassDeclaration node) {\n        return node.bodyDeclarations();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.AnonymousClassDeclaration.bodyDeclarations"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.bodyDeclarations", "methodParameterType": "AbstractTypeDeclaration#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<BodyDeclaration> bodyDeclarations(AbstractTypeDeclaration node) {\n        return node.bodyDeclarations();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.AbstractTypeDeclaration.bodyDeclarations"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.catchClauses", "methodParameterType": "TryStatement#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<CatchClause> catchClauses(TryStatement node) {\n        return node.catchClauses();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.TryStatement.catchClauses"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.expressions", "methodParameterType": "ArrayInitializer#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> expressions(ArrayInitializer node) {\n        return node.expressions();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.ArrayInitializer.expressions"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.extendedOperands", "methodParameterType": "InfixExpression#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> extendedOperands(InfixExpression node) {\n        return node.extendedOperands();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.InfixExpression.extendedOperands"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.allOperands", "methodParameterType": "InfixExpression#", "methodParameterName": "node#", "methodBody": "public static List<Expression> allOperands(InfixExpression node) {\n        final List<Expression> extOps= extendedOperands(node);\n        final List<Expression> operands= new ArrayList<>(2 + extOps.size());\n        operands.add(node.getLeftOperand());\n        operands.add(node.getRightOperand());\n        operands.addAll(extOps);\n\n        List<Expression> optimizedOperands= new ArrayList<>();\n\n        for (Expression expression : operands) {\n            if (expression instanceof InfixExpression && hasOperator((InfixExpression) expression, node.getOperator())) {\n                optimizedOperands.addAll(allOperands((InfixExpression) expression));\n            } else {\n                optimizedOperands.add(expression);\n            }\n        }\n\n        return optimizedOperands;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all the operands from the provided infix expressions. It takes a bug into account. In some cases, ASTConverter.java creates several infix expressions instead of one extended infix expression. It occurs for an expression with a sub-infix-expression in the middle without parenthesis.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.extendedOperands", "java.util.List.size", "java.util.ArrayList.<init>", "org.eclipse.jdt.core.dom.InfixExpression.getLeftOperand", "java.util.List.add", "org.eclipse.jdt.core.dom.InfixExpression.getRightOperand", "java.util.List.addAll", "java.util.ArrayList.<init>", "java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jdt.core.dom.InfixExpression.getOperator", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.allOperands", "java.util.Iterator.hasNext"], "call_func_parameter": [["org.eclipse.jdt.core.dom.InfixExpression"], [""], ["int"], [""], ["java.lang.Object"], [""], ["java.util.Collection"], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.InfixExpression"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.extendedOperands": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.allOperands": "Returns all the operands from the provided infix expressions. It takes a bug into account. In some cases, ASTConverter.java creates several infix expressions instead of one extended infix expression. It occurs for an expression with a sub-infix-expression in the middle without parenthesis."}]}, {"index": "123", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.initializers", "methodParameterType": "ForStatement#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> initializers(ForStatement node) {\n        return node.initializers();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.ForStatement.initializers"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.updaters", "methodParameterType": "ForStatement#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Expression> updaters(ForStatement node) {\n        return node.updaters();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.ForStatement.updaters"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.fragments", "methodParameterType": "FieldDeclaration#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<VariableDeclarationFragment> fragments(FieldDeclaration node) {\n        return node.fragments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.FieldDeclaration.fragments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.fragments", "methodParameterType": "VariableDeclarationExpression#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<VariableDeclarationFragment> fragments(VariableDeclarationExpression node) {\n        return node.fragments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.VariableDeclarationExpression.fragments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.fragments", "methodParameterType": "VariableDeclarationStatement#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<VariableDeclarationFragment> fragments(VariableDeclarationStatement node) {\n        return node.fragments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.VariableDeclarationStatement.fragments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getCommentList", "methodParameterType": "CompilationUnit#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Comment> getCommentList(CompilationUnit node) {\n        return node.getCommentList();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.CompilationUnit.getCommentList"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.imports", "methodParameterType": "CompilationUnit#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<ImportDeclaration> imports(CompilationUnit node) {\n        return node.imports();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.CompilationUnit.imports"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers", "methodParameterType": "BodyDeclaration#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<IExtendedModifier> modifiers(BodyDeclaration node) {\n        return node.modifiers();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.BodyDeclaration.modifiers"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers", "methodParameterType": "SingleVariableDeclaration#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<IExtendedModifier> modifiers(SingleVariableDeclaration node) {\n        return node.modifiers();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.SingleVariableDeclaration.modifiers"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers", "methodParameterType": "VariableDeclarationExpression#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<IExtendedModifier> modifiers(VariableDeclarationExpression node) {\n        return node.modifiers();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.VariableDeclarationExpression.modifiers"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.modifiers", "methodParameterType": "VariableDeclarationStatement#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<IExtendedModifier> modifiers(VariableDeclarationStatement node) {\n        return node.modifiers();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.VariableDeclarationStatement.modifiers"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.parameters", "methodParameterType": "MethodDeclaration#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<SingleVariableDeclaration> parameters(MethodDeclaration node) {\n        return node.parameters();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.MethodDeclaration.parameters"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.resources", "methodParameterType": "TryStatement#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<VariableDeclarationExpression> resources(TryStatement node) {\n        return node.resources();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.TryStatement.resources"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.statements", "methodParameterType": "Block#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Statement> statements(Block node) {\n        return node.statements();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.Block.statements"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.statements", "methodParameterType": "SwitchStatement#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Statement> statements(SwitchStatement node) {\n        return node.statements();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.SwitchStatement.statements"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.tags", "methodParameterType": "Javadoc#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<TagElement> tags(Javadoc node) {\n        return node.tags();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.Javadoc.tags"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "139", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.thrownExceptionTypes", "methodParameterType": "MethodDeclaration#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Type> thrownExceptionTypes(MethodDeclaration node) {\n        return node.thrownExceptionTypes();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.MethodDeclaration.thrownExceptionTypes"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments", "methodParameterType": "MethodInvocation#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Type> typeArguments(MethodInvocation node) {\n        return node.typeArguments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.MethodInvocation.typeArguments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments", "methodParameterType": "ParameterizedType#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Type> typeArguments(ParameterizedType node) {\n        return node.typeArguments();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.ParameterizedType.typeArguments"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.types", "methodParameterType": "CompilationUnit#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<AbstractTypeDeclaration> types(CompilationUnit node) {\n        return node.types();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.CompilationUnit.types"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.types", "methodParameterType": "UnionType#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<Type> types(UnionType node) {\n        return node.types();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.UnionType.types"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.values", "methodParameterType": "NormalAnnotation#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static List<MemberValuePair> values(NormalAnnotation node) {\n        return node.values();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generecized version of the equivalent JDT method.", "call_func_name": ["org.eclipse.jdt.core.dom.NormalAnnotation.values"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getCalledType", "methodParameterType": "MethodInvocation#", "methodParameterName": "mi#", "methodBody": "public static ITypeBinding getCalledType(final MethodInvocation mi) {\n        IMethodBinding methodBinding= mi.resolveMethodBinding();\n        if (methodBinding != null) {\n            return methodBinding.getDeclaringClass();\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of the object on which the method is called.", "call_func_name": ["org.eclipse.jdt.core.dom.MethodInvocation.resolveMethodBinding", "org.eclipse.jdt.core.dom.IMethodBinding.getDeclaringClass"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "146", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getBooleanLiteral", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public static Boolean getBooleanLiteral(Expression expression) {\n        final BooleanLiteral bl= as(expression, BooleanLiteral.class);\n        if (bl != null) {\n            return bl.booleanValue();\n        }\n        final QualifiedName qn= as(expression, QualifiedName.class);\n        if (hasType(qn, Boolean.class.getCanonicalName())) {\n            return getBooleanObject(qn);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Boolean} object value represented by the providedexpression.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.eclipse.jdt.core.dom.BooleanLiteral.booleanValue", "java.lang.Boolean.valueOf", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getBooleanObject"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""], ["boolean"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String[]"], ["org.eclipse.jdt.core.dom.QualifiedName"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getBooleanObject": "Returns the  {@link Boolean} object constant value represented by the providedqualified name."}]}, {"index": "147", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getBooleanObject", "methodParameterType": "QualifiedName#", "methodParameterName": "qualifiedName#", "methodBody": "public static Boolean getBooleanObject(final QualifiedName qualifiedName) {\n        final String fqn= qualifiedName.getFullyQualifiedName();\n        if (\"Boolean.TRUE\".equals(fqn)) { //$NON-NLS-1$\n            return true;\n        }\n        if (\"Boolean.FALSE\".equals(fqn)) { //$NON-NLS-1$\n            return false;\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Boolean} object constant value represented by the providedqualified name.", "call_func_name": ["org.eclipse.jdt.core.dom.QualifiedName.getFullyQualifiedName", "java.lang.String.equals", "java.lang.Boolean.valueOf"], "call_func_parameter": [[""], ["java.lang.Object"], ["boolean"]], "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestor", "methodParameterType": "ASTNode#Class<T>#", "methodParameterName": "node#ancestorClass#", "methodBody": "public static <T extends ASTNode> T getAncestor(ASTNode node, Class<T> ancestorClass) {\n        final T ancestor= getAncestorOrNull(node, ancestorClass);\n        if (ancestor != null) {\n            return ancestor;\n        }\n        throw new IllegalStateException(node, \"Could not find any ancestor for \" + ancestorClass + \"and node \" + node); //$NON-NLS-1$ //$NON-NLS-2$\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Returns the first ancestor of the provided node which has the required type.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestorOrNull", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.util.IllegalStateException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Class"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestorOrNull": "Returns the first ancestor of the provided node which has the required type."}]}, {"index": "149", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestorOrNull", "methodParameterType": "ASTNode#Class<T>#", "methodParameterName": "node#ancestorClass#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T extends ASTNode> T getAncestorOrNull(ASTNode node, Class<T> ancestorClass) {\n        if (node == null || node.getParent() == null) {\n            return null;\n        }\n        final ASTNode parent= node.getParent();\n        if (ancestorClass.isAssignableFrom(parent.getClass())) {\n            return (T) parent;\n        }\n\n        return getAncestorOrNull(parent, ancestorClass);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the first ancestor of the provided node which has the required type.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.getParent", "java.lang.Object.getClass", "java.lang.Class.isAssignableFrom", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestorOrNull"], "call_func_parameter": [[""], [""], ["java.lang.Class"], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Class"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestorOrNull": "Returns the first ancestor of the provided node which has the required type."}]}, {"index": "150", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getEnclosingType", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static ASTNode getEnclosingType(ASTNode node) {\n        final Class<?>[] ancestorClasses= { AbstractTypeDeclaration.class, AnonymousClassDeclaration.class };\n        final ASTNode ancestor= getFirstAncestorOrNull(node, ancestorClasses);\n        if (ancestor == null) {\n            throw new IllegalStateException(node,\n                    \"Could not find any ancestor for \" + Arrays.toString(ancestorClasses) + \" and node type \" //$NON-NLS-1$ //$NON-NLS-2$\n                            + (node != null ? node.getClass().getSimpleName() : null) + \" node.toString() \" + node); //$NON-NLS-1$\n        }\n\n        return ancestor;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#ArrayInitializer#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ParenthesizedExpression#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayInitializer(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)ArrayInitializer)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ParenthesizedExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the enclosing type of the provided node. <p> i.e. this returns the most immediate type declaration surrounding the provided node.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getFirstAncestorOrNull", "java.lang.StringBuilder.<init>", "java.util.Arrays.toString", "java.lang.StringBuilder.append", "java.lang.Object.getClass", "java.lang.Class.getSimpleName", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.util.IllegalStateException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Class[]"], ["java.lang.String"], ["java.lang.Object[]"], ["java.lang.String"], [""], [""], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"]], "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getFirstAncestorOrNull", "methodParameterType": "ASTNode#Class<?>#", "methodParameterName": "node#ancestorClasses#", "methodBody": "public static ASTNode getFirstAncestorOrNull(ASTNode node, Class<?>... ancestorClasses) {\n        if (ancestorClasses.length == 1) {\n            throw new IllegalArgumentException(\"Please use ASTHelper.getAncestor(ASTNode, Class<?>) instead\"); //$NON-NLS-1$\n        }\n        if (node == null || node.getParent() == null || ancestorClasses.length == 0) {\n            return null;\n        }\n        final ASTNode parent= node.getParent();\n        for (Class<?> ancestorClass : ancestorClasses) {\n            if (ancestorClass.isAssignableFrom(parent.getClass())) {\n                return parent;\n            }\n        }\n\n        return getFirstAncestorOrNull(parent, ancestorClasses);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the first ancestor of the provided node which has any of the required types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getTargetType", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static ITypeBinding getTargetType(final ASTNode node) {\n        if (node != null) {\n            final ASTNode parent= node.getParent();\n            if (parent instanceof ParenthesizedExpression) {\n                return getTargetType(parent);\n            }\n            if (parent instanceof ReturnStatement) {\n                final ReturnStatement returnStatement= (ReturnStatement) parent;\n                if (returnStatement.getExpression().equals(node)) {\n                    final MethodDeclaration method= getAncestorOrNull(returnStatement, MethodDeclaration.class);\n                    if (method != null && method.getReturnType2() != null) {\n                        return method.getReturnType2().resolveBinding();\n                    }\n                }\n            } else if (parent instanceof CastExpression) {\n                return ((CastExpression) parent).resolveTypeBinding();\n            } else if (parent instanceof VariableDeclarationFragment) {\n                return resolveTypeBinding((VariableDeclarationFragment) parent);\n            } else if (parent instanceof Assignment) {\n                return ((Assignment) parent).getLeftHandSide().resolveTypeBinding();\n            } else if (parent instanceof ArrayAccess) {\n                final ArrayAccess arrayAccess= (ArrayAccess) parent;\n                if (arrayAccess.getIndex().equals(node)) {\n                    return node.getAST().resolveWellKnownType(int.class.getSimpleName());\n                }\n            } else if (parent instanceof ConditionalExpression) {\n                final ConditionalExpression conditionalExpression= (ConditionalExpression) parent;\n                if (conditionalExpression.getExpression().equals(node)) {\n                    return node.getAST().resolveWellKnownType(boolean.class.getSimpleName());\n                }\n            } else if (parent instanceof PrefixExpression) {\n                final PrefixExpression prefixExpression= (PrefixExpression) parent;\n                if (hasOperator(prefixExpression, PrefixExpression.Operator.NOT)) {\n                    return node.getAST().resolveWellKnownType(boolean.class.getSimpleName());\n                }\n            } else if (parent instanceof InfixExpression) {\n                final InfixExpression prefixExpression= (InfixExpression) parent;\n                if (hasOperator(prefixExpression, InfixExpression.Operator.CONDITIONAL_AND, InfixExpression.Operator.CONDITIONAL_OR)) {\n                    return node.getAST().resolveWellKnownType(boolean.class.getSimpleName());\n                }\n            } else if (parent instanceof IfStatement) {\n                final IfStatement ifStatement= (IfStatement) parent;\n                if (ifStatement.getExpression().equals(node)) {\n                    return node.getAST().resolveWellKnownType(boolean.class.getSimpleName());\n                }\n            } else if (parent instanceof WhileStatement) {\n                final WhileStatement whileStatement= (WhileStatement) parent;\n                if (whileStatement.getExpression().equals(node)) {\n                    return node.getAST().resolveWellKnownType(boolean.class.getSimpleName());\n                }\n            } else if (parent instanceof DoStatement) {\n                final DoStatement doStatement= (DoStatement) parent;\n                if (doStatement.getExpression().equals(node)) {\n                    return node.getAST().resolveWellKnownType(boolean.class.getSimpleName());\n                }\n            } else if (parent instanceof SwitchStatement) {\n                final SwitchStatement switchStatement= (SwitchStatement) parent;\n                if (switchStatement.getExpression().equals(node)) {\n                    final ITypeBinding discriminentType= switchStatement.getExpression().resolveTypeBinding();\n\n                    if (discriminentType != null) {\n                        if (discriminentType.isPrimitive() || discriminentType.isEnum()\n                                || hasType(discriminentType, String.class.getCanonicalName())) {\n                            return discriminentType;\n                        }\n\n                        return node.getAST()\n                                .resolveWellKnownType(Bindings.getUnboxedTypeName(discriminentType.getQualifiedName()));\n                    }\n                }\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of either a method return or an assigned variable that is the destination of the given node. Returns null otherwise.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.getParent", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getTargetType", "org.eclipse.jdt.core.dom.ReturnStatement.getExpression", "org.eclipse.jdt.core.dom.Expression.equals", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestorOrNull", "org.eclipse.jdt.core.dom.MethodDeclaration.getReturnType2", "org.eclipse.jdt.core.dom.Type.resolveBinding", "org.eclipse.jdt.core.dom.CastExpression.resolveTypeBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.resolveTypeBinding", "org.eclipse.jdt.core.dom.Assignment.getLeftHandSide", "org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.eclipse.jdt.core.dom.ArrayAccess.getIndex", "org.eclipse.jdt.core.dom.ASTNode.getAST", "java.lang.Class.getSimpleName", "org.eclipse.jdt.core.dom.AST.resolveWellKnownType", "org.eclipse.jdt.core.dom.ConditionalExpression.getExpression", "org.eclipse.jdt.core.dom.IfStatement.getExpression", "org.eclipse.jdt.core.dom.WhileStatement.getExpression", "org.eclipse.jdt.core.dom.DoStatement.getExpression", "org.eclipse.jdt.core.dom.SwitchStatement.getExpression", "org.eclipse.jdt.core.dom.ITypeBinding.isPrimitive", "org.eclipse.jdt.core.dom.ITypeBinding.isEnum", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "org.autorefactor.jdt.internal.corext.dom.Bindings.getUnboxedTypeName"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ASTNode"], [""], ["java.lang.Object"], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Class"], [""], [""], [""], ["org.eclipse.jdt.core.dom.VariableDeclaration"], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String[]"], [""], ["java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getTargetType": "Returns the type of either a method return or an assigned variable that is the destination of the given node. Returns null otherwise."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getAncestorOrNull": "Returns the first ancestor of the provided node which has the required type."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.resolveTypeBinding": "Returns the  {@link ITypeBinding} of the {@link VariableDeclaration}."}, {"org.autorefactor.jdt.internal.corext.dom.Bindings.getUnboxedTypeName": "Get the type of the associated primitive wrapper."}]}, {"index": "153", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.statementAtLevel", "methodParameterType": "Statement#", "methodParameterName": "node#", "methodBody": "public static Statement statementAtLevel(Statement node) {\n        final ASTNode parent= node.getParent();\n\n        if (parent instanceof LabeledStatement) {\n            return statementAtLevel((LabeledStatement) parent);\n        }\n\n        return node;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the statement at the same level as its siblings.", "call_func_name": ["org.eclipse.jdt.core.dom.Statement.getParent", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.statementAtLevel"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Statement"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.statementAtLevel": "Returns the statement at the same level as its siblings."}]}, {"index": "154", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.canHaveSiblings", "methodParameterType": "Statement#", "methodParameterName": "node#", "methodBody": "public static boolean canHaveSiblings(Statement node) {\n        final ASTNode statementAtLevel= statementAtLevel(node);\n        final ASTNode parent= statementAtLevel.getParent();\n\n        return parent instanceof Block\n                || parent instanceof SwitchStatement && statementAtLevel.getLocationInParent() == SwitchStatement.STATEMENTS_PROPERTY;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if a sibling may exist.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.statementAtLevel", "org.eclipse.jdt.core.dom.ASTNode.getParent", "org.eclipse.jdt.core.dom.ASTNode.getLocationInParent"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.statementAtLevel": "Returns the statement at the same level as its siblings."}]}, {"index": "155", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousSibling", "methodParameterType": "BodyDeclaration#", "methodParameterName": "startNode#", "methodBody": "public static BodyDeclaration getPreviousSibling(BodyDeclaration startNode) {\n        return getSibling(startNode, true);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the previous body declaration in the same block if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getSibling"], "call_func_parameter": [["org.eclipse.jdt.core.dom.BodyDeclaration", "boolean"]], "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousSibling", "methodParameterType": "Statement#", "methodParameterName": "startNode#", "methodBody": "public static Statement getPreviousSibling(Statement startNode) {\n        List<Statement> siblings= getSiblings(startNode, false);\n\n        if (siblings.isEmpty()) {\n            return null;\n        }\n\n        return siblings.get(siblings.size() - 1);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the previous statement in the same block if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getSiblings", "java.util.List.isEmpty", "java.util.List.size", "java.util.List.get"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement", "boolean"], [""], [""], ["int"]], "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousStatement", "methodParameterType": "Statement#", "methodParameterName": "startNode#", "methodBody": "public static Statement getPreviousStatement(Statement startNode) {\n        final Statement previousSibling= getPreviousSibling(startNode);\n        if (previousSibling != null) {\n            return previousSibling;\n        }\n        final ASTNode parent= startNode.getParent();\n        if (parent instanceof Statement) {\n            return getPreviousStatement((Statement) parent);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the previous statement in the source file if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousSibling", "org.eclipse.jdt.core.dom.Statement.getParent", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousStatement"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement"], [""], ["org.eclipse.jdt.core.dom.Statement"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousSibling": "Returns the previous statement in the same block if it exists."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousStatement": "Returns the previous statement in the source file if it exists."}]}, {"index": "158", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextSibling", "methodParameterType": "BodyDeclaration#", "methodParameterName": "startNode#", "methodBody": "public static BodyDeclaration getNextSibling(BodyDeclaration startNode) {\n        return getSibling(startNode, false);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the next body declaration in the same block if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getSibling"], "call_func_parameter": [["org.eclipse.jdt.core.dom.BodyDeclaration", "boolean"]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextSibling", "methodParameterType": "Statement#", "methodParameterName": "startNode#", "methodBody": "public static Statement getNextSibling(Statement startNode) {\n        List<Statement> siblings= getSiblings(startNode, true);\n\n        if (siblings.isEmpty()) {\n            return null;\n        }\n\n        return siblings.get(0);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the next statement in the same block if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getSiblings", "java.util.List.isEmpty", "java.util.List.get"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement", "boolean"], [""], ["int"]], "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextSiblings", "methodParameterType": "Statement#", "methodParameterName": "startNode#", "methodBody": "public static List<Statement> getNextSiblings(Statement startNode) {\n        return getSiblings(startNode, true);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the next statements in the same block if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getSiblings"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement", "boolean"]], "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getPreviousSiblings", "methodParameterType": "Statement#", "methodParameterName": "startNode#", "methodBody": "public static List<Statement> getPreviousSiblings(Statement startNode) {\n        return getSiblings(startNode, false);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the previous statements in the same block if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getSiblings"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement", "boolean"]], "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextStatement", "methodParameterType": "Statement#", "methodParameterName": "startNode#", "methodBody": "public static Statement getNextStatement(Statement startNode) {\n        final Statement nextSibling= getNextSibling(startNode);\n        if (nextSibling != null) {\n            return nextSibling;\n        }\n        final ASTNode parent= startNode.getParent();\n        if (parent instanceof Statement) {\n            return getNextStatement((Statement) parent);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the next statement in the source file if it exists.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextSibling", "org.eclipse.jdt.core.dom.Statement.getParent", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextStatement"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement"], [""], ["org.eclipse.jdt.core.dom.Statement"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextSibling": "Returns the next statement in the same block if it exists."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextStatement": "Returns the next statement in the source file if it exists."}]}, {"index": "163", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.resolveTypeBinding", "methodParameterType": "VariableDeclaration#", "methodParameterName": "varDecl#", "methodBody": "public static ITypeBinding resolveTypeBinding(final VariableDeclaration varDecl) {\n        if (varDecl != null) {\n            final IVariableBinding varBinding= varDecl.resolveBinding();\n            if (varBinding != null) {\n                return varBinding.getType();\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link ITypeBinding} of the {@link VariableDeclaration}.", "call_func_name": ["org.eclipse.jdt.core.dom.VariableDeclaration.resolveBinding", "org.eclipse.jdt.core.dom.IVariableBinding.getType"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasOperator", "methodParameterType": "Assignment#Assignment.Operator#Assignment.Operator#", "methodParameterName": "node#anOperator#operators#", "methodBody": "public static boolean hasOperator(Assignment node, Assignment.Operator anOperator, Assignment.Operator... operators) {\n        return node != null && isOperatorInList(node.getOperator(), anOperator, operators);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided operator is the same as the one of provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasOperator", "methodParameterType": "InfixExpression#InfixExpression.Operator#InfixExpression.Operator#", "methodParameterName": "node#anOperator#operators#", "methodBody": "public static boolean hasOperator(InfixExpression node, InfixExpression.Operator anOperator, InfixExpression.Operator... operators) {\n        return node != null && isOperatorInList(node.getOperator(), anOperator, operators);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided operator is the same as the one of provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasOperator", "methodParameterType": "PostfixExpression#PostfixExpression.Operator#PostfixExpression.Operator#", "methodParameterName": "node#anOperator#operators#", "methodBody": "public static boolean hasOperator(PostfixExpression node, PostfixExpression.Operator anOperator, PostfixExpression.Operator... operators) {\n        return node != null && isOperatorInList(node.getOperator(), anOperator, operators);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided operator is the same as the one of provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasOperator", "methodParameterType": "PrefixExpression#PrefixExpression.Operator#PrefixExpression.Operator#", "methodParameterName": "node#anOperator#operators#", "methodBody": "public static boolean hasOperator(PrefixExpression node, PrefixExpression.Operator anOperator, PrefixExpression.Operator... operators) {\n        return node != null && isOperatorInList(node.getOperator(), anOperator, operators);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided operator is the same as the one of provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "methodParameterType": "Expression#String#", "methodParameterName": "expression#oneOfQualifiedTypeNames#", "methodBody": "public static boolean hasType(Expression expression, String... oneOfQualifiedTypeNames) {\n        return expression != null && hasType(expression.resolveTypeBinding(), oneOfQualifiedTypeNames);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression evaluates to exactly one of the provided type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "methodParameterType": "ITypeBinding#String#", "methodParameterName": "typeBinding#oneOfQualifiedTypeNames#", "methodBody": "public static boolean hasType(final ITypeBinding typeBinding, String... oneOfQualifiedTypeNames) {\n        if (typeBinding != null) {\n            final String qualifiedName= typeBinding.getErasure().getQualifiedName();\n            for (String qualifiedTypeName : oneOfQualifiedTypeNames) {\n                if (qualifiedTypeName.equals(qualifiedName)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided type binding is exactly one of the provided type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.haveSameType", "methodParameterType": "Expression#Expression#", "methodParameterName": "expr1#expr2#", "methodBody": "public static boolean haveSameType(Expression expr1, Expression expr2) {\n        return expr1 != null && expr2 != null && Utils.equalNotNull(expr1.resolveTypeBinding(), expr2.resolveTypeBinding());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expressions evaluate to the same type.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.autorefactor.util.Utils.equalNotNull"], "call_func_parameter": [[""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"org.autorefactor.util.Utils.equalNotNull": "Returns whether the two provided objects are equal and not null."}]}, {"index": "171", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf", "methodParameterType": "Expression#String#", "methodParameterName": "expression#qualifiedTypeName#", "methodBody": "public static boolean instanceOf(Expression expression, String qualifiedTypeName) {\n        return expression != null && instanceOf(expression.resolveTypeBinding(), qualifiedTypeName);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression is an instance of the qualified type name.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf": "Returns whether the provided type binding is an instance of the qualified type name."}]}, {"index": "172", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf", "methodParameterType": "ITypeBinding#String#", "methodParameterName": "typeBinding#qualifiedTypeName#", "methodBody": "public static boolean instanceOf(ITypeBinding typeBinding, String qualifiedTypeName) {\n        return findImplementedType(typeBinding, qualifiedTypeName) != null;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided type binding is an instance of the qualified type name.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.findImplementedType"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.findImplementedType": "Returns the type binding for the provided qualified type name if it can be found in the type hierarchy of the provided type binding."}]}, {"index": "173", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isArray", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public static boolean isArray(Expression expression) {\n        if (expression != null) {\n            final ITypeBinding typeBinding= expression.resolveTypeBinding();\n            return typeBinding != null && typeBinding.isArray();\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression represents an array.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.eclipse.jdt.core.dom.ITypeBinding.isArray"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isConstant", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public static boolean isConstant(final Expression expression) {\n        return expression != null && expression.resolveConstantExpressionValue() != null || isEnumConstant(expression);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression represents a constant value.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveConstantExpressionValue", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEnumConstant"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isHardCoded", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public static boolean isHardCoded(final Expression expression) {\n        if (expression == null) {\n            return false;\n        }\n        switch (expression.getNodeType()) {\n        case ASTNode.BOOLEAN_LITERAL:\n        case ASTNode.CHARACTER_LITERAL:\n        case ASTNode.NUMBER_LITERAL:\n        case ASTNode.STRING_LITERAL:\n        case ASTNode.NULL_LITERAL:\n            return true;\n\n        case ASTNode.INFIX_EXPRESSION:\n            for (Expression operand : allOperands((InfixExpression) expression)) {\n                if (!isHardCoded(operand)) {\n                    return false;\n                }\n            }\n\n            return true;\n\n        case ASTNode.PREFIX_EXPRESSION:\n            PrefixExpression prefixExpression= (PrefixExpression) expression;\n            return isHardCoded(prefixExpression.getOperand());\n\n        case ASTNode.POSTFIX_EXPRESSION:\n            PostfixExpression postfixExpression= (PostfixExpression) expression;\n            return isHardCoded(postfixExpression.getOperand());\n\n        case ASTNode.CAST_EXPRESSION:\n            return isHardCoded(((CastExpression) expression).getExpression());\n\n        case ASTNode.PARENTHESIZED_EXPRESSION:\n            return isHardCoded(((ParenthesizedExpression) expression).getExpression());\n\n        default:\n            return expression.resolveConstantExpressionValue() != null || isEnumConstant(expression);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#QualifiedName#SwitchCase#BooleanLiteral#ReturnStatement#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression is hard-coded as a literal in the byte code ignoring parentheses.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.getNodeType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.allOperands", "java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isHardCoded", "java.util.Iterator.hasNext", "org.eclipse.jdt.core.dom.PrefixExpression.getOperand", "org.eclipse.jdt.core.dom.PostfixExpression.getOperand", "org.eclipse.jdt.core.dom.CastExpression.getExpression", "org.eclipse.jdt.core.dom.ParenthesizedExpression.getExpression", "org.eclipse.jdt.core.dom.Expression.resolveConstantExpressionValue", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEnumConstant"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.InfixExpression"], [""], [""], ["org.eclipse.jdt.core.dom.Expression"], [""], [""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.allOperands": "Returns all the operands from the provided infix expressions. It takes a bug into account. In some cases, ASTConverter.java creates several infix expressions instead of one extended infix expression. It occurs for an expression with a sub-infix-expression in the middle without parenthesis."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isHardCoded": "Returns whether the provided expression is hard-coded as a literal in the byte code ignoring parentheses."}]}, {"index": "176", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.integerLiteral", "methodParameterType": "Expression#", "methodParameterName": "input#", "methodBody": "public static Long integerLiteral(Expression input) {\n        NumberLiteral contant= as(input, NumberLiteral.class);\n        PrefixExpression negativeContant= as(input, PrefixExpression.class);\n\n        if (negativeContant != null && hasOperator(negativeContant, PrefixExpression.Operator.MINUS)) {\n            Long value= integerLiteral(negativeContant.getOperand());\n\n            if (value != null) {\n                return -value;\n            }\n        } else if (contant != null) {\n            return positiveLiteral(contant);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#ReturnStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression)ReturnStatement)Block)IfStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Integer literal.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.eclipse.jdt.core.dom.PrefixExpression.getOperand", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.integerLiteral", "java.lang.Long.longValue", "java.lang.Long.valueOf", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.positiveLiteral"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""], ["org.eclipse.jdt.core.dom.Expression"], [""], ["long"], ["org.eclipse.jdt.core.dom.NumberLiteral"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.integerLiteral": "Integer literal."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.positiveLiteral": "Positive literal."}]}, {"index": "177", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.positiveLiteral", "methodParameterType": "NumberLiteral#", "methodParameterName": "input#", "methodBody": "public static Long positiveLiteral(NumberLiteral input) {\n        Object number= input.resolveConstantExpressionValue();\n\n        if (number instanceof Short) {\n            return (long) ((Short) number).intValue();\n        }\n\n        if (number instanceof Integer) {\n            return (long) ((Integer) number).intValue();\n        }\n\n        if (number instanceof Long) {\n            return (Long) number;\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#PrimitiveType#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#PrimitiveType#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Positive literal.", "call_func_name": ["org.eclipse.jdt.core.dom.NumberLiteral.resolveConstantExpressionValue", "java.lang.Short.intValue", "java.lang.Long.valueOf", "java.lang.Integer.intValue"], "call_func_parameter": [[""], [""], ["long"], [""]], "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isLocalVariable", "methodParameterType": "IBinding#", "methodParameterName": "binding#", "methodBody": "public static boolean isLocalVariable(IBinding binding) {\n        if (binding != null && binding.getKind() == IBinding.VARIABLE) {\n            final IVariableBinding bnd= (IVariableBinding) binding;\n            return !bnd.isField() && !bnd.isEnumConstant();\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided binding represents a local variable.", "call_func_name": ["org.eclipse.jdt.core.dom.IBinding.getKind", "org.eclipse.jdt.core.dom.IVariableBinding.isField", "org.eclipse.jdt.core.dom.IVariableBinding.isEnumConstant"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameLocalVariable", "methodParameterType": "IBinding#Expression#", "methodParameterName": "binding#expression#", "methodBody": "public static boolean isSameLocalVariable(IBinding binding, Expression expression) {\n        return isLocalVariable(binding) && expression != null && expression.getNodeType() == SIMPLE_NAME\n        // No need to use IVariableBinding.isEqualTo(IBinding) since we are looking for\n        // a *local* variable\n                && binding.equals(((SimpleName) expression).resolveBinding());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided binding and expression represent the same local variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.isLocalVariable", "org.eclipse.jdt.core.dom.Expression.getNodeType", "org.eclipse.jdt.core.dom.SimpleName.resolveBinding", "org.eclipse.jdt.core.dom.IBinding.equals"], "call_func_parameter": [["org.eclipse.jdt.core.dom.IBinding"], [""], [""], ["java.lang.Object"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isLocalVariable": "Returns whether the provided binding represents a local variable."}]}, {"index": "180", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameLocalVariable", "methodParameterType": "Expression#Expression#", "methodParameterName": "expr1#expr2#", "methodBody": "public static boolean isSameLocalVariable(Expression expr1, Expression expr2) {\n        return expr1 != null && expr1.getNodeType() == SIMPLE_NAME\n                && isSameLocalVariable(((SimpleName) expr1).resolveBinding(), expr2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expressions represent the same local variable.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.getNodeType", "org.eclipse.jdt.core.dom.SimpleName.resolveBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameLocalVariable"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.IBinding", "org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameLocalVariable": "Returns whether the provided binding and expression represent the same local variable."}]}, {"index": "181", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameLocalVariable", "methodParameterType": "VariableDeclaration#Expression#", "methodParameterName": "varDecl#expression#", "methodBody": "public static boolean isSameLocalVariable(VariableDeclaration varDecl, Expression expression) {\n        return varDecl != null && isSameLocalVariable(varDecl.resolveBinding(), expression);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided variable declaration and expression represent the same local variable.", "call_func_name": ["org.eclipse.jdt.core.dom.VariableDeclaration.resolveBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameLocalVariable"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.IBinding", "org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameLocalVariable": "Returns whether the provided binding and expression represent the same local variable."}]}, {"index": "182", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive", "methodParameterType": "Expression#String#", "methodParameterName": "expression#primitiveTypeName#", "methodBody": "public static boolean isPrimitive(Expression expression, String primitiveTypeName) {\n        return expression != null && isPrimitive(expression.resolveTypeBinding(), primitiveTypeName);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression evaluates to a primitive type.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive": "Returns whether the provided type binding represents the provided primitive type."}]}, {"index": "183", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public static boolean isPrimitive(Expression expression) {\n        return expression != null && isPrimitive(expression.resolveTypeBinding());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided expression evaluates to a primitive type.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ITypeBinding"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive": "Returns whether the provided type binding represents a primitive type."}]}, {"index": "184", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive", "methodParameterType": "ITypeBinding#String#", "methodParameterName": "typeBinding#primitiveTypeName#", "methodBody": "public static boolean isPrimitive(ITypeBinding typeBinding, String primitiveTypeName) {\n        return typeBinding != null && typeBinding.isPrimitive()\n                && typeBinding.getQualifiedName().equals(primitiveTypeName);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided type binding represents the provided primitive type.", "call_func_name": ["org.eclipse.jdt.core.dom.ITypeBinding.isPrimitive", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "java.lang.String.equals"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive", "methodParameterType": "ITypeBinding#", "methodParameterName": "typeBinding#", "methodBody": "public static boolean isPrimitive(ITypeBinding typeBinding) {\n        return typeBinding != null && typeBinding.isPrimitive()\n                && Arrays.asList(boolean.class.getSimpleName(), byte.class.getSimpleName(), char.class.getSimpleName(), short.class.getSimpleName(), int.class.getSimpleName(), long.class.getSimpleName(), float.class.getSimpleName(), double.class.getSimpleName())\n                        .contains(typeBinding.getQualifiedName());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided type binding represents a primitive type.", "call_func_name": ["org.eclipse.jdt.core.dom.ITypeBinding.isPrimitive", "java.lang.Class.getSimpleName", "java.util.Arrays.asList", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "java.util.List.contains"], "call_func_parameter": [[""], [""], ["java.lang.Object[]"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.findImplementedType", "methodParameterType": "ITypeBinding#String#", "methodParameterName": "typeBinding#qualifiedTypeName#", "methodBody": "public static ITypeBinding findImplementedType(ITypeBinding typeBinding, String qualifiedTypeName) {\n        if (typeBinding == null) {\n            return null;\n        }\n        final ITypeBinding typeErasure= typeBinding.getErasure();\n        if (qualifiedTypeName.equals(typeBinding.getQualifiedName())\n                || qualifiedTypeName.equals(typeErasure.getQualifiedName())) {\n            return typeBinding;\n        }\n        final Set<String> visitedClasses= new HashSet<>();\n        visitedClasses.add(typeErasure.getQualifiedName());\n        return findImplementedType(typeBinding, qualifiedTypeName, visitedClasses);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type binding for the provided qualified type name if it can be found in the type hierarchy of the provided type binding.", "call_func_name": ["org.eclipse.jdt.core.dom.ITypeBinding.getErasure", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "java.lang.String.equals", "java.util.HashSet.<init>", "java.util.Set.add", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.findImplementedType"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], ["java.lang.Object"], ["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String", "java.util.Set"]], "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNullCheckedExpression", "methodParameterType": "Expression#", "methodParameterName": "expression#", "methodBody": "public static Expression getNullCheckedExpression(Expression expression) {\n        final Expression e= getUnparenthesedExpression(expression);\n        if (e instanceof InfixExpression) {\n            final InfixExpression ie= (InfixExpression) e;\n            if (hasOperator(ie, InfixExpression.Operator.NOT_EQUALS) && checkNoExtendedOperands(ie)) {\n                if (is(ie.getLeftOperand(), NullLiteral.class)) {\n                    return ie.getRightOperand();\n                }\n                if (is(ie.getRightOperand(), NullLiteral.class)) {\n                    return ie.getLeftOperand();\n                }\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the null-checked expression if the provided node is a null check.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.checkNoExtendedOperands", "org.eclipse.jdt.core.dom.InfixExpression.getLeftOperand", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.is", "org.eclipse.jdt.core.dom.InfixExpression.getRightOperand"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.InfixExpression"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression": "Returns the same expression after removing any parentheses around it."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.checkNoExtendedOperands": "Extended operands are used for deeply nested expressions, mostly string concatenation expressions. <p> This will be implemented only if somebody comes up with code where the runtime exception is thrown. </p>"}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.is": "Returns whether the provided expression has the provided type."}]}, {"index": "188", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.checkNoExtendedOperands", "methodParameterType": "InfixExpression#", "methodParameterName": "node#", "methodBody": "public static boolean checkNoExtendedOperands(InfixExpression node) {\n        if (!hasType(node, String.class.getCanonicalName()) && node.hasExtendedOperands()) {\n            throw new NotImplementedException(node, \"for extended operands\"); //$NON-NLS-1$\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Extended operands are used for deeply nested expressions, mostly string concatenation expressions. <p> This will be implemented only if somebody comes up with code where the runtime exception is thrown. </p>", "call_func_name": ["java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "org.eclipse.jdt.core.dom.InfixExpression.hasExtendedOperands", "org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String[]"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"]], "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUniqueFragment", "methodParameterType": "VariableDeclarationStatement#", "methodParameterName": "node#", "methodBody": "public static VariableDeclarationFragment getUniqueFragment(VariableDeclarationStatement node) {\n        if (node == null) {\n            return null;\n        }\n        final List<VariableDeclarationFragment> fragments= fragments(node);\n        return fragments.size() == 1 ? fragments.get(0) : null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#NullLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the unique  {@link VariableDeclarationFragment} declared in theprovided  {@link VariableDeclarationStatement}.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.fragments", "java.util.List.size", "java.util.List.get"], "call_func_parameter": [["org.eclipse.jdt.core.dom.VariableDeclarationStatement"], [""], ["int"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.fragments": "Generecized version of the equivalent JDT method."}]}, {"index": "190", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isLoop", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static boolean isLoop(ASTNode node) {\n        return node instanceof DoStatement || node instanceof EnhancedForStatement || node instanceof ForStatement\n                || node instanceof WhileStatement;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided node defines a loop.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isBreakable", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static boolean isBreakable(ASTNode node) {\n        return isLoop(node) || node instanceof SwitchStatement;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided node is breakable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.isLoop"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isLoop": "Returns whether the provided node defines a loop."}]}, {"index": "192", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isExceptionExpected", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static boolean isExceptionExpected(final ASTNode node) {\n        ASTNode parentNode= getFirstAncestorOrNull(node, TryStatement.class, BodyDeclaration.class);\n\n        while (parentNode instanceof TryStatement) {\n            TryStatement tryStatement= (TryStatement) parentNode;\n\n            for (Object object : tryStatement.catchClauses()) {\n                CatchClause catchClause= (CatchClause) object;\n\n                if (catchClause.getException().getType() != null\n                        && !instanceOf(catchClause.getException().getType().resolveBinding(),\n                                RuntimeException.class.getCanonicalName())) {\n                    return true;\n                }\n            }\n\n            parentNode= getFirstAncestorOrNull(parentNode, TryStatement.class, BodyDeclaration.class);\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether a checked exception is supposed to be caught.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getFirstAncestorOrNull", "org.eclipse.jdt.core.dom.TryStatement.catchClauses", "java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jdt.core.dom.CatchClause.getException", "org.eclipse.jdt.core.dom.SingleVariableDeclaration.getType", "org.eclipse.jdt.core.dom.Type.resolveBinding", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf", "java.util.Iterator.hasNext"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Class[]"], [""], [""], [""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf": "Returns whether the provided type binding is an instance of the qualified type name."}]}, {"index": "193", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isField", "methodParameterType": "QualifiedName#String#String#", "methodParameterName": "node#qualifiedTypeName#fieldNames#", "methodBody": "public static boolean isField(QualifiedName node, String qualifiedTypeName, String... fieldNames) {\n        return instanceOf(node, qualifiedTypeName)\n                && Arrays.asList(fieldNames).contains(node.getName().getIdentifier());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided qualified name accesses a field with the provided signature.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.usesGivenSignature", "methodParameterType": "MethodInvocation#String#String#String#", "methodParameterName": "node#typeQualifiedName#methodName#parameterTypesQualifiedNames#", "methodBody": "public static boolean usesGivenSignature(MethodInvocation node, String typeQualifiedName, String methodName,\n            String... parameterTypesQualifiedNames) {\n        return node != null\n                && usesGivenSignature(node.resolveMethodBinding(), typeQualifiedName, methodName, parameterTypesQualifiedNames);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided method invocation invokes a method with the provided method signature. The method signature is compared against the erasure of the invoked method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.usesGivenSignature", "methodParameterType": "MethodDeclaration#String#String#String#", "methodParameterName": "node#typeQualifiedName#methodName#parameterTypesQualifiedNames#", "methodBody": "public static boolean usesGivenSignature(MethodDeclaration node, String typeQualifiedName, String methodName,\n            String... parameterTypesQualifiedNames) {\n        return node != null\n                && usesGivenSignature(node.resolveBinding(), typeQualifiedName, methodName, parameterTypesQualifiedNames);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided method declaration declares a method with the provided method signature. The method signature is compared against the erasure of the declared method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.usesGivenSignature", "methodParameterType": "IMethodBinding#String#String#String#", "methodParameterName": "methodBinding#typeQualifiedName#methodName#parameterTypesQualifiedNames#", "methodBody": "public static boolean usesGivenSignature(IMethodBinding methodBinding, String typeQualifiedName, String methodName,\n            String... parameterTypesQualifiedNames) {\n        // Let's do the fast checks first\n        if (methodBinding == null || !methodName.equals(methodBinding.getName())\n                || methodBinding.getParameterTypes().length != parameterTypesQualifiedNames.length) {\n            return false;\n        }\n        // OK more heavy checks now\n        final ITypeBinding declaringClass= methodBinding.getDeclaringClass();\n        final ITypeBinding implementedType= findImplementedType(declaringClass, typeQualifiedName);\n        final boolean isInstanceOf= instanceOf(declaringClass, typeQualifiedName);\n        if (parameterTypesMatch(implementedType, isInstanceOf, methodBinding, parameterTypesQualifiedNames)) {\n            return true;\n        }\n        // A lot more heavy checks\n        // FIXME find a more efficient way to do this. It would be awesome\n        // if an API to directly find the overriddenMethod IMethodBinding existed\n        IMethodBinding overriddenMethod= findOverridenMethod(declaringClass, typeQualifiedName, methodName,\n                parameterTypesQualifiedNames);\n        if (overriddenMethod != null && methodBinding.overrides(overriddenMethod)) {\n            return true;\n        }\n        IMethodBinding methodDeclaration= methodBinding.getMethodDeclaration();\n        return methodDeclaration != null && methodDeclaration != methodBinding\n                && usesGivenSignature(methodDeclaration, typeQualifiedName, methodName, parameterTypesQualifiedNames);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(InfixExpression(FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)FieldAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided method binding has the provided method signature. The method signature is compared against the erasure of the invoked method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getOverridenMethods", "methodParameterType": "IMethodBinding#", "methodParameterName": "overridingMethod#", "methodBody": "public static Set<IMethodBinding> getOverridenMethods(IMethodBinding overridingMethod) {\n        final Set<IMethodBinding> results= new HashSet<>();\n        findOverridenMethods(overridingMethod, results, overridingMethod.getDeclaringClass());\n        return results;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a set made of all the method bindings which are overridden by the provided method binding.", "call_func_name": ["java.util.HashSet.<init>", "org.eclipse.jdt.core.dom.IMethodBinding.getDeclaringClass", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.findOverridenMethods"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.IMethodBinding", "java.util.Set", "org.eclipse.jdt.core.dom.ITypeBinding"]], "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual", "methodParameterType": "Name#Name#", "methodParameterName": "name1#name2#", "methodBody": "public static boolean isEqual(Name name1, Name name2) {\n        if (name1 instanceof SimpleName && name2 instanceof SimpleName) {\n            return isEqual((SimpleName) name1, (SimpleName) name2);\n        }\n\n        return name1 instanceof QualifiedName && name2 instanceof QualifiedName && isEqual((QualifiedName) name1, (QualifiedName) name2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two names are equal.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual"], "call_func_parameter": [["org.eclipse.jdt.core.dom.SimpleName", "org.eclipse.jdt.core.dom.SimpleName"], ["org.eclipse.jdt.core.dom.QualifiedName", "org.eclipse.jdt.core.dom.QualifiedName"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual": "Returns whether the two simple names are equal."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual": "Returns whether the two qualified names are equal."}]}, {"index": "199", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual", "methodParameterType": "SimpleName#SimpleName#", "methodParameterName": "name1#name2#", "methodBody": "public static boolean isEqual(SimpleName name1, SimpleName name2) {\n        return name1.getIdentifier().equals(name2.getIdentifier());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two simple names are equal.", "call_func_name": ["org.eclipse.jdt.core.dom.SimpleName.getIdentifier", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual", "methodParameterType": "QualifiedName#QualifiedName#", "methodParameterName": "name1#name2#", "methodBody": "public static boolean isEqual(QualifiedName name1, QualifiedName name2) {\n        return isEqual(name1.getName(), name2.getName()) && isEqual(name1.getQualifier(), name2.getQualifier());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two qualified names are equal.", "call_func_name": ["org.eclipse.jdt.core.dom.QualifiedName.getName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual", "org.eclipse.jdt.core.dom.QualifiedName.getQualifier", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.SimpleName", "org.eclipse.jdt.core.dom.SimpleName"], [""], ["org.eclipse.jdt.core.dom.Name", "org.eclipse.jdt.core.dom.Name"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual": "Returns whether the two simple names are equal."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual": "Returns whether the two names are equal."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual": "Returns whether the two simple names are equal."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isEqual": "Returns whether the two qualified names are equal."}]}, {"index": "201", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.match", "methodParameterType": "List<Statement>#List<Statement>#", "methodParameterName": "referenceStatements#comparedStatements#", "methodBody": "public static boolean match(final List<Statement> referenceStatements, final List<Statement> comparedStatements) {\n        if (referenceStatements.size() != comparedStatements.size()) {\n            return false;\n        }\n\n        for (int codeLine= 0; codeLine < referenceStatements.size(); codeLine++) {\n            if (!match(referenceStatements.get(codeLine), comparedStatements.get(codeLine))) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided codes structurally match.", "call_func_name": ["java.util.List.size", "java.util.List.get", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.match"], "call_func_parameter": [[""], ["int"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.match": "Returns whether the two provided nodes structurally match."}]}, {"index": "202", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.match", "methodParameterType": "ASTNode#ASTNode#", "methodParameterName": "node1#node2#", "methodBody": "public static boolean match(ASTNode node1, ASTNode node2) {\n        return match(ASTSemanticMatcher.INSTANCE, node1, node2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided nodes structurally match.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.match"], "call_func_parameter": [["org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher", "org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.match": "Returns whether the two provided nodes structurally match."}]}, {"index": "203", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.match", "methodParameterType": "ASTSemanticMatcher#ASTNode#ASTNode#", "methodParameterName": "matcher#node1#node2#", "methodBody": "public static boolean match(ASTSemanticMatcher matcher, ASTNode node1, ASTNode node2) {\n        return matcher.safeSubtreeMatch(node1, node2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided nodes structurally match.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTSemanticMatcher.safeSubtreeMatch"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.areBindingsEqual", "methodParameterType": "IBinding#IBinding#", "methodParameterName": "b1#b2#", "methodBody": "public static boolean areBindingsEqual(final IBinding b1, final IBinding b2) {\n        return b1 != null && b2 != null && b1.isEqualTo(b2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether to bindings are equal.", "call_func_name": ["org.eclipse.jdt.core.dom.IBinding.isEqualTo"], "call_func_parameter": [["org.eclipse.jdt.core.dom.IBinding"]], "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "methodParameterType": "SimpleName#QualifiedName#", "methodParameterName": "name1#name2#", "methodBody": "public static boolean isSameVariable(SimpleName name1, QualifiedName name2) {\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided names represent the same variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "methodParameterType": "SimpleName#SimpleName#", "methodParameterName": "name1#name2#", "methodBody": "public static boolean isSameVariable(SimpleName name1, SimpleName name2) {\n        return areVariableBindingsEqual(name1, name2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided names represent the same variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.areVariableBindingsEqual"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "methodParameterType": "SimpleName#FieldAccess#", "methodParameterName": "name1#field2#", "methodBody": "public static boolean isSameVariable(SimpleName name1, FieldAccess field2) {\n        return as(field2.getExpression(), ThisExpression.class) != null && areVariableBindingsEqual(field2, name1);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided expressions represent the same variable.", "call_func_name": ["org.eclipse.jdt.core.dom.FieldAccess.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.areVariableBindingsEqual"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}]}, {"index": "208", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "methodParameterType": "QualifiedName#QualifiedName#", "methodParameterName": "name1#name2#", "methodBody": "public static boolean isSameVariable(QualifiedName name1, QualifiedName name2) {\n        return areVariableBindingsEqual(name1, name2) && isSameVariable(name1.getQualifier(), name2.getQualifier());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided qualified names represent the same variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.areVariableBindingsEqual", "org.eclipse.jdt.core.dom.QualifiedName.getQualifier", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided nodes represent the same variable."}]}, {"index": "209", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "methodParameterType": "QualifiedName#FieldAccess#", "methodParameterName": "name1#field2#", "methodBody": "public static boolean isSameVariable(QualifiedName name1, FieldAccess field2) {\n        return areVariableBindingsEqual(name1, field2) && isSameVariable(field2.getExpression(), name1.getQualifier());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided expressions represent the same variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.areVariableBindingsEqual", "org.eclipse.jdt.core.dom.FieldAccess.getExpression", "org.eclipse.jdt.core.dom.QualifiedName.getQualifier", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided nodes represent the same variable."}]}, {"index": "210", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "methodParameterType": "FieldAccess#FieldAccess#", "methodParameterName": "field1#field2#", "methodBody": "public static boolean isSameVariable(FieldAccess field1, FieldAccess field2) {\n        return areVariableBindingsEqual(field1, field2)\n                && isSameVariable(field1.getExpression(), field2.getExpression());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided field accesses represent the same variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.areVariableBindingsEqual", "org.eclipse.jdt.core.dom.FieldAccess.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided nodes represent the same variable."}]}, {"index": "211", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.areSameVariables", "methodParameterType": "ASTNode#ASTNode#", "methodParameterName": "node0#otherNodes#", "methodBody": "public static boolean areSameVariables(final ASTNode node0, final ASTNode... otherNodes) {\n        for (ASTNode nodeN : otherNodes) {\n            if (!isSameVariable(node0, nodeN)) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided nodes all represent the same variable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "methodParameterType": "ASTNode#ASTNode#", "methodParameterName": "node1#node2#", "methodBody": "public static boolean isSameVariable(ASTNode node1, ASTNode node2) {\n        node1= getUnparenthesedExpression(node1);\n        node2= getUnparenthesedExpression(node2);\n\n        if (node1 == null || node2 == null) {\n            return false;\n        }\n\n        switch (node1.getNodeType()) {\n        case THIS_EXPRESSION:\n            return node2.getNodeType() == THIS_EXPRESSION;\n\n        case SIMPLE_NAME:\n            final SimpleName sn= (SimpleName) node1;\n            switch (node2.getNodeType()) {\n            case QUALIFIED_NAME:\n                return isSameVariable(sn, (QualifiedName) node2);\n            case FIELD_ACCESS:\n                return isSameVariable(sn, (FieldAccess) node2);\n            }\n            break;\n\n        case QUALIFIED_NAME:\n            final QualifiedName qn= (QualifiedName) node1;\n            switch (node2.getNodeType()) {\n            case SIMPLE_NAME:\n                return isSameVariable((SimpleName) node2, qn);\n            case QUALIFIED_NAME:\n                return isSameVariable(qn, (QualifiedName) node2);\n            case FIELD_ACCESS:\n                return isSameVariable(qn, (FieldAccess) node2);\n            }\n            break;\n\n        case FIELD_ACCESS:\n            final FieldAccess fa= (FieldAccess) node1;\n            switch (node2.getNodeType()) {\n            case SIMPLE_NAME:\n                return isSameVariable((SimpleName) node2, fa);\n            case QUALIFIED_NAME:\n                return isSameVariable((QualifiedName) node2, fa);\n            case FIELD_ACCESS:\n                return isSameVariable(fa, (FieldAccess) node2);\n            }\n        }\n\n        return areVariableBindingsEqual(node1, node2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#ReturnStatement#SimpleName#SwitchCase#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#SwitchStatement#BreakStatement#SimpleName#SwitchCase#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#SwitchStatement#BreakStatement#SimpleName#SwitchCase#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#SwitchStatement#SwitchStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)SwitchStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)SwitchStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)SwitchStatement)SwitchStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided nodes represent the same variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression", "org.eclipse.jdt.core.dom.ASTNode.getNodeType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.areVariableBindingsEqual"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"], [""], ["org.eclipse.jdt.core.dom.SimpleName", "org.eclipse.jdt.core.dom.QualifiedName"], ["org.eclipse.jdt.core.dom.SimpleName", "org.eclipse.jdt.core.dom.FieldAccess"], ["org.eclipse.jdt.core.dom.QualifiedName", "org.eclipse.jdt.core.dom.QualifiedName"], ["org.eclipse.jdt.core.dom.QualifiedName", "org.eclipse.jdt.core.dom.FieldAccess"], ["org.eclipse.jdt.core.dom.FieldAccess", "org.eclipse.jdt.core.dom.FieldAccess"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getUnparenthesedExpression": "Returns the same node after removing any parentheses around it."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided names represent the same variable."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided expressions represent the same variable."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided qualified names represent the same variable."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided expressions represent the same variable."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided field accesses represent the same variable."}]}, {"index": "213", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getParent", "methodParameterType": "ASTNode#Class<?>#", "methodParameterName": "node#includedClasses#", "methodBody": "public static ASTNode getParent(ASTNode node, Class<?>... includedClasses) {\n        final ASTNode parent= node.getParent();\n        if (instanceOf(parent, includedClasses)) {\n            return getParent(parent, includedClasses);\n        }\n\n        return node;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the last parent node whose class is part of the included classes list or the provided node otherwise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "214", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getParentIgnoring", "methodParameterType": "ASTNode#Class<?>#", "methodParameterName": "node#ignoredClasses#", "methodBody": "public static ASTNode getParentIgnoring(ASTNode node, Class<?>... ignoredClasses) {\n        final ASTNode parent= node.getParent();\n        if (parent == null) {\n            return node;\n        }\n        if (instanceOf(parent, ignoredClasses)) {\n            return getParentIgnoring(parent, ignoredClasses);\n        }\n\n        return parent;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the first parent node which has a different type that the provided ignored classes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getFileName", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static String getFileName(ASTNode node) {\n        if (node.getRoot() instanceof CompilationUnit) {\n            CompilationUnit cu= (CompilationUnit) node.getRoot();\n            if (cu.getTypeRoot() != null) { // added for unit tests\n                return cu.getTypeRoot().getElementName();\n            }\n\n            return \"FakeClass.java\"; //$NON-NLS-1$\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#StringLiteral#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the file name where the node comes from, or \"FakeClass.java\" if this is a fake node.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.getRoot", "org.eclipse.jdt.core.dom.CompilationUnit.getTypeRoot", "org.eclipse.jdt.core.ITypeRoot.getElementName"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getSourceLocation", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static String getSourceLocation(ASTNode node) {\n        final ASTNode root= node != null ? node.getRoot() : null;\n        if (root instanceof CompilationUnit) {\n            final CompilationUnit cu= (CompilationUnit) root;\n            final int position= node.getStartPosition();\n            final int line= cu.getLineNumber(position);\n            final int column= cu.getColumnNumber(position) + 1;\n            if (cu.getTypeRoot() != null) {\n                return cu.getTypeRoot().getElementName() + \":\" + line + \":\" + column; //$NON-NLS-1$ //$NON-NLS-2$\n            }\n            // It was not created from a file\n            return line + \":\" + column; //$NON-NLS-1$\n        }\n\n        return \"\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#IfStatement#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a string suitable for identifying a location in the source.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.getRoot", "org.eclipse.jdt.core.dom.ASTNode.getStartPosition", "org.eclipse.jdt.core.dom.CompilationUnit.getLineNumber", "org.eclipse.jdt.core.dom.CompilationUnit.getColumnNumber", "org.eclipse.jdt.core.dom.CompilationUnit.getTypeRoot", "org.eclipse.jdt.core.ITypeRoot.getElementName", "java.lang.String.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.valueOf"], "call_func_parameter": [[""], [""], ["int"], ["int"], [""], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], ["int"], [""], ["int"]], "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getLocalVariableIdentifiers", "methodParameterType": "ASTNode#boolean#", "methodParameterName": "node#includeInnerScopes#", "methodBody": "public static Set<String> getLocalVariableIdentifiers(final ASTNode node, boolean includeInnerScopes) {\n        if (node == null) {\n            return Collections.emptySet();\n        }\n        final VarDeclarationIdentifierVisitor visitor= new VarDeclarationIdentifierVisitor(node,\n                includeInnerScopes);\n        node.accept(visitor);\n        return visitor.getVariableNames();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the identifiers of variables declared inside the given statement.", "call_func_name": ["java.util.Collections.emptySet", "org.autorefactor.jdt.internal.corext.dom.VarDeclarationIdentifierVisitor.<init>", "org.eclipse.jdt.core.dom.ASTNode.accept", "org.autorefactor.jdt.internal.corext.dom.VarDeclarationIdentifierVisitor.getVariableNames"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ASTNode", "boolean"], ["org.eclipse.jdt.core.dom.ASTVisitor"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.VarDeclarationIdentifierVisitor.getVariableNames": "Get the variable names."}]}, {"index": "218", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPassiveWithoutFallingThrough", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static boolean isPassiveWithoutFallingThrough(final ASTNode node) {\n        final ExprActivityVisitor visitor= new ExprActivityVisitor();\n        visitor.visitNode(node);\n        return ExprActivity.PASSIVE_WITHOUT_FALLING_THROUGH.equals(visitor.getActivityLevel());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the node changes nothing and throws no exceptions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPassive", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static boolean isPassive(final ASTNode node) {\n        final ExprActivityVisitor visitor= new ExprActivityVisitor();\n        visitor.visitNode(node);\n        return ExprActivity.PASSIVE_WITHOUT_FALLING_THROUGH.equals(visitor.getActivityLevel())\n                || ExprActivity.PASSIVE.equals(visitor.getActivityLevel());\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return true if the node changes nothing.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.fallsThrough", "methodParameterType": "Statement#", "methodParameterName": "statement#", "methodBody": "public static boolean fallsThrough(Statement statement) {\n        final List<Statement> statements= asList(statement);\n        if (statements.isEmpty()) {\n            return false;\n        }\n\n        final Statement lastStatement= statements.get(statements.size() - 1);\n        switch (lastStatement.getNodeType()) {\n        case RETURN_STATEMENT:\n        case THROW_STATEMENT:\n        case BREAK_STATEMENT:\n        case CONTINUE_STATEMENT:\n            return true;\n\n        case BLOCK:\n            final Block block= (Block) lastStatement;\n            return fallsThrough(block);\n\n        case IF_STATEMENT:\n            final IfStatement ifStatement= (IfStatement) lastStatement;\n            final Statement thenStatement= ifStatement.getThenStatement();\n            final Statement elseStatement= ifStatement.getElseStatement();\n            return fallsThrough(thenStatement) && fallsThrough(elseStatement);\n\n        default:\n            return false;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#SwitchCase#BooleanLiteral#ReturnStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement(SwitchCase)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "Return true if the statement falls through.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.asList", "java.util.List.isEmpty", "java.util.List.size", "java.util.List.get", "org.eclipse.jdt.core.dom.Statement.getNodeType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.fallsThrough", "org.eclipse.jdt.core.dom.IfStatement.getThenStatement", "org.eclipse.jdt.core.dom.IfStatement.getElseStatement"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Statement"], [""], [""], ["int"], [""], ["org.eclipse.jdt.core.dom.Statement"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.asList": "Returns the provided statement as a non null list of statements: <ul> <li>if the statement is null, then an empty list is returned</li> <li>if the statement is a  {@link Block}, then its children are returned</li> <li>otherwise, the current node is returned wrapped in a list</li> </ul>"}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.fallsThrough": "Return true if the statement falls through."}]}, {"index": "221", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.decomposeInitializer", "methodParameterType": "Expression#", "methodParameterName": "init#", "methodBody": "public static Pair<Expression, Expression> decomposeInitializer(Expression init) {\n        if (init instanceof VariableDeclarationExpression) {\n            final VariableDeclarationExpression vde= (VariableDeclarationExpression) init;\n            final List<VariableDeclarationFragment> fragments= fragments(vde);\n\n            if (fragments.size() == 1) {\n                final VariableDeclarationFragment fragment= fragments.get(0);\n                return Pair.of(fragment.getName(), fragment.getInitializer());\n            }\n        } else if (init instanceof Assignment) {\n            final Assignment as= (Assignment) init;\n\n            if (hasOperator(as, Assignment.Operator.ASSIGN)) {\n                final Name name= as(as.getLeftHandSide(), Name.class);\n                final FieldAccess fieldAccess= as(as.getLeftHandSide(), FieldAccess.class);\n\n                if (name != null) {\n                    return Pair.of(name, as.getRightHandSide());\n                }\n\n                if (fieldAccess != null) {\n                    return Pair.of(fieldAccess, as.getRightHandSide());\n                }\n            }\n        }\n\n        return Pair.empty();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decomposes an initializer into a  {@link Pair} with the name of theinitialized variable and the initializing expression.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.fragments", "java.util.List.size", "java.util.List.get", "org.eclipse.jdt.core.dom.VariableDeclarationFragment.getName", "org.eclipse.jdt.core.dom.VariableDeclarationFragment.getInitializer", "org.autorefactor.util.Pair.of", "org.eclipse.jdt.core.dom.Assignment.getLeftHandSide", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.eclipse.jdt.core.dom.Assignment.getRightHandSide", "org.autorefactor.util.Pair.empty"], "call_func_parameter": [["org.eclipse.jdt.core.dom.VariableDeclarationExpression"], [""], ["int"], [""], [""], ["java.lang.Object", "java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.fragments": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}, {"org.autorefactor.util.Pair.empty": "Returns an immutable empty pair."}]}, {"index": "222", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isInElse", "methodParameterType": "IfStatement#", "methodParameterName": "node#", "methodBody": "public static boolean isInElse(final IfStatement node) {\n        if (node == null) {\n            return false;\n        }\n\n        final ASTNode parent= node.getParent();\n\n        if (parent instanceof IfStatement) {\n            IfStatement is= (IfStatement) parent;\n            return node.equals(is.getElseStatement());\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the if statement is in a else statement, that is to say is an else-if statement.", "call_func_name": ["org.eclipse.jdt.core.dom.IfStatement.getParent", "org.eclipse.jdt.core.dom.IfStatement.getElseStatement", "org.eclipse.jdt.core.dom.IfStatement.equals"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasVariableConflict", "methodParameterType": "Statement#Statement#", "methodParameterName": "node#statementInBlock#", "methodBody": "public static boolean hasVariableConflict(Statement node, final Statement statementInBlock) {\n        final Set<String> existingVariableNames= getLocalVariableIdentifiers(statementInBlock, false);\n\n        for (Statement statement : getNextSiblings(node)) {\n            final VarOccurrenceVisitor varOccurrenceVisitor= new VarOccurrenceVisitor(existingVariableNames);\n            varOccurrenceVisitor.visitNode(statement);\n\n            if (varOccurrenceVisitor.isVarUsed()) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if variables are declared with the same identifier after the given statement.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getLocalVariableIdentifiers", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextSiblings", "java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.VarOccurrenceVisitor.<init>", "org.autorefactor.jdt.internal.corext.dom.VarOccurrenceVisitor.visitNode", "org.autorefactor.jdt.internal.corext.dom.VarOccurrenceVisitor.isVarUsed", "java.util.Iterator.hasNext"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "boolean"], ["org.eclipse.jdt.core.dom.Statement"], [""], [""], ["java.util.Set"], ["org.eclipse.jdt.core.dom.ASTNode"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getLocalVariableIdentifiers": "Return the identifiers of variables declared inside the given statement."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNextSiblings": "Returns the next statements in the same block if it exists."}, {"org.autorefactor.jdt.internal.corext.dom.VarOccurrenceVisitor.isVarUsed": "Returns true if at least one variable is used."}]}, {"index": "224", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.booleanConstant", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static Boolean booleanConstant(final ASTNode node) {\n        if (!(node instanceof Expression)) {\n            return null;\n        }\n\n        Expression expression= (Expression) node;\n\n        final BooleanLiteral booleanLiteral= as(expression, BooleanLiteral.class);\n        final QualifiedName booleanConstant= as(expression, QualifiedName.class);\n\n        if (booleanLiteral != null) {\n            return booleanLiteral.booleanValue();\n        }\n\n        if (booleanConstant != null) {\n            if (isField(booleanConstant, Boolean.class.getCanonicalName(), \"TRUE\")) { //$NON-NLS-1$\n                return Boolean.TRUE;\n            }\n\n            if (isField(booleanConstant, Boolean.class.getCanonicalName(), \"FALSE\")) { //$NON-NLS-1$\n                return Boolean.FALSE;\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a boolean constant value, if present.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.eclipse.jdt.core.dom.BooleanLiteral.booleanValue", "java.lang.Boolean.valueOf", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isField"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""], ["boolean"], [""], ["org.eclipse.jdt.core.dom.QualifiedName", "java.lang.String", "java.lang.String[]"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}]}, {"index": "225", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTNodes.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNbOperands", "methodParameterType": "Expression#", "methodParameterName": "node#", "methodBody": "public static int getNbOperands(Expression node) {\n        final InfixExpression infixExpression= as(node, InfixExpression.class);\n\n        if (infixExpression == null\n                || !hasOperator(infixExpression, InfixExpression.Operator.CONDITIONAL_AND, InfixExpression.Operator.CONDITIONAL_OR)\n                && (!hasOperator(infixExpression, InfixExpression.Operator.AND, InfixExpression.Operator.OR, InfixExpression.Operator.XOR)\n                        || !hasType(infixExpression.getLeftOperand(), boolean.class.getCanonicalName(), Boolean.class.getCanonicalName()))) {\n            return 1;\n        }\n\n        int nbOperands= 0;\n\n        for (Expression operand : allOperands(infixExpression)) {\n            nbOperands+= getNbOperands(operand);\n        }\n\n        return nbOperands;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#ParenthesizedExpression#InfixExpression#InfixExpression#NumberLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(ParenthesizedExpression(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression)ParenthesizedExpression)InfixExpression)InfixExpression(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of logical operands in the expression.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.eclipse.jdt.core.dom.InfixExpression.getLeftOperand", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.allOperands", "java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNbOperands", "java.util.Iterator.hasNext"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String[]"], ["org.eclipse.jdt.core.dom.InfixExpression"], [""], [""], ["org.eclipse.jdt.core.dom.Expression"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.allOperands": "Returns all the operands from the provided infix expressions. It takes a bug into account. In some cases, ASTConverter.java creates several infix expressions instead of one extended infix expression. It occurs for an expression with a sub-infix-expression in the middle without parenthesis."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getNbOperands": "Returns the number of logical operands in the expression."}]}, {"index": "226", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarOccurrenceVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarOccurrenceVisitor.isVarUsed", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isVarUsed() {\n        return varUsed;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns true if at least one variable is used.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarOccurrenceVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarOccurrenceVisitor.VarOccurrenceVisitor", "methodParameterType": "Set<String>#", "methodParameterName": "localVarIds#", "methodBody": "public VarOccurrenceVisitor(final Set<String> localVarIds) {\n        this.localVarIds= localVarIds;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "The constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "228", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/BlockSubVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.BlockSubVisitor.BlockSubVisitor", "methodParameterType": "RefactoringContext#Block#", "methodParameterName": "ctx#startNode#", "methodBody": "public BlockSubVisitor(final RefactoringContext ctx, final Block startNode) {\n        this.ctx= ctx;\n        this.startNode= startNode;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/BlockSubVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.BlockSubVisitor.getResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean getResult() {\n        return result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "230", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/BlockSubVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.BlockSubVisitor.setResult", "methodParameterType": "boolean#", "methodParameterName": "result#", "methodBody": "public void setResult(final boolean result) {\n        this.result= result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "231", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarDeclarationIdentifierVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarDeclarationIdentifierVisitor.VarDeclarationIdentifierVisitor", "methodParameterType": "ASTNode#boolean#", "methodParameterName": "startNode#includeInnerScopes#", "methodBody": "public VarDeclarationIdentifierVisitor(ASTNode startNode, boolean includeInnerScopes) {\n        this.startNode= startNode;\n        this.includeInnerScopes= includeInnerScopes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "The constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "232", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/VarDeclarationIdentifierVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.VarDeclarationIdentifierVisitor.getVariableNames", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<String> getVariableNames() {\n        return variableNames;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the variable names.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "233", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ApplyRefactoringsJob.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.ApplyRefactoringsJob", "methodParameterType": "Queue<RefactoringUnit>#List<RefactoringRule>#Environment#", "methodParameterName": "refactoringUnits#refactoringRulesToApply#environment#", "methodBody": "public ApplyRefactoringsJob(Queue<RefactoringUnit> refactoringUnits, List<RefactoringRule> refactoringRulesToApply,\n            Environment environment) {\n        super(\"AutoRefactor\"); //$NON-NLS-1$\n        setPriority(Job.LONG);\n        this.refactoringUnits= refactoringUnits;\n        this.refactoringRulesToApply= refactoringRulesToApply;\n        this.environment= environment;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#StringLiteral#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(StringLiteral)StringLiteral)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "234", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ApplyRefactoringsJob.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.applyRefactoring", "methodParameterType": "ICompilationUnit#AggregateASTVisitor#JavaProjectOptions#SubMonitor#boolean#", "methodParameterName": "compilationUnit#refactoringToApply#options#monitor#hasToSave#", "methodBody": "public List<TextEdit> applyRefactoring(ICompilationUnit compilationUnit, AggregateASTVisitor refactoringToApply,\n            JavaProjectOptions options, SubMonitor monitor, boolean hasToSave) throws Exception {\n        final ITextFileBufferManager bufferManager= FileBuffers.getTextFileBufferManager();\n        final IPath path= compilationUnit.getPath();\n        final LocationKind locationKind= LocationKind.NORMALIZE;\n        List<TextEdit> textEdits= null;\n        try {\n            bufferManager.connect(path, locationKind, null);\n            final ITextFileBuffer textFileBuffer= bufferManager.getTextFileBuffer(path, locationKind);\n            if (!textFileBuffer.isSynchronized()) {\n                /*\n                 * Cannot read the source when a file is not synchronized, Let's ignore this\n                 * file to avoid problems when: - doing string manipulation with the source text\n                 * - applying automated cleanups to such files\n                 */\n                environment.getLogger()\n                        .error(\"File \\\"\" + compilationUnit.getPath() + \"\\\" is not synchronized with the file system.\" //$NON-NLS-1$ //$NON-NLS-2$\n                                + \" Automated refactorings will not be applied to it.\"); //$NON-NLS-1$\n                return null;\n            }\n            final IDocument document= textFileBuffer.getDocument();\n            textEdits= applyRefactoring(document, compilationUnit, refactoringToApply, options, monitor, hasToSave);\n        } finally {\n            bufferManager.disconnect(path, locationKind, null);\n        }\n\n        return textEdits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Applies the cleanups provided inside the  {@link AggregateASTVisitor} tothe provided  {@link ICompilationUnit}.", "call_func_name": ["org.eclipse.core.filebuffers.FileBuffers.getTextFileBufferManager", "org.eclipse.jdt.core.ICompilationUnit.getPath", "org.eclipse.core.filebuffers.ITextFileBufferManager.connect", "org.eclipse.core.filebuffers.ITextFileBufferManager.getTextFileBuffer", "org.eclipse.core.filebuffers.ITextFileBuffer.isSynchronized", "org.autorefactor.environment.Environment.getLogger", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.environment.Logger.error", "org.eclipse.core.filebuffers.ITextFileBufferManager.disconnect", "org.eclipse.core.filebuffers.ITextFileBuffer.getDocument", "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.applyRefactoring"], "call_func_parameter": [[""], [""], ["org.eclipse.core.runtime.IPath", "org.eclipse.core.filebuffers.LocationKind", "org.eclipse.core.runtime.IProgressMonitor"], ["org.eclipse.core.runtime.IPath", "org.eclipse.core.filebuffers.LocationKind"], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], ["org.eclipse.core.runtime.IPath", "org.eclipse.core.filebuffers.LocationKind", "org.eclipse.core.runtime.IProgressMonitor"], [""], ["org.eclipse.jface.text.IDocument", "org.eclipse.jdt.core.ICompilationUnit", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor", "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions", "org.eclipse.core.runtime.SubMonitor", "boolean"]], "passed_comments": [{"org.autorefactor.environment.Environment.getLogger": "Returns the logger."}, {"org.autorefactor.environment.Logger.error": "Logs an error message into Eclipse workspace logs."}, {"org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.applyRefactoring": "Applies the cleanups provided inside the  {@link AggregateASTVisitor} tothe provided  {@link ICompilationUnit}."}]}, {"index": "235", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ApplyRefactoringsJob.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.applyRefactoring", "methodParameterType": "IDocument#ICompilationUnit#AggregateASTVisitor#JavaProjectOptions#SubMonitor#boolean#", "methodParameterName": "document#compilationUnit#refactoring#options#monitor#hasToSave#", "methodBody": "public List<TextEdit> applyRefactoring(IDocument document, ICompilationUnit compilationUnit,\n            AggregateASTVisitor refactoring, JavaProjectOptions options, SubMonitor monitor, boolean hasToSave)\n            throws Exception {\n        // Creation of DOM/AST from a ICompilationUnit\n        final ASTParser parser= ASTParser.newParser(AST.JLS8);\n\n        final int maxIterations= 100;\n        int iterationCount= 0;\n        Set<ASTVisitor> lastLoopVisitors= Collections.emptySet();\n        int nbLoopsWithSameVisitors= 0;\n\n        List<TextEdit> textEdits= new ArrayList<>();\n\n        monitor.setWorkRemaining(maxIterations);\n\n        CompilationUnit astRoot;\n        do {\n            // I did not find any other way to directly modify the AST\n            // while still keeping the resolved type bindings working.\n            // Using astRoot.recordModifications() did not work:\n            // type bindings were lost. Is there a way to recover them?\n            // FIXME we should find a way to apply all the changes at\n            // the AST level and refresh the bindings\n            resetParser(compilationUnit, parser, options);\n            astRoot= (CompilationUnit) parser.createAST(null);\n\n            if (iterationCount > maxIterations) {\n                // Oops! Something went wrong.\n                final String errorMsg= \"An infinite loop has been detected for file \" + ASTNodes.getFileName(astRoot) + \".\" //$NON-NLS-1$ //$NON-NLS-2$\n                        + \" A possible cause is that code is being incorrectly\" //$NON-NLS-1$\n                        + \" refactored one way then refactored back to what it was.\" + \" Fix the code before pursuing.\" //$NON-NLS-1$ //$NON-NLS-2$\n                        + getPossibleCulprits(nbLoopsWithSameVisitors, lastLoopVisitors);\n                environment.getLogger().error(errorMsg, new IllegalStateException(astRoot, errorMsg));\n                break;\n            }\n\n            final RefactoringContext ctx= new RefactoringContext(compilationUnit, astRoot, options, monitor,\n                    environment);\n            refactoring.setRefactoringContext(ctx);\n\n            final Refactorings refactorings= refactoring.getRefactorings(astRoot);\n            if (!refactorings.hasRefactorings()) {\n                // No new cleanups have been applied,\n                // We are done with applying the cleanups.\n                break;\n            }\n\n            // Apply the cleanups and save the compilation unit\n            refactorings.applyTo(document, hasToSave);\n            textEdits.add(refactorings.getEdits());\n            if (!hasToSave) {\n                return textEdits;\n            }\n            final boolean hadUnsavedChanges= compilationUnit.hasUnsavedChanges();\n            compilationUnit.getBuffer().setContents(document.get());\n            // http://wiki.eclipse.org/FAQ_What_is_a_working_copy%3F\n            // compilationUnit.reconcile(AST.JLS8,\n            // ICompilationUnit.ENABLE_BINDINGS_RECOVERY |\n            // ICompilationUnit.ENABLE_STATEMENTS_RECOVERY |\n            // ICompilationUnit.FORCE_PROBLEM_DETECTION\n            // /** can be useful to back out a change that does not compile */\n            // , null, null);\n            if (!hadUnsavedChanges && hasToSave) {\n                compilationUnit.save(null, true);\n            }\n            iterationCount++;\n\n            final Set<ASTVisitor> thisLoopVisitors= refactoring.getVisitorsContributingRefactoring();\n            if (thisLoopVisitors.equals(lastLoopVisitors)) {\n                nbLoopsWithSameVisitors++;\n            } else {\n                lastLoopVisitors= new HashSet<>(thisLoopVisitors);\n                nbLoopsWithSameVisitors= 0;\n            }\n        } while (true);\n\n        return textEdits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#StringLiteral#StringLiteral#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#BreakStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#SimpleName#SimpleName#NullLiteral#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#BooleanLiteral#DoStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(DoStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)CastExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block(BooleanLiteral)BooleanLiteral)DoStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Applies the cleanups provided inside the  {@link AggregateASTVisitor} tothe provided  {@link ICompilationUnit}.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTParser.newParser", "java.util.Collections.emptySet", "java.util.ArrayList.<init>", "org.eclipse.core.runtime.SubMonitor.setWorkRemaining", "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.resetParser", "org.eclipse.jdt.core.dom.ASTParser.createAST", "java.lang.StringBuilder.<init>", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.getFileName", "java.lang.StringBuilder.append", "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.getPossibleCulprits", "java.lang.StringBuilder.toString", "org.autorefactor.environment.Environment.getLogger", "org.autorefactor.util.IllegalStateException.<init>", "org.autorefactor.environment.Logger.error", "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.<init>", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.setRefactoringContext", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getRefactorings", "org.autorefactor.jdt.internal.corext.dom.Refactorings.hasRefactorings", "org.autorefactor.jdt.internal.corext.dom.Refactorings.applyTo", "org.autorefactor.jdt.internal.corext.dom.Refactorings.getEdits", "java.util.List.add", "org.eclipse.jdt.core.ICompilationUnit.hasUnsavedChanges", "org.eclipse.jdt.core.ICompilationUnit.getBuffer", "org.eclipse.jface.text.IDocument.get", "org.eclipse.jdt.core.IBuffer.setContents", "org.eclipse.jdt.core.ICompilationUnit.save", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getVisitorsContributingRefactoring", "java.util.Set.equals", "java.util.HashSet.<init>"], "call_func_parameter": [["int"], [""], [""], ["int"], ["org.eclipse.jdt.core.ICompilationUnit", "org.eclipse.jdt.core.dom.ASTParser", "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions"], ["org.eclipse.core.runtime.IProgressMonitor"], ["java.lang.String"], ["org.eclipse.jdt.core.dom.ASTNode"], ["java.lang.String"], ["int", "java.util.Set"], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], ["java.lang.String", "java.lang.Exception"], ["org.eclipse.jdt.core.ICompilationUnit", "org.eclipse.jdt.core.dom.CompilationUnit", "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions", "org.eclipse.core.runtime.SubMonitor", "org.autorefactor.environment.Environment"], ["org.autorefactor.jdt.internal.ui.fix.RefactoringContext"], ["org.eclipse.jdt.core.dom.CompilationUnit"], [""], ["org.eclipse.jface.text.IDocument", "boolean"], [""], ["java.lang.Object"], [""], [""], [""], ["java.lang.String"], ["org.eclipse.core.runtime.IProgressMonitor", "boolean"], [""], ["java.lang.Object"], ["java.util.Collection"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getFileName": "Returns the file name where the node comes from, or \"FakeClass.java\" if this is a fake node."}, {"org.autorefactor.environment.Environment.getLogger": "Returns the logger."}, {"org.autorefactor.environment.Logger.error": "Logs an error message with an exception into Eclipse workspace logs."}, {"org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.setRefactoringContext": "Set the cleanup context."}, {"org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getRefactorings": "Get the cleanups."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.hasRefactorings": "Returns whether this instance has any cleanups."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.applyTo": "Applies the accumulated cleanups to the provided document."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.getEdits": "Gets the edits."}, {"org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getVisitorsContributingRefactoring": "Returns the visitors that contributed cleanups in the last run."}]}, {"index": "236", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTCommentRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.ASTCommentRewriter", "methodParameterType": "CompilationUnit#", "methodParameterName": "astRoot#", "methodBody": "public ASTCommentRewriter(CompilationUnit astRoot) {\n        this.lineSeparator= getLineSeparator(astRoot);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Default constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "237", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTCommentRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.remove", "methodParameterType": "Comment#", "methodParameterName": "comment#", "methodBody": "public void remove(Comment comment) {\n        this.removals.add(comment);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the provided comment.", "call_func_name": ["java.util.Set.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "238", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTCommentRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.replace", "methodParameterType": "Comment#String#", "methodParameterName": "comment#replacement#", "methodBody": "public void replace(Comment comment, String replacement) {\n        this.replacements.add(Pair.of(comment, replacement));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Replaces the provided comment with the provided replacement text.", "call_func_name": ["org.autorefactor.util.Pair.of", "java.util.Set.add"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTCommentRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.toJavadoc", "methodParameterType": "BlockComment#", "methodParameterName": "comment#", "methodBody": "public void toJavadoc(BlockComment comment) {\n        this.blockCommentToJavadoc.add(comment);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Converts the provided block comment into a javadoc.", "call_func_name": ["java.util.List.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTCommentRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.toJavadoc", "methodParameterType": "LineComment#ASTNode#", "methodParameterName": "lineComment#nextNode#", "methodBody": "public void toJavadoc(LineComment lineComment, ASTNode nextNode) {\n        List<LineComment> comments= lineCommentsToJavadoc.get(nextNode);\n        if (comments == null) {\n            comments= new LinkedList<>();\n            lineCommentsToJavadoc.put(nextNode, comments);\n        }\n        comments.add(lineComment);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the provided line comment to convert to javadoc.", "call_func_name": ["java.util.Map.get", "java.util.LinkedList.<init>", "java.util.Map.put", "java.util.List.add"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "241", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ASTCommentRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.addEdits", "methodParameterType": "IDocument#TextEdit#", "methodParameterName": "document#edits#", "methodBody": "public void addEdits(IDocument document, TextEdit edits) {\n        final String source= document.get();\n        final List<TextEdit> commentEdits= new ArrayList<>(nbEdits());\n        addRemovalEdits(commentEdits, source);\n        addReplacementEdits(commentEdits);\n        addBlockCommentToJavadocEdits(commentEdits);\n        addLineCommentsToJavadocEdits(commentEdits, source);\n        if (!commentEdits.isEmpty() && !anyOverlaps(edits, commentEdits)) {\n            edits.addChildren(commentEdits.toArray(new TextEdit[commentEdits.size()]));\n        }\n        // Else, code edits take priority. Give up applying current text edits.\n        // They will be retried in the next cleanup loop.\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds the edits contained in the current instance to the provided edits for the provided document.", "call_func_name": ["org.eclipse.jface.text.IDocument.get", "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.nbEdits", "java.util.ArrayList.<init>", "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.addRemovalEdits", "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.addReplacementEdits", "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.addBlockCommentToJavadocEdits", "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.addLineCommentsToJavadocEdits", "java.util.List.isEmpty", "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.anyOverlaps", "java.util.List.size", "java.util.List.toArray", "org.eclipse.text.edits.TextEdit.addChildren"], "call_func_parameter": [[""], [""], ["int"], ["java.util.List", "java.lang.String"], ["java.util.List"], ["java.util.List"], ["java.util.List", "java.lang.String"], [""], ["org.eclipse.text.edits.TextEdit", "java.util.List"], [""], ["java.lang.Object[]"], ["org.eclipse.text.edits.TextEdit[]"]], "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/ForLoopHelper.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.ForLoopHelper.iterateOverContainer", "methodParameterType": "ForStatement#", "methodParameterName": "node#", "methodBody": "public static ForLoopContent iterateOverContainer(ForStatement node) {\n        final List<Expression> initializers= ASTNodes.initializers(node);\n        final Expression condition= node.getExpression();\n        final List<Expression> updaters= ASTNodes.updaters(node);\n\n        if (initializers.size() == 1) {\n            Expression firstInit= initializers.get(0);\n\n            if (updaters.isEmpty()) {\n                final Pair<Expression, Expression> initPair= ASTNodes.decomposeInitializer(firstInit);\n                final Expression init= initPair.getFirst();\n                final MethodInvocation condMi= ASTNodes.as(node.getExpression(), MethodInvocation.class);\n                final MethodInvocation initMi= ASTNodes.as(initPair.getSecond(), MethodInvocation.class);\n\n                if (condMi != null && ASTNodes.isSameVariable(init, condMi.getExpression())\n                        && ASTNodes.usesGivenSignature(initMi, Collection.class.getCanonicalName(), \"iterator\") //$NON-NLS-1$\n                        && ASTNodes.usesGivenSignature(condMi, Iterator.class.getCanonicalName(), \"hasNext\")) { //$NON-NLS-1$\n                    return getIteratorOnCollection(initMi.getExpression(), condMi.getExpression());\n                }\n            } else if (updaters.size() == 1 && ASTNodes.isPrimitive(firstInit, int.class.getSimpleName())) {\n                final Pair<Expression, Expression> initPair= ASTNodes.decomposeInitializer(firstInit);\n                final Expression init= initPair.getFirst();\n                final Expression startValue= initPair.getSecond();\n                Long zero= ASTNodes.integerLiteral(startValue);\n                final InfixExpression startValueMinusOne= ASTNodes.as(startValue, InfixExpression.class);\n                Expression collectionOnSize= null;\n                Expression arrayOnLength= null;\n\n                if (startValueMinusOne != null && !startValueMinusOne.hasExtendedOperands() && ASTNodes.hasOperator(startValueMinusOne, InfixExpression.Operator.MINUS)) {\n                    final Long one= ASTNodes.integerLiteral(startValueMinusOne.getRightOperand());\n\n                    if (one != null && one == 1) {\n                        collectionOnSize= getCollectionOnSize(startValueMinusOne.getLeftOperand());\n                        arrayOnLength= getArrayOnLength(startValueMinusOne.getLeftOperand());\n                    }\n                }\n\n                final ForLoopContent forContent= getIndexOnIterable(condition, init, zero, collectionOnSize, arrayOnLength);\n                final Name updater= getUpdaterOperand(updaters.get(0), zero != null && zero == 0);\n\n                if (forContent != null && ASTNodes.isSameVariable(init, forContent.loopVariable)\n                        && ASTNodes.isSameVariable(init, updater)) {\n                    return forContent;\n                }\n            }\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#IfStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement)IfStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link ForLoopContent} if this for loop iterates over acontainer.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.initializers", "org.eclipse.jdt.core.dom.ForStatement.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.updaters", "java.util.List.size", "java.util.List.get", "java.util.List.isEmpty", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.decomposeInitializer", "org.autorefactor.util.Pair.getFirst", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.autorefactor.util.Pair.getSecond", "org.eclipse.jdt.core.dom.MethodInvocation.getExpression", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.usesGivenSignature", "org.autorefactor.jdt.internal.corext.dom.ForLoopHelper.getIteratorOnCollection", "java.lang.Class.getSimpleName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.integerLiteral", "org.eclipse.jdt.core.dom.InfixExpression.hasExtendedOperands", "org.eclipse.jdt.core.dom.InfixExpression.getRightOperand", "java.lang.Long.longValue", "org.eclipse.jdt.core.dom.InfixExpression.getLeftOperand", "org.autorefactor.jdt.internal.corext.dom.ForLoopHelper.getCollectionOnSize", "org.autorefactor.jdt.internal.corext.dom.ForLoopHelper.getArrayOnLength", "org.autorefactor.jdt.internal.corext.dom.ForLoopHelper.getIndexOnIterable", "org.autorefactor.jdt.internal.corext.dom.ForLoopHelper.getUpdaterOperand"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ForStatement"], [""], ["org.eclipse.jdt.core.dom.ForStatement"], [""], ["int"], [""], ["org.eclipse.jdt.core.dom.Expression"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"], [""], ["org.eclipse.jdt.core.dom.MethodInvocation", "java.lang.String", "java.lang.String", "java.lang.String[]"], ["org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String"], ["org.eclipse.jdt.core.dom.Expression"], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression", "java.lang.Long", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Expression", "boolean"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.initializers": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.updaters": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.decomposeInitializer": "Decomposes an initializer into a  {@link Pair} with the name of theinitialized variable and the initializing expression."}, {"org.autorefactor.util.Pair.getFirst": "Gets the first element of this pair."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}, {"org.autorefactor.util.Pair.getSecond": "Gets the second element of this pair."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isSameVariable": "Returns whether the two provided nodes represent the same variable."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isPrimitive": "Returns whether the provided expression evaluates to a primitive type."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.integerLiteral": "Integer literal."}]}, {"index": "243", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceRewriter.remove", "methodParameterType": "SourceLocation#", "methodParameterName": "toRemove#", "methodBody": "public void remove(SourceLocation toRemove) {\n        this.removals.add(toRemove);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the provided source location from the source.", "call_func_name": ["java.util.Set.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "244", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceRewriter.replace", "methodParameterType": "SourceLocation#String#", "methodParameterName": "toReplace#replacement#", "methodBody": "public void replace(SourceLocation toReplace, String replacement) {\n        this.replacements.put(toReplace, replacement);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Replaces the provided source location with the replacement string in the source.", "call_func_name": ["java.util.Map.put"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "245", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceRewriter.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceRewriter.addEdits", "methodParameterType": "IDocument#TextEdit#", "methodParameterName": "document#edits#", "methodBody": "public void addEdits(IDocument document, TextEdit edits) {\n        for (SourceLocation loc : this.removals) {\n            edits.addChild(new DeleteEdit(loc.getStartPosition(), loc.getLength()));\n        }\n        for (Entry<SourceLocation, String> entry : this.replacements.entrySet()) {\n            SourceLocation loc= entry.getKey();\n            String replacement= entry.getValue();\n            edits.addChild(new ReplaceEdit(loc.getStartPosition(), loc.getLength(), replacement));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Adds the edits contained in the current instance to the provided edits for the provided document.", "call_func_name": ["java.util.Set.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition", "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getLength", "org.eclipse.text.edits.DeleteEdit.<init>", "org.eclipse.text.edits.TextEdit.addChild", "java.util.Iterator.hasNext", "java.util.Map.entrySet", "org.eclipse.text.edits.ReplaceEdit.<init>"], "call_func_parameter": [[""], [""], [""], [""], ["int", "int"], ["org.eclipse.text.edits.TextEdit"], [""], [""], ["int", "int", "java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition": "Returns the start position of this source location in the source file."}, {"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getLength": "Get the length."}]}, {"index": "246", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the name of the cleanup rule suitable for displaying to the user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDescription();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns a description of the cleanup rule suitable for displaying to the user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getReason();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the motivation of the cleanup rule suitable for displaying to the user.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.getRefactorings", "methodParameterType": "CompilationUnit#", "methodParameterName": "astRoot#", "methodBody": "Refactorings getRefactorings(CompilationUnit astRoot);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns all the cleanups determined for the provided compilation unit after analysis.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.isByDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean isByDefault();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "True if the cleanup is pre-configured.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.isEnabled", "methodParameterType": "Preferences#", "methodParameterName": "preferences#", "methodBody": "boolean isEnabled(Preferences preferences);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns whether the current cleanup is enabled by the preferences.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "252", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/RefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.setRefactoringContext", "methodParameterType": "RefactoringContext#", "methodParameterName": "ctx#", "methodBody": "void setRefactoringContext(RefactoringContext ctx);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Sets the cleanup context before analysis.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "253", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.Variable", "methodParameterType": "String#String#ASTNodeFactory#", "methodParameterName": "typeName#variableName#astBuilder#", "methodBody": "public Variable(String typeName, String variableName, ASTNodeFactory astBuilder) {\n        this.typeName= typeName;\n        this.variableName= variableName;\n        this.b= astBuilder;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds a variable with its name and its type.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.Variable", "methodParameterType": "String#ASTNodeFactory#", "methodParameterName": "variableName#astBuilder#", "methodBody": "public Variable(String variableName, ASTNodeFactory astBuilder) {\n        this(null, variableName, astBuilder);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Builds a variable with its name and no type information. Calling any method dealing with the type will throw an exception.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "255", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.varName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SimpleName varName() {\n        return b.simpleName(variableName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a  {@link SimpleName} holding the name of this variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName": "Builds a new  {@link SimpleName} instance."}]}, {"index": "256", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.varNameRaw", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String varNameRaw() {\n        return variableName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the name of this variable as a string.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "257", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.type", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Type type() {\n        checkTypeDefined();\n        return b.type(typeName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a  {@link Type} holding the type of this variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Variable.checkTypeDefined", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type": "Returns a type for the provided type name (simple or qualified name)."}]}, {"index": "258", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.typeName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SimpleName typeName() {\n        checkTypeDefined();\n        return b.simpleName(typeName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a  {@link SimpleName} holding the type name of this variable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Variable.checkTypeDefined", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.simpleName": "Builds a new  {@link SimpleName} instance."}]}, {"index": "259", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.typeNameRaw", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String typeNameRaw() {\n        checkTypeDefined();\n        return typeName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the type of this variable as a string.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Variable.checkTypeDefined"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Variable.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Variable.declareStatement", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public VariableDeclarationStatement declareStatement() {\n        return b.declareStatement(type(), varName(), null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a  {@link VariableDeclarationStatement} with the name and type thisvariable.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Variable.type", "org.autorefactor.jdt.internal.corext.dom.Variable.varName", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareStatement"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.Type", "org.eclipse.jdt.core.dom.SimpleName", "org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Variable.type": "Builds a  {@link Type} holding the type of this variable."}, {"org.autorefactor.jdt.internal.corext.dom.Variable.varName": "Builds a  {@link SimpleName} holding the name of this variable."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.declareStatement": "Builds a new  {@link VariableDeclarationStatement} instance."}]}, {"index": "261", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.Refactorings", "methodParameterType": "CompilationUnit#EventLoop#SubMonitor#", "methodParameterName": "astRoot#eventLoop#monitor#", "methodBody": "public Refactorings(CompilationUnit astRoot, EventLoop eventLoop, SubMonitor monitor) {\n        this.eventLoop= eventLoop;\n        this.monitor= monitor;\n        this.rewrite= ASTRewrite.create(astRoot.getAST());\n        this.rewrite.setTargetSourceRangeComputer(new TargetSourceRangeComputer() {\n            @Override\n            public SourceRange computeSourceRange(ASTNode node) {\n                if (Boolean.TRUE.equals(node.getProperty(UNTOUCH_COMMENT))) {\n                    return new SourceRange(node.getStartPosition(), node.getLength());\n                }\n\n                return super.computeSourceRange(node);\n            }\n        });\n\n        this.importRewrite= ImportRewrite.create(astRoot, true);\n\n        this.commentRewriter= new ASTCommentRewriter(astRoot);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SuperMethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.getAST", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AST getAST() {\n        return rewrite.getAST();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AST.", "call_func_name": ["org.eclipse.jdt.core.dom.rewrite.ASTRewrite.getAST"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "263", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.hasBeenRefactored", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public boolean hasBeenRefactored(ASTNode node) {\n        return refactoredNodes.contains(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided node has been the target of a cleanup.", "call_func_name": ["java.util.Set.contains"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "264", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.createCopyTarget", "methodParameterType": "T#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public <T extends ASTNode> T createCopyTarget(T node) {\n        return (T) rewrite.createCopyTarget(node);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates and returns a placeholder node for a copy of the source code of the provided node.<br> The placeholder node can be used like any new node created via the AST class.<br> When the document is rewritten, a copy of the source code for the provided node is inserted into the output document at the position corresponding to the placeholder (indentation is adjusted).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.createCopyTarget", "methodParameterType": "T#T#", "methodParameterName": "first#last#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public <T extends ASTNode> T createCopyTarget(T first, T last) {\n        return (T) getListRewrite(first).createCopyTarget(first, last);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates and returns a placeholder node for a copy of the source code of the provided range of nodes.<br> The placeholder node can be used like any new node created via the AST class.<br> When the document is rewritten, a copy of the source code for the provided range of nodes is inserted into the output document at the position corresponding to the placeholder (indentation is adjusted).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "266", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.createMoveTarget", "methodParameterType": "T#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public <T extends ASTNode> T createMoveTarget(T node) {\n        return (T) rewrite.createMoveTarget(node);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates and returns a placeholder node where to move the source code of the provided node.<br> The placeholder node can be used like any new node created via the AST class.<br> When the document is rewritten, the source code for the provided node is inserted into the output document at the position corresponding to the placeholder (indentation is adjusted) and it is removed from the old location.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.createMoveTarget", "methodParameterType": "T#T#", "methodParameterName": "first#last#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public <T extends ASTNode> T createMoveTarget(T first, T last) {\n        return (T) getListRewrite(first).createMoveTarget(first, last);\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates and returns a placeholder node for a move of a range of nodes of the current list.<br> The placeholder node can either be inserted as new or used to replace an existing node.<br> When the document is rewritten, a copy of the source code for the given node range is inserted into the output document at the position corresponding to the placeholder (indentation is adjusted).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "268", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.isValidRange", "methodParameterType": "List<? extends ASTNode>#", "methodParameterName": "nodes#", "methodBody": "public boolean isValidRange(List<? extends ASTNode> nodes) {\n        if (nodes.isEmpty()) {\n            return true;\n        }\n        @SuppressWarnings(\"unchecked\")\n        final List<ASTNode> originalList= getListRewrite(nodes.get(0)).getOriginalList();\n        final Iterator<ASTNode> origIter= originalList.iterator();\n        while (origIter.hasNext()) {\n            ASTNode origNode= origIter.next();\n            final Iterator<? extends ASTNode> currIter= nodes.iterator();\n            while (currIter.hasNext()) {\n                ASTNode currNode= currIter.next();\n                if (origNode.equals(currNode)) {\n                    // All current nodes must be found in the original list now\n                    while (origIter.hasNext() && currIter.hasNext()) {\n                        origNode= origIter.next();\n                        currNode= currIter.next();\n                        if (!origNode.equals(currNode)) {\n                            return false;\n                        }\n                    }\n\n                    return !currIter.hasNext();\n                } // else iterate until finding the correct node\n            }\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#Block#WhileStatement#Block#WhileStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)ReturnStatement)Block)IfStatement)Block)WhileStatement)Block)WhileStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the provided nodes are a valid existing range.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.get", "org.autorefactor.jdt.internal.corext.dom.Refactorings.getListRewrite", "org.eclipse.jdt.core.dom.rewrite.ListRewrite.getOriginalList", "java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jdt.core.dom.ASTNode.equals", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], ["int"], ["org.eclipse.jdt.core.dom.ASTNode"], [""], [""], [""], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "269", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.replace", "methodParameterType": "ASTNode#ASTNode#", "methodParameterName": "node#replacement#", "methodBody": "public void replace(ASTNode node, ASTNode replacement) {\n        node.setProperty(UNTOUCH_COMMENT, Boolean.TRUE);\n        rewrite.replace(node, replacement, null);\n        addRefactoredNodes(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Replaces the provided node from the AST with the provided replacement node.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.setProperty", "org.eclipse.jdt.core.dom.rewrite.ASTRewrite.replace", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.text.edits.TextEditGroup"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "270", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.replace", "methodParameterType": "Comment#String#", "methodParameterName": "comment#replacement#", "methodBody": "public void replace(Comment comment, String replacement) {\n        hasRefactorings= true;\n        commentRewriter.replace(comment, replacement);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Replaces the provided comment with the provided text.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.replace"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Comment", "java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.replace": "Replaces the provided comment with the provided replacement text."}]}, {"index": "271", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.replace", "methodParameterType": "SourceLocation#String#", "methodParameterName": "toReplace#replacement#", "methodBody": "public void replace(SourceLocation toReplace, String replacement) {\n        hasRefactorings= true;\n        this.sourceRewriter.replace(toReplace, replacement);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Replaces the provided source location with the replacement string in the source.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.SourceRewriter.replace"], "call_func_parameter": [["org.autorefactor.jdt.internal.corext.dom.SourceLocation", "java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.SourceRewriter.replace": "Replaces the provided source location with the replacement string in the source."}]}, {"index": "272", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.remove", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public void remove(ASTNode node) {\n        if (node instanceof Comment) {\n            commentRewriter.remove((Comment) node);\n        } else {\n            rewrite.remove(node, null);\n        }\n        addRefactoredNodes(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the provided node from the AST.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.remove", "org.eclipse.jdt.core.dom.rewrite.ASTRewrite.remove", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Comment"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.text.edits.TextEditGroup"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.remove": "Removes the provided comment."}]}, {"index": "273", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.removeButKeepComment", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public void removeButKeepComment(ASTNode node) {\n        node.setProperty(UNTOUCH_COMMENT, Boolean.TRUE);\n        remove(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the provided node from the AST leaving the leading comment.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.setProperty", "org.autorefactor.jdt.internal.corext.dom.Refactorings.remove"], "call_func_parameter": [["java.lang.String", "java.lang.Object"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Refactorings.remove": "Removes the provided node from the AST."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.remove": "Removes the provided nodes from the AST."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.remove": "Removes the provided nodes from the AST."}]}, {"index": "274", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.remove", "methodParameterType": "SourceLocation#", "methodParameterName": "toRemove#", "methodBody": "public void remove(SourceLocation toRemove) {\n        if (toRemove.getLength() == 0) {\n            throw new IllegalArgumentException(\"Cannot remove an empty source range: \" + toRemove); //$NON-NLS-1$\n        }\n        hasRefactorings= true;\n        sourceRewriter.remove(toRemove);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the provided source location from the source.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.SourceLocation.getLength", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.autorefactor.jdt.internal.corext.dom.SourceRewriter.remove"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], ["org.autorefactor.jdt.internal.corext.dom.SourceLocation"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getLength": "Get the length."}, {"org.autorefactor.jdt.internal.corext.dom.SourceRewriter.remove": "Removes the provided source location from the source."}]}, {"index": "275", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.remove", "methodParameterType": "ASTNode#", "methodParameterName": "nodes#", "methodBody": "public void remove(ASTNode... nodes) {\n        remove(Arrays.asList(nodes));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Removes the provided nodes from the AST.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "276", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.remove", "methodParameterType": "Collection<? extends ASTNode>#", "methodParameterName": "nodes#", "methodBody": "public void remove(Collection<? extends ASTNode> nodes) {\n        for (ASTNode node : nodes) {\n            remove(node);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Removes the provided nodes from the AST.", "call_func_name": ["java.util.Collection.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.Refactorings.remove", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.ASTNode"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Refactorings.remove": "Removes the provided node from the AST."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.remove": "Removes the provided nodes from the AST."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.remove": "Removes the provided nodes from the AST."}]}, {"index": "277", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.hasRefactorings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasRefactorings() {\n        return hasRefactorings;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this instance has any cleanups.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.insertAt", "methodParameterType": "ASTNode#StructuralPropertyDescriptor#ASTNode#int#", "methodParameterName": "listHolder#locationInParent#nodeToInsert#index#", "methodBody": "public void insertAt(ASTNode listHolder, StructuralPropertyDescriptor locationInParent, ASTNode nodeToInsert,\n            int index) {\n        getListRewrite(listHolder, locationInParent).insertAt(nodeToInsert, index, null);\n        addRefactoredNodes(listHolder);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inserts the provided node at the specified index of the list in a node.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Refactorings.getListRewrite", "org.eclipse.jdt.core.dom.rewrite.ListRewrite.insertAt", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.StructuralPropertyDescriptor"], ["org.eclipse.jdt.core.dom.ASTNode", "int", "org.eclipse.text.edits.TextEditGroup"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "279", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.insertBefore", "methodParameterType": "ASTNode#ASTNode#", "methodParameterName": "nodeToInsert#element#", "methodBody": "public void insertBefore(ASTNode nodeToInsert, ASTNode element) {\n        getListRewrite(element).insertBefore(nodeToInsert, element, null);\n        addRefactoredNodes(element.getParent());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inserts the provided node before the provided element.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Refactorings.getListRewrite", "org.eclipse.jdt.core.dom.rewrite.ListRewrite.insertBefore", "org.eclipse.jdt.core.dom.ASTNode.getParent", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.text.edits.TextEditGroup"], [""], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.insertAfter", "methodParameterType": "ASTNode#ASTNode#", "methodParameterName": "nodeToInsert#element#", "methodBody": "public void insertAfter(ASTNode nodeToInsert, ASTNode element) {\n        getListRewrite(element).insertAfter(nodeToInsert, element, null);\n        addRefactoredNodes(element.getParent());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inserts the provided node after the provided element.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Refactorings.getListRewrite", "org.eclipse.jdt.core.dom.rewrite.ListRewrite.insertAfter", "org.eclipse.jdt.core.dom.ASTNode.getParent", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.text.edits.TextEditGroup"], [""], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.insertFirst", "methodParameterType": "ASTNode#StructuralPropertyDescriptor#ASTNode#", "methodParameterName": "listHolder#locationInParent#nodeToInsert#", "methodBody": "public void insertFirst(ASTNode listHolder, StructuralPropertyDescriptor locationInParent, ASTNode nodeToInsert) {\n        getListRewrite(listHolder, locationInParent).insertFirst(nodeToInsert, null);\n        addRefactoredNodes(listHolder);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inserts the provided node as the first element of the list in a node.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Refactorings.getListRewrite", "org.eclipse.jdt.core.dom.rewrite.ListRewrite.insertFirst", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.StructuralPropertyDescriptor"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.text.edits.TextEditGroup"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.insertLast", "methodParameterType": "ASTNode#StructuralPropertyDescriptor#ASTNode#", "methodParameterName": "listHolder#locationInParent#nodeToInsert#", "methodBody": "public void insertLast(ASTNode listHolder, StructuralPropertyDescriptor locationInParent, ASTNode nodeToInsert) {\n        getListRewrite(listHolder, locationInParent).insertLast(nodeToInsert, null);\n        addRefactoredNodes(listHolder);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Inserts the provided node as the last element of the list in a node.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Refactorings.getListRewrite", "org.eclipse.jdt.core.dom.rewrite.ListRewrite.insertLast", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.StructuralPropertyDescriptor"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.text.edits.TextEditGroup"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "283", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.moveToIndex", "methodParameterType": "ASTNode#int#ASTNode#", "methodParameterName": "oldNode#newIndex#movedNode#", "methodBody": "public void moveToIndex(ASTNode oldNode, int newIndex, ASTNode movedNode) {\n        insertAt(oldNode.getParent(), oldNode.getLocationInParent(), movedNode, newIndex);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Moves the old node to the new index in the parents' list.", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.getParent", "org.eclipse.jdt.core.dom.ASTNode.getLocationInParent", "org.autorefactor.jdt.internal.corext.dom.Refactorings.insertAt"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.StructuralPropertyDescriptor", "org.eclipse.jdt.core.dom.ASTNode", "int"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Refactorings.insertAt": "Inserts the provided node at the specified index of the list in a node."}]}, {"index": "284", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.toJavadoc", "methodParameterType": "LineComment#ASTNode#", "methodParameterName": "lineComment#nextNode#", "methodBody": "public void toJavadoc(LineComment lineComment, ASTNode nextNode) {\n        hasRefactorings= true;\n        commentRewriter.toJavadoc(lineComment, nextNode);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the provided line comment to convert to javadoc.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.toJavadoc"], "call_func_parameter": [["org.eclipse.jdt.core.dom.LineComment", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.toJavadoc": "Adds the provided line comment to convert to javadoc."}]}, {"index": "285", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.toJavadoc", "methodParameterType": "BlockComment#", "methodParameterName": "blockComment#", "methodBody": "public void toJavadoc(BlockComment blockComment) {\n        hasRefactorings= true;\n        commentRewriter.toJavadoc(blockComment);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds the provided block comment to convert to javadoc.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.toJavadoc"], "call_func_parameter": [["org.eclipse.jdt.core.dom.BlockComment"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.toJavadoc": "Converts the provided block comment into a javadoc."}]}, {"index": "286", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.set", "methodParameterType": "ASTNode#StructuralPropertyDescriptor#Object#", "methodParameterName": "node#property#value#", "methodBody": "public void set(ASTNode node, StructuralPropertyDescriptor property, Object value) {\n        rewrite.set(node, property, value, null);\n        addRefactoredNodes(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the node's property to the provided value.", "call_func_name": ["org.eclipse.jdt.core.dom.rewrite.ASTRewrite.set", "org.autorefactor.jdt.internal.corext.dom.Refactorings.addRefactoredNodes"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.StructuralPropertyDescriptor", "java.lang.Object", "org.eclipse.text.edits.TextEditGroup"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "287", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.applyTo", "methodParameterType": "IDocument#boolean#", "methodParameterName": "document#hasToSave#", "methodBody": "public void applyTo(final IDocument document, boolean hasToSave) throws BadLocationException, CoreException {\n        edits= rewrite.rewriteAST(document, null);\n        final TextEdit importEdits= importRewrite.rewriteImports(monitor);\n        commentRewriter.addEdits(document, edits);\n        sourceRewriter.addEdits(document, edits);\n\n        if (hasToSave) {\n            applyEditsToDocument(edits, importEdits, document);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Applies the accumulated cleanups to the provided document.", "call_func_name": ["org.eclipse.jdt.core.dom.rewrite.ASTRewrite.rewriteAST", "org.eclipse.jdt.core.dom.rewrite.ImportRewrite.rewriteImports", "org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.addEdits", "org.autorefactor.jdt.internal.corext.dom.SourceRewriter.addEdits", "org.autorefactor.jdt.internal.corext.dom.Refactorings.applyEditsToDocument"], "call_func_parameter": [["org.eclipse.jface.text.IDocument", "java.util.Map"], ["org.eclipse.core.runtime.IProgressMonitor"], ["org.eclipse.jface.text.IDocument", "org.eclipse.text.edits.TextEdit"], ["org.eclipse.jface.text.IDocument", "org.eclipse.text.edits.TextEdit"], ["org.eclipse.text.edits.TextEdit", "org.eclipse.text.edits.TextEdit", "org.eclipse.jface.text.IDocument"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTCommentRewriter.addEdits": "Adds the edits contained in the current instance to the provided edits for the provided document."}, {"org.autorefactor.jdt.internal.corext.dom.SourceRewriter.addEdits": "Adds the edits contained in the current instance to the provided edits for the provided document."}]}, {"index": "288", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.getImportRewrite", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ImportRewrite getImportRewrite() {\n        return importRewrite;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the ImportRewrite rewrite object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.getEdits", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public TextEdit getEdits() {\n        return edits;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the edits.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Refactorings.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Refactorings.getRewrite", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ASTRewrite getRewrite() {\n        return rewrite;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the ASTRewrite rewrite object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "291", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.JavaProjectOptionsImpl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JavaProjectOptionsImpl() {\n        this.options= new HashMap<>();\n    }", "AST": "Javadoc#Modifier#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds a new instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.JavaProjectOptionsImpl", "methodParameterType": "Map<String,String>#", "methodParameterName": "options#", "methodBody": "public JavaProjectOptionsImpl(Map<String, String> options) {\n        this.options= options;\n        this.javaSERelease= Release.javaSE(options.get(JavaCore.COMPILER_SOURCE));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds a new instance of this class with the supplied options.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "293", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.getCompilerOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, String> getCompilerOptions() {\n        final Map<String, String> options= JavaCore.getOptions();\n        final String v= javaSERelease.getMajorVersion() + \".\" + javaSERelease.getMinorVersion(); //$NON-NLS-1$\n        JavaCore.setComplianceOptions(v, options);\n        return options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the compiler options.", "call_func_name": ["org.eclipse.jdt.core.JavaCore.getOptions", "org.autorefactor.jdt.internal.corext.dom.Release.getMajorVersion", "java.lang.String.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "org.autorefactor.jdt.internal.corext.dom.Release.getMinorVersion", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.eclipse.jdt.core.JavaCore.setComplianceOptions"], "call_func_parameter": [[""], [""], ["int"], ["java.lang.String"], ["java.lang.String"], [""], ["int"], [""], ["java.lang.String", "java.util.Map"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Release.getMajorVersion": "Returns the major version of a release. For example, if the release version is \"1.3.5\", then this method will return \"1\"."}, {"org.autorefactor.jdt.internal.corext.dom.Release.getMinorVersion": "Returns the minor version of a release. For example, if the release version is \"1.3.5\", then this method will return \"3\"."}]}, {"index": "294", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.getJavaSERelease", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Release getJavaSERelease() {\n        return javaSERelease;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the JavaSE Release.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "295", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.getTabSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Integer getTabSize() {\n        return asInteger(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the tab size.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.asInteger"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "296", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.getCommentLineLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getCommentLineLength() {\n        Integer result= asInteger(DefaultCodeFormatterConstants.FORMATTER_COMMENT_LINE_LENGTH);\n        if (result == null) {\n            result= asInteger(DefaultCodeFormatterConstants.FORMATTER_LINE_SPLIT);\n        }\n\n        return result != null ? result : 80;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NumberLiteral#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the comment line length.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.asInteger", "java.lang.Integer.intValue"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "297", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.setJavaSERelease", "methodParameterType": "Release#", "methodParameterName": "javaSERelease#", "methodBody": "public void setJavaSERelease(Release javaSERelease) {\n        this.javaSERelease= javaSERelease;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the Java SE release.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "298", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptionsImpl.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.setTabSize", "methodParameterType": "int#", "methodParameterName": "tabSize#", "methodBody": "public void setTabSize(int tabSize) {\n        options.put(DefaultCodeFormatterConstants.FORMATTER_INDENTATION_SIZE, String.valueOf(tabSize));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the tabulation size.", "call_func_name": ["java.lang.String.valueOf", "java.util.Map.put"], "call_func_parameter": [["int"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "299", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.SourceLocation", "methodParameterType": "int#int#", "methodParameterName": "offset#length#", "methodBody": "public SourceLocation(int offset, int length) {\n        this.offset= offset;\n        this.length= length;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds a source location instance from an offset and a length in a source file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "300", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.SourceLocation", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public SourceLocation(ASTNode node) {\n        this(node.getStartPosition(), node.getLength());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Builds a source location instance from an  {@link ASTNode} location.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "301", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.fromPositions", "methodParameterType": "int#int#", "methodParameterName": "startPos#endPos#", "methodBody": "public static SourceLocation fromPositions(int startPos, int endPos) {\n        if (startPos > endPos) {\n            throw new IllegalArgumentException(\n                    \"start position (\" + startPos + \") should be situated before end position (\" + startPos + \")\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n        }\n\n        return new SourceLocation(startPos, endPos - startPos);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#InfixExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Factory method for a source range in a file.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.autorefactor.jdt.internal.corext.dom.SourceLocation.<init>"], "call_func_parameter": [["java.lang.String"], ["int"], ["java.lang.String"], [""], ["java.lang.String"], ["int", "int"]], "passed_comments": "/"}, {"index": "302", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.fromStartPosition", "methodParameterType": "int#", "methodParameterName": "startPosition#", "methodBody": "public static SourceLocation fromStartPosition(int startPosition) {\n        return new SourceLocation(startPosition, 0);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Factory method for a position in a source file.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.SourceLocation.<init>"], "call_func_parameter": [["int", "int"]], "passed_comments": "/"}, {"index": "303", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public static int getEndPosition(ASTNode node) {\n        return node.getStartPosition() + node.getLength();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the end position of the provided  {@link ASTNode} (start position +length).", "call_func_name": ["org.eclipse.jdt.core.dom.ASTNode.getStartPosition", "org.eclipse.jdt.core.dom.ASTNode.getLength"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "304", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getLength() {\n        return this.length;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the length.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "305", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getOffset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getOffset() {\n        return this.offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the offset.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "306", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getStartPosition() {\n        return this.offset;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the start position of this source location in the source file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "307", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getEndPosition() {\n        return this.offset + this.length;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ThisExpression#SimpleName#FieldAccess#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the end position of this source location in the source file.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "308", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.contains", "methodParameterType": "int#", "methodParameterName": "position#", "methodBody": "public boolean contains(int position) {\n        return getStartPosition() <= position && position <= getEndPosition();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Whether the provided position is inside the current source location.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition", "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition"], "call_func_parameter": [[""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition": "Returns the start position of this source location in the source file."}, {"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition": "Returns the end position of the provided  {@link ASTNode} (start position +length)."}, {"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition": "Returns the end position of this source location in the source file."}]}, {"index": "309", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.contains", "methodParameterType": "ISourceRange#", "methodParameterName": "sourceRange#", "methodBody": "public boolean contains(ISourceRange sourceRange) {\n        return getStartPosition() <= sourceRange.getOffset()\n                && sourceRange.getOffset() + sourceRange.getLength() <= getEndPosition();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#InfixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Whether the provided source range is inside the current source location.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition", "org.eclipse.jdt.core.ISourceRange.getOffset", "org.eclipse.jdt.core.ISourceRange.getLength", "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition"], "call_func_parameter": [[""], [""], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition": "Returns the start position of this source location in the source file."}, {"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition": "Returns the end position of the provided  {@link ASTNode} (start position +length)."}, {"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition": "Returns the end position of this source location in the source file."}]}, {"index": "310", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.substring", "methodParameterType": "String#", "methodParameterName": "s#", "methodBody": "public String substring(String s) {\n        return s.substring(getStartPosition(), getEndPosition());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the substring of the provided String by using the current source location.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition", "org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition", "java.lang.String.substring"], "call_func_parameter": [[""], [""], ["int", "int"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getStartPosition": "Returns the start position of this source location in the source file."}, {"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition": "Returns the end position of the provided  {@link ASTNode} (start position +length)."}, {"org.autorefactor.jdt.internal.corext.dom.SourceLocation.getEndPosition": "Returns the end position of this source location in the source file."}]}, {"index": "311", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.overlapsWith", "methodParameterType": "ISourceRange#", "methodParameterName": "sourceRange#", "methodBody": "public boolean overlapsWith(ISourceRange sourceRange) {\n        return overlapsLeft(sourceRange) || overlapsRight(sourceRange);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Whether the provided source range overlaps with the current source location.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.SourceLocation.overlapsLeft", "org.autorefactor.jdt.internal.corext.dom.SourceLocation.overlapsRight"], "call_func_parameter": [["org.eclipse.jdt.core.ISourceRange"], ["org.eclipse.jdt.core.ISourceRange"]], "passed_comments": "/"}, {"index": "312", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/SourceLocation.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.SourceLocation.compareTo", "methodParameterType": "ISourceRange#", "methodParameterName": "sourceRange#", "methodBody": "public int compareTo(ISourceRange sourceRange) {\n        final int offsetDiff= this.offset - sourceRange.getOffset();\n        if (offsetDiff != 0) {\n            return offsetDiff;\n        }\n\n        return this.length - sourceRange.getLength();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compare objects.", "call_func_name": ["org.eclipse.jdt.core.ISourceRange.getOffset", "org.eclipse.jdt.core.ISourceRange.getLength"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "313", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/AbstractRefactoringJob.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.AbstractRefactoringJob.AbstractRefactoringJob", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public AbstractRefactoringJob(String name) {\n        super(name);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Abstract super class of all refactoring jobs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "314", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptions.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions.getCompilerOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Map<String, String> getCompilerOptions();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the compiler options used to compile a java project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "315", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptions.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions.getJavaSERelease", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Release getJavaSERelease();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the java SE release in use for the current project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "316", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptions.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions.getTabSize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Integer getTabSize();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the tabulation size in use for the current project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "317", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaProjectOptions.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions.getCommentLineLength", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "int getCommentLineLength();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the comment line length in use for the current project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "318", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/FinderVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.FinderVisitor.setResult", "methodParameterType": "R#", "methodParameterName": "result#", "methodBody": "protected void setResult(R result) {\n        this.resultFound= true;\n        this.result= result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "319", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/FinderVisitor.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.FinderVisitor.findOrDefault", "methodParameterType": "ASTNode#R#", "methodParameterName": "nodeToVisit#defaultResult#", "methodBody": "public R findOrDefault(final ASTNode nodeToVisit, final R defaultResult) {\n        if (nodeToVisit != null) {\n            nodeToVisit.accept(this);\n        }\n\n        return resultFound ? result : defaultResult;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ConditionalExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Calls  {@link ASTNode#accept(ASTVisitor)} on the provided node and returns thefound result if one exists, or the default value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "320", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Release.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Release.javaSE", "methodParameterType": "String#", "methodParameterName": "version#", "methodBody": "public static Release javaSE(String version) {\n        return javaSE(toIntegerArray(version));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Factory method that builds a release instance for Java SE with the version provided as a string.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Release.toIntegerArray", "org.autorefactor.jdt.internal.corext.dom.Release.javaSE"], "call_func_parameter": [["java.lang.String"], ["int[]"]], "passed_comments": "/"}, {"index": "321", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Release.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Release.javaSE", "methodParameterType": "int#", "methodParameterName": "version#", "methodBody": "public static Release javaSE(int... version) {\n        final Release release= new Release(\"JavaSE\", version); //$NON-NLS-1$\n        if (!release.isVersionValid()) {\n            throw new IllegalArgumentException(null, \"Invalid version for \" + release); //$NON-NLS-1$\n        }\n\n        return release;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Factory method that builds a release instance for Java SE with the version provided as integer varargs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "322", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Release.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Release.isCompatibleWith", "methodParameterType": "Release#", "methodParameterName": "requiredRelease#", "methodBody": "public boolean isCompatibleWith(Release requiredRelease) {\n        if (!this.releaseName.equals(requiredRelease.releaseName)) {\n            return false;\n        }\n        final int min= Math.min(this.version.length, requiredRelease.version.length);\n        for (int i= 0; i < min; i++) {\n            final int nb= this.version[i];\n            final int requiredNb= requiredRelease.version[i];\n            if (nb < requiredNb) {\n                return false;\n            }\n            if (nb > requiredNb) {\n                return true;\n            }\n        }\n\n        return this.version.length >= requiredRelease.version.length;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#ForStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#FieldAccess#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(InfixExpression(FieldAccess(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)FieldAccess(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the current release is compatible with the required release. Newer releases are considered compatible with older releases.", "call_func_name": ["java.lang.String.equals", "java.lang.Math.min"], "call_func_parameter": [["java.lang.Object"], ["int", "int"]], "passed_comments": "/"}, {"index": "323", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Release.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Release.getMajorVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getMajorVersion() {\n        return getVersionNumber(0);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the major version of a release. For example, if the release version is \"1.3.5\", then this method will return \"1\".", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Release.getVersionNumber"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "324", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Release.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Release.getMinorVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getMinorVersion() {\n        return getVersionNumber(1);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the minor version of a release. For example, if the release version is \"1.3.5\", then this method will return \"3\".", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Release.getVersionNumber"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "325", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/Release.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.Release.getPatchVersion", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getPatchVersion() {\n        return getVersionNumber(2);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the patch version of a release. For example, if the release version is \"1.3.5\", then this method will return \"5\".", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Release.getVersionNumber"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "326", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/JavaRefactoringRule.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.JavaRefactoringRule.isJavaVersionSupported", "methodParameterType": "Release#", "methodParameterName": "javaSeRelease#", "methodBody": "boolean isJavaVersionSupported(Release javaSeRelease);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns whether the provided java version is supported by this rule.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "327", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/TypeNameDecider.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.TypeNameDecider", "methodParameterType": "ASTNode#", "methodParameterName": "parsedNode#", "methodBody": "public TypeNameDecider(final ASTNode parsedNode) {\n        this.resolveTypeBindingStrategy= new ReflectionResolveTypeBindingStrategy(parsedNode,\n                getAnyTypeBinding(parsedNode));\n        final ASTNode root= parsedNode.getRoot();\n        if (!(root instanceof CompilationUnit)) {\n            throw new IllegalArgumentException(parsedNode, \"Expected the root to be a CompilationUnit\"); //$NON-NLS-1$\n        }\n        final CompilationUnit cu= (CompilationUnit) root;\n        this.packageName= cu.getPackage().getName().getFullyQualifiedName();\n        this.importedTypes= getImportedTypes(cu);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(ParenthesizedExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)ParenthesizedExpression)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance, and extracts out of the provided node: a type binding and the types imported in the current compilation unit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "328", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/TypeNameDecider.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.TypeNameDecider", "methodParameterType": "ResolveTypeBindingStrategy#TreeSet<String>#", "methodParameterName": "resolveTypeBindingStrategy#importedTypes#", "methodBody": "public TypeNameDecider(ResolveTypeBindingStrategy resolveTypeBindingStrategy, TreeSet<String> importedTypes) {\n        this.resolveTypeBindingStrategy= resolveTypeBindingStrategy;\n        this.packageName= \"\"; //$NON-NLS-1$\n        this.importedTypes= importedTypes;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#StringLiteral#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "329", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/TypeNameDecider.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName", "methodParameterType": "String#", "methodParameterName": "fullyQualifiedName#", "methodBody": "public String useSimplestPossibleName(String fullyQualifiedName) {\n        return useSimplestPossibleName(resolveTypeBinding(fullyQualifiedName));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the simplest possible name that should be used when referring to the provided fully qualifier type name.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.resolveTypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName"], "call_func_parameter": [["java.lang.String"], ["org.eclipse.jdt.core.dom.ITypeBinding"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.resolveTypeBinding": "Resolves the type binding corresponding to the provided fully qualified name."}, {"org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName": "Returns the simplest possible name that should be used when referring to the provided type binding."}]}, {"index": "330", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/TypeNameDecider.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.resolveTypeBinding", "methodParameterType": "String#", "methodParameterName": "fullyQualifiedName#", "methodBody": "public ITypeBinding resolveTypeBinding(String fullyQualifiedName) {\n        return resolveTypeBindingStrategy.resolveTypeBinding(fullyQualifiedName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolves the type binding corresponding to the provided fully qualified name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "331", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/corext/dom/TypeNameDecider.java", "methodName": "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName", "methodParameterType": "ITypeBinding#", "methodParameterName": "typeBinding#", "methodBody": "public String useSimplestPossibleName(ITypeBinding typeBinding) {\n        final String pkgName= typeBinding.getPackage().getName();\n        if (\"java.lang\".equals(pkgName) || pkgName.equals(this.packageName)) { //$NON-NLS-1$\n            // TODO beware of name shadowing!\n            return typeBinding.getName();\n        }\n\n        final String fqn= typeBinding.getQualifiedName();\n        final String elementBefore;\n        if (importedTypes.contains(fqn)) {\n            elementBefore= fqn;\n        } else {\n            final SortedSet<String> elementsBefore= importedTypes.headSet(fqn);\n            if (elementsBefore.isEmpty()) {\n                return fqn;\n            }\n            elementBefore= elementsBefore.last();\n        }\n\n        if (elementBefore.equals(fqn)) {\n            int lastIdx= fqn.lastIndexOf('.');\n            if (lastIdx != -1) {\n                return fqn.substring(lastIdx + 1);\n            }\n        }\n\n        final String[] names= fqn.split(\"\\\\.\"); //$NON-NLS-1$\n        final String[] elementBeforeNames= elementBefore.split(\"\\\\.\"); //$NON-NLS-1$\n        if (names.length < elementBeforeNames.length || names.length - 1 > elementBeforeNames.length) {\n            return fqn;\n        }\n        int i= 0;\n        for (; i < names.length && i < elementBeforeNames.length; i++) {\n            final String name= names[i];\n            final String elementBeforeName= elementBeforeNames[i];\n            if (!name.equals(elementBeforeName)) {\n                if (\"*\".equals(elementBeforeName) && i + 1 == elementBeforeNames.length) { //$NON-NLS-1$\n                    if (i + 1 == names.length) {\n                        return name;\n                    }\n                    if (i + 2 == names.length && typeBinding.getDeclaringClass() != null) {\n                        return names[i] + \".\" + names[i + 1]; //$NON-NLS-1$\n                    }\n                }\n\n                return fqn;\n            }\n        }\n        if (i == elementBeforeNames.length && names.length == i + 1 && typeBinding.getDeclaringClass() != null) {\n            return names[i - 1] + \".\" + names[i]; //$NON-NLS-1$\n        }\n\n        return fqn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#PostfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#ArrayAccess#StringLiteral#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#InfixExpression#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#StringLiteral#SimpleName#SimpleName#ArrayAccess#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)InfixExpression)ReturnStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)ForStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(StringLiteral)StringLiteral(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the simplest possible name that should be used when referring to the provided type binding.", "call_func_name": ["org.eclipse.jdt.core.dom.ITypeBinding.getPackage", "org.eclipse.jdt.core.dom.IPackageBinding.getName", "java.lang.String.equals", "org.eclipse.jdt.core.dom.ITypeBinding.getName", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "java.util.TreeSet.contains", "java.util.TreeSet.headSet", "java.util.SortedSet.isEmpty", "java.util.SortedSet.last", "java.lang.String.lastIndexOf", "java.lang.String.substring", "java.lang.String.split", "org.eclipse.jdt.core.dom.ITypeBinding.getDeclaringClass", "java.lang.String.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.Object"], [""], [""], ["java.lang.Object"], ["java.lang.Object"], [""], [""], ["int"], ["int"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "332", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "333", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "334", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "335", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AutoBoxingRatherThanExplicitMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AutoBoxingRatherThanExplicitMethodCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AutoBoxingRatherThanExplicitMethodCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "336", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AutoBoxingRatherThanExplicitMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AutoBoxingRatherThanExplicitMethodCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AutoBoxingRatherThanExplicitMethodCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "337", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AutoBoxingRatherThanExplicitMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AutoBoxingRatherThanExplicitMethodCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AutoBoxingRatherThanExplicitMethodCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "338", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseStringContainsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseStringContainsCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseStringContainsCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "339", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseStringContainsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseStringContainsCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseStringContainsCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "340", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseStringContainsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseStringContainsCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseStringContainsCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "341", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NamedMethodRatherThanLogLevelParameterCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NamedMethodRatherThanLogLevelParameterCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NamedMethodRatherThanLogLevelParameterCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "342", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NamedMethodRatherThanLogLevelParameterCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NamedMethodRatherThanLogLevelParameterCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NamedMethodRatherThanLogLevelParameterCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "343", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NamedMethodRatherThanLogLevelParameterCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NamedMethodRatherThanLogLevelParameterCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NamedMethodRatherThanLogLevelParameterCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "344", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyStatementCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyStatementCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "345", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyStatementCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyStatementCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "346", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyStatementCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyStatementCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "347", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractUnitTestCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.getActualAndExpected", "methodParameterType": "Expression#Expression#", "methodParameterName": "leftValue#rightValue#", "methodBody": "protected abstract Pair<Expression, Expression> getActualAndExpected(final Expression leftValue,\n            final Expression rightValue);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the actual value and then the expected value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "348", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractUnitTestCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.invokeQualifiedMethod", "methodParameterType": "ASTNodeFactory#Expression#String#Expression#Expression#Expression#Expression#", "methodParameterName": "b#copyOfMethod#methodName#copyOfActual#copyOfExpected#delta#failureMessage#", "methodBody": "protected abstract MethodInvocation invokeQualifiedMethod(final ASTNodeFactory b, final Expression copyOfMethod,\n            final String methodName, final Expression copyOfActual, final Expression copyOfExpected,\n            Expression delta, final Expression failureMessage);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Invoke the method with full qualified name if needed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "349", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractUnitTestCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.resolveTypeBinding", "methodParameterType": "ImportDeclaration#", "methodParameterName": "node#", "methodBody": "protected ITypeBinding resolveTypeBinding(final ImportDeclaration node) {\n        IBinding resolveBinding= node.resolveBinding();\n\n        if (resolveBinding instanceof ITypeBinding) {\n            return (ITypeBinding) resolveBinding;\n        }\n\n        if (resolveBinding instanceof IMethodBinding) {\n            return ((IMethodBinding) resolveBinding).getDeclaringClass();\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Resolve the type binding.", "call_func_name": ["org.eclipse.jdt.core.dom.ImportDeclaration.resolveBinding", "org.eclipse.jdt.core.dom.IMethodBinding.getDeclaringClass"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "350", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractUnitTestCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.maybeRefactorStatement", "methodParameterType": "ASTNode#MethodInvocation#boolean#Expression#Expression#boolean#", "methodParameterName": "nodeToReplace#originalMethod#isAssertTrue#condition#failureMessage#isRewriteNeeded#", "methodBody": "protected boolean maybeRefactorStatement(final ASTNode nodeToReplace, final MethodInvocation originalMethod,\n            final boolean isAssertTrue, final Expression condition, final Expression failureMessage,\n            final boolean isRewriteNeeded) {\n        Expression localCondition= condition;\n        boolean localIsAssertTrue= isAssertTrue;\n        boolean localIsRewriteNeeded= isRewriteNeeded;\n        PrefixExpression localConditionPe= ASTNodes.as(localCondition, PrefixExpression.class);\n\n        while (ASTNodes.hasOperator(localConditionPe, PrefixExpression.Operator.NOT)) {\n            localIsRewriteNeeded= true;\n\n            localIsAssertTrue= !localIsAssertTrue;\n            localCondition= ASTNodes.as(localConditionPe.getOperand(), Expression.class);\n            localConditionPe= ASTNodes.as(localCondition, PrefixExpression.class);\n        }\n\n        final InfixExpression conditionIe= ASTNodes.as(localCondition, InfixExpression.class);\n        final MethodInvocation conditionMi= ASTNodes.as(localCondition, MethodInvocation.class);\n        final Object constantValue= localCondition.resolveConstantExpressionValue();\n\n        return maybeRefactorAssertTrueOrFalse(nodeToReplace, originalMethod, localIsAssertTrue, localCondition,\n                conditionIe, conditionMi, constantValue, failureMessage, localIsRewriteNeeded);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#PrefixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Maybe refactor the statement.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.eclipse.jdt.core.dom.PrefixExpression.getOperand", "org.eclipse.jdt.core.dom.Expression.resolveConstantExpressionValue", "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.maybeRefactorAssertTrueOrFalse"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.MethodInvocation", "boolean", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.InfixExpression", "org.eclipse.jdt.core.dom.MethodInvocation", "java.lang.Object", "org.eclipse.jdt.core.dom.Expression", "boolean"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided expression to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "If the provided expression collection only has one element, then that unique expression is cast to an object of the provided type if type matches."}]}, {"index": "351", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractUnitTestCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.maybeRefactorToEquality", "methodParameterType": "ASTNode#MethodInvocation#boolean#Expression#Expression#Expression#boolean#", "methodParameterName": "nodeToReplace#originalMethod#isAssertEquals#actualValue#expectedValue#failureMessage#isRewriteNeeded#", "methodBody": "protected boolean maybeRefactorToEquality(final ASTNode nodeToReplace, final MethodInvocation originalMethod,\n            final boolean isAssertEquals, final Expression actualValue, final Expression expectedValue,\n            final Expression failureMessage, final boolean isRewriteNeeded) {\n        final Refactorings r= this.ctx.getRefactorings();\n        final ASTNodeFactory b= this.ctx.getASTBuilder();\n\n        if (ASTNodes.is(actualValue, NullLiteral.class)) {\n            r.replace(nodeToReplace, invokeMethodOrStatement(nodeToReplace, b,\n                    invokeAssertNull(originalMethod, isAssertEquals, expectedValue, failureMessage)));\n            return false;\n        }\n\n        if (ASTNodes.is(expectedValue, NullLiteral.class)) {\n            r.replace(nodeToReplace, invokeMethodOrStatement(nodeToReplace, b,\n                    invokeAssertNull(originalMethod, isAssertEquals, actualValue, failureMessage)));\n            return false;\n        }\n\n        Expression copyOfExpected= b.createCopyTarget(expectedValue);\n        Expression copyOfActual= b.createCopyTarget(actualValue);\n        boolean localIsRewriteNeeded= isRewriteNeeded;\n\n        if ((ASTNodes.isHardCoded(actualValue) || isVariableNamedExpected(actualValue)) && !ASTNodes.isHardCoded(expectedValue)\n                && !isVariableNamedExpected(expectedValue)) {\n            copyOfExpected= b.createCopyTarget(actualValue);\n            copyOfActual= b.createCopyTarget(expectedValue);\n            localIsRewriteNeeded= true;\n        }\n\n        if (localIsRewriteNeeded) {\n            Expression delta= null;\n\n            if (ASTNodes.hasType(actualValue, double.class.getCanonicalName()) && ASTNodes.hasType(expectedValue, double.class.getCanonicalName())) {\n                delta= b.number(\".0\"); //$NON-NLS-1$\n            } else if (ASTNodes.hasType(actualValue, float.class.getCanonicalName()) && ASTNodes.hasType(expectedValue, float.class.getCanonicalName())) {\n                delta= b.number(\".0F\"); //$NON-NLS-1$\n            }\n\n            final MethodInvocation newAssert= invokeMethod(b, originalMethod, getAssertName(isAssertEquals, \"Equals\"), //$NON-NLS-1$\n                    copyOfActual, copyOfExpected, delta, failureMessage);\n            r.replace(nodeToReplace, invokeMethodOrStatement(nodeToReplace, b, newAssert));\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Maybe refactor the assert null or equals.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings", "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.is", "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.invokeAssertNull", "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.invokeMethodOrStatement", "org.autorefactor.jdt.internal.corext.dom.Refactorings.replace", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createCopyTarget", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.isHardCoded", "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.isVariableNamedExpected", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.number", "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.getAssertName", "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.invokeMethod"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], ["org.eclipse.jdt.core.dom.MethodInvocation", "boolean", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.ASTNode", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory", "org.eclipse.jdt.core.dom.MethodInvocation"], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.Expression"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String[]"], ["java.lang.String"], ["boolean", "java.lang.String"], ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory", "org.eclipse.jdt.core.dom.MethodInvocation", "java.lang.String", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.Expression"]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings": "Returns the  {@link Refactorings} object containing the changes that must beapplied to the AST."}, {"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder": "Returns a new  {@link ASTNodeFactory} object to use in the cleanup."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.is": "Returns whether the provided expression has the provided type."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.replace": "Replaces the provided node from the AST with the provided replacement node."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.isHardCoded": "Returns whether the provided expression is hard-coded as a literal in the byte code ignoring parentheses."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.number": "Builds a new  {@link NumberLiteral} instance."}]}, {"index": "352", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractUnitTestCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractUnitTestCleanUp.levenshteinDistance", "methodParameterType": "String#String#", "methodParameterName": "s1#s2#", "methodBody": "private static int levenshteinDistance(final String s1, final String s2) {\n        int s1Length= s1.length() + 1;\n        int s2Length= s2.length() + 1;\n\n        int[][] d= new int[s1Length][s2Length];\n        for (int i= 0; i < s1Length; i++) {\n            d[i][0]= i;\n        }\n        for (int j= 0; j < s2Length; j++) {\n            d[0][j]= j;\n        }\n\n        for (int i= 1; i < s1Length; i++) {\n            for (int j= 1; j < s2Length; j++) {\n                int cost= s1.charAt(i - 1) == s2.charAt(j - 1) ? 0 : 1;\n\n                int deleteCost= d[i - 1][j] + 1;\n                int insertCost= d[i][j - 1] + 1;\n                int substitutionCost= d[i - 1][j - 1] + cost;\n                d[i][j]= Math.min(Math.min(deleteCost, insertCost), substitutionCost);\n            }\n        }\n\n        return d[s1Length - 1][s2Length - 1];\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#Dimension#ArrayType#SimpleName#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#NumberLiteral#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#NumberLiteral#ArrayAccess#SimpleName#ArrayAccess#SimpleName#Assignment#ExpressionStatement#Block#ForStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#InfixExpression#NumberLiteral#NumberLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#ArrayAccess#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#ArrayAccess#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#Block#ForStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)ForStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)InfixExpression(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(SimpleName)SimpleName)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement)Block)ForStatement(ReturnStatement(ArrayAccess(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the levenshtein distance between the two provided strings. <p> Note: Implementation comes from wikipedia.", "call_func_name": ["java.lang.String.length", "java.lang.String.charAt", "java.lang.Math.min"], "call_func_parameter": [[""], ["int"], ["int", "int"]], "passed_comments": "/"}, {"index": "353", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashMapRatherThanHashtableCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanHashtableCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashMapRatherThanHashtableCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "354", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashMapRatherThanHashtableCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanHashtableCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashMapRatherThanHashtableCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "355", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashMapRatherThanHashtableCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanHashtableCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashMapRatherThanHashtableCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "356", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfRatherThanTwoSwitchCasesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfRatherThanTwoSwitchCasesCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfRatherThanTwoSwitchCasesCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "357", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfRatherThanTwoSwitchCasesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfRatherThanTwoSwitchCasesCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfRatherThanTwoSwitchCasesCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "358", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfRatherThanTwoSwitchCasesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfRatherThanTwoSwitchCasesCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfRatherThanTwoSwitchCasesCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "359", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IntPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IntPrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IntPrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "360", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IntPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IntPrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IntPrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "361", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IntPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IntPrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IntPrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "362", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CollectionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CollectionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CollectionCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "363", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CollectionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CollectionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CollectionCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "364", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CollectionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CollectionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CollectionCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "365", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryLocalBeforeReturnCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryLocalBeforeReturnCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnnecessaryLocalBeforeReturnCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "366", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryLocalBeforeReturnCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryLocalBeforeReturnCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnnecessaryLocalBeforeReturnCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "367", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryLocalBeforeReturnCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryLocalBeforeReturnCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnnecessaryLocalBeforeReturnCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "368", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TernaryOperatorRatherThanDuplicateConditionsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TernaryOperatorRatherThanDuplicateConditionsCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TernaryOperatorRatherThanDuplicateConditionsCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "369", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TernaryOperatorRatherThanDuplicateConditionsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TernaryOperatorRatherThanDuplicateConditionsCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TernaryOperatorRatherThanDuplicateConditionsCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "370", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TernaryOperatorRatherThanDuplicateConditionsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TernaryOperatorRatherThanDuplicateConditionsCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TernaryOperatorRatherThanDuplicateConditionsCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "371", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanConstantRatherThanValueOfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanConstantRatherThanValueOfCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanConstantRatherThanValueOfCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "372", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanConstantRatherThanValueOfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanConstantRatherThanValueOfCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanConstantRatherThanValueOfCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "373", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanConstantRatherThanValueOfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanConstantRatherThanValueOfCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanConstantRatherThanValueOfCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "374", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumMapRatherThanHashMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumMapRatherThanHashMapCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EnumMapRatherThanHashMapCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "375", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumMapRatherThanHashMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumMapRatherThanHashMapCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EnumMapRatherThanHashMapCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "376", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumMapRatherThanHashMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumMapRatherThanHashMapCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EnumMapRatherThanHashMapCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "377", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumMapRatherThanHashMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumMapRatherThanHashMapCleanUp.maybeReplace", "methodParameterType": "ClassInstanceCreation#Set<String>#Set<String>#Type#", "methodParameterName": "cic#alreadyImportedClasses#importsToAdd#types#", "methodBody": "@Override\n    boolean maybeReplace(ClassInstanceCreation cic, Set<String> alreadyImportedClasses, Set<String> importsToAdd,\n            Type... types) {\n        if (types == null || types.length < 2) {\n            return true;\n        }\n\n        Type keyType= types[0];\n        Type valueType= types[1];\n        List<Expression> arguments= ASTNodes.arguments(cic);\n\n        if (!arguments.isEmpty() && isTargetType(arguments.get(0).resolveTypeBinding())\n                && !ASTNodes.hasType(arguments.get(0).resolveTypeBinding(), EnumMap.class.getCanonicalName())) {\n            return true;\n        }\n\n        replace(cic, alreadyImportedClasses, keyType, valueType, arguments);\n        importsToAdd.add(EnumMap.class.getCanonicalName());\n        return false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Replace given class instance creation with suitable EnumMap constructor. <br> <br> Replacement is not correct if HashMap constructor accepts map <br> other than EnumMap, because it throws <code>IllegalArgumentException</code> if map is empty, <br> and HashMap(Map) does not. Therefore, for correctness reasons, it should not be refactored. <br>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "378", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumMapRatherThanHashMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumMapRatherThanHashMapCleanUp.resolveParameter", "methodParameterType": "Type#List<Expression>#", "methodParameterName": "keyType#originalArgs#", "methodBody": "private Expression resolveParameter(Type keyType, List<Expression> originalArgs) {\n        if (!originalArgs.isEmpty() && ASTNodes.instanceOf(originalArgs.get(0), EnumMap.class.getCanonicalName())) {\n            return ctx.getASTBuilder().createCopyTarget(originalArgs.get(0));\n        }\n        TypeLiteral keyTypeLiteral= keyType.getAST().newTypeLiteral();\n        keyTypeLiteral.setType(ctx.getASTBuilder().createCopyTarget(keyType));\n        return keyTypeLiteral;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Map parameter for HashMap constructor to EnumMap constructor. HashMap(Map) -> EnumMap(EnumMap) <br/> other HashMap constructors -> EnumMap(Class) <br>", "call_func_name": ["java.util.List.isEmpty", "java.util.List.get", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf", "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createCopyTarget", "org.eclipse.jdt.core.dom.Type.getAST", "org.eclipse.jdt.core.dom.AST.newTypeLiteral", "org.eclipse.jdt.core.dom.TypeLiteral.setType"], "call_func_parameter": [[""], ["int"], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String"], [""], ["org.eclipse.jdt.core.dom.ASTNode"], [""], [""], ["org.eclipse.jdt.core.dom.Type"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.instanceOf": "Returns whether the provided expression is an instance of the qualified type name."}, {"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder": "Returns a new  {@link ASTNodeFactory} object to use in the cleanup."}]}, {"index": "379", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndroidViewHolderCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndroidViewHolderCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndroidViewHolderCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "380", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndroidViewHolderCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndroidViewHolderCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndroidViewHolderCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "381", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndroidViewHolderCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndroidViewHolderCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndroidViewHolderCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "382", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoublePrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoublePrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoublePrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "383", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoublePrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoublePrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoublePrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "384", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoublePrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoublePrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoublePrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "385", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUncheckedThrowsClausesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUncheckedThrowsClausesCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUncheckedThrowsClausesCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "386", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUncheckedThrowsClausesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUncheckedThrowsClausesCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUncheckedThrowsClausesCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUncheckedThrowsClausesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUncheckedThrowsClausesCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUncheckedThrowsClausesCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUncheckedThrowsClausesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUncheckedThrowsClausesCleanUp.getUncheckedExceptions", "methodParameterType": "MethodDeclaration#", "methodParameterName": "node#", "methodBody": "private Collection<ASTNode> getUncheckedExceptions(MethodDeclaration node) {\n        List<ASTNode> result= new ArrayList<>();\n        for (Type n : ASTNodes.thrownExceptionTypes(node)) {\n            if (isUnchecked(n)) {\n                result.add(n);\n            }\n        }\n\n        return result;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns list of unchecked exception nodes in this method declaration (below JLS8 API only).", "call_func_name": ["java.util.ArrayList.<init>", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.thrownExceptionTypes", "java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.ui.fix.RemoveUncheckedThrowsClausesCleanUp.isUnchecked", "java.util.List.add", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.MethodDeclaration"], [""], [""], ["org.eclipse.jdt.core.dom.Type"], ["java.lang.Object"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.thrownExceptionTypes": "Generecized version of the equivalent JDT method."}]}, {"index": "389", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/VariableInsideIfRatherThanAboveCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.VariableInsideIfRatherThanAboveCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_VariableInsideIfRatherThanAboveCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "390", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/VariableInsideIfRatherThanAboveCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.VariableInsideIfRatherThanAboveCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_VariableInsideIfRatherThanAboveCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "391", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/VariableInsideIfRatherThanAboveCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.VariableInsideIfRatherThanAboveCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_VariableInsideIfRatherThanAboveCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BreakRatherThanPassiveIterationsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BreakRatherThanPassiveIterationsCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BreakRatherThanPassiveIterationsCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BreakRatherThanPassiveIterationsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BreakRatherThanPassiveIterationsCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BreakRatherThanPassiveIterationsCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "394", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BreakRatherThanPassiveIterationsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BreakRatherThanPassiveIterationsCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BreakRatherThanPassiveIterationsCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumSetRatherThanHashSetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumSetRatherThanHashSetCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EnumSetRatherThanHashSetCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumSetRatherThanHashSetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumSetRatherThanHashSetCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EnumSetRatherThanHashSetCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumSetRatherThanHashSetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumSetRatherThanHashSetCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EnumSetRatherThanHashSetCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "398", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EnumSetRatherThanHashSetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EnumSetRatherThanHashSetCleanUp.maybeReplace", "methodParameterType": "ClassInstanceCreation#Set<String>#Set<String>#Type#", "methodParameterName": "cic#alreadyImportedClasses#importsToAdd#types#", "methodBody": "@Override\n    boolean maybeReplace(ClassInstanceCreation cic, Set<String> alreadyImportedClasses, Set<String> importsToAdd,\n            Type... types) {\n        if (types == null || types.length < 1) {\n            return true;\n        }\n\n        Type type= types[0];\n        ASTNodeFactory b= ctx.getASTBuilder();\n        List<Expression> arguments= ASTNodes.arguments(cic);\n        final MethodInvocation invocation;\n        final Name newClassName= b.name(alreadyImportedClasses.contains(EnumSet.class.getCanonicalName()) ? EnumSet.class.getSimpleName() : EnumSet.class.getCanonicalName());\n\n        if (!arguments.isEmpty() && ASTNodes.instanceOf(arguments.get(0), Collection.class.getCanonicalName())) {\n            Expression typeArg= arguments.get(0);\n            if (!ASTNodes.instanceOf(typeArg, EnumSet.class.getCanonicalName())) {\n                return true;\n            }\n            invocation= b.invoke(newClassName, \"copyOf\", b.createCopyTarget(typeArg)); //$NON-NLS-1$\n        } else {\n            TypeLiteral newTypeLiteral= ctx.getAST().newTypeLiteral();\n            newTypeLiteral.setType(b.createCopyTarget(type));\n            invocation= b.invoke(newClassName, \"noneOf\", newTypeLiteral); //$NON-NLS-1$\n        }\n\n        ctx.getRefactorings().replace(cic, invocation);\n        importsToAdd.add(EnumSet.class.getCanonicalName());\n        return false;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#ConditionalExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Cleanup is not correct if argument for HashSet constructor is a Collection, but other than EnumSet. <br> In case of empty collection <code>EnumSet.copyOf</code> will throw an <code>IllegalArgumentException</code>, <br> and HashSet(Collection) will not. <br> <br> Other constructors can be replaced with <code>EnumSet.noneOf(Class)</code> method. <br> <br>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "399", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AddBracketsToControlStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AddBracketsToControlStatementCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AddBracketsToControlStatementCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "400", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AddBracketsToControlStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AddBracketsToControlStatementCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AddBracketsToControlStatementCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "401", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AddBracketsToControlStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AddBracketsToControlStatementCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AddBracketsToControlStatementCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "402", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseDiamondOperatorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseDiamondOperatorCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseDiamondOperatorCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "403", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseDiamondOperatorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseDiamondOperatorCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseDiamondOperatorCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "404", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseDiamondOperatorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseDiamondOperatorCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseDiamondOperatorCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "405", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseDiamondOperatorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseDiamondOperatorCleanUp.canUseDiamondOperator", "methodParameterType": "ClassInstanceCreation#Type#", "methodParameterName": "node#type#", "methodBody": "private boolean canUseDiamondOperator(ClassInstanceCreation node, final Type type) {\n        List<Expression> args= ASTNodes.arguments(node);\n        if (args.isEmpty()) {\n            return true;\n        }\n\n        ITypeBinding typeBinding= type.resolveBinding();\n        IMethodBinding ctorBinding= node.resolveConstructorBinding();\n\n        if (typeBinding == null || ctorBinding == null) {\n            return false;\n        }\n\n        List<ITypeBinding> typeArguments= new ArrayList<>(Arrays.asList(typeBinding.getTypeArguments()));\n        ITypeBinding typeDecl= typeBinding.getTypeDeclaration();\n        List<ITypeBinding> typeParameters= new ArrayList<>(Arrays.asList(typeDecl.getTypeParameters()));\n\n        IMethodBinding methodDecl= ctorBinding.getMethodDeclaration();\n        ITypeBinding[] actualCtorParamTypes= ctorBinding.getParameterTypes();\n        ITypeBinding[] declMethodParamTypes= methodDecl.getParameterTypes();\n        int limit= Math.min(declMethodParamTypes.length, args.size());\n\n        for (int i= 0; i < limit; i++) {\n            ITypeBinding declParamType= declMethodParamTypes[i];\n            ITypeBinding actualParamType= actualCtorParamTypes[i];\n            String actualParamTypeQName= actualParamType.getErasure().getQualifiedName();\n            Expression actualArg= args.get(i);\n            ITypeBinding actualArgType= ASTNodes.findImplementedType(actualArg.resolveTypeBinding(), actualParamTypeQName);\n\n            if (actualArgType != null && declParamType.isParameterizedType()) {\n                ITypeBinding[] declParamTypeArgs= declParamType.getTypeArguments();\n                ITypeBinding[] actualArgTypeArgs= actualArgType.getTypeArguments();\n\n                for (int j= 0; j < declParamTypeArgs.length; j++) {\n                    ITypeBinding declParamTypeArg= declParamTypeArgs[j];\n\n                    if (declParamTypeArg.isWildcardType() && actualArgTypeArgs.length != 0) {\n                        ITypeBinding declParamTypeArgBound= declParamTypeArg.getBound();\n                        int typeParamIndex= typeParameters.indexOf(declParamTypeArgBound);\n\n                        ITypeBinding actualArgTypeArg= actualArgTypeArgs[j];\n                        int typeArgIndex= typeArguments.indexOf(actualArgTypeArg);\n\n                        if (typeParamIndex == -1 || typeArgIndex == -1) {\n                            return false;\n                        }\n\n                        // The type parameter is matching\n                        typeParameters.remove(typeParamIndex);\n                        typeArguments.remove(typeArgIndex);\n                    }\n                }\n            }\n        }\n\n        // All the type parameters are matching\n        return typeParameters.isEmpty();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#Block#ForStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Tries to rebuild the process that leads to {@link ClassInstanceCreation#isResolvedTypeInferredFromExpectedType()}.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments", "java.util.List.isEmpty", "org.eclipse.jdt.core.dom.Type.resolveBinding", "org.eclipse.jdt.core.dom.ClassInstanceCreation.resolveConstructorBinding", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeArguments", "java.util.Arrays.asList", "java.util.ArrayList.<init>", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeDeclaration", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeParameters", "org.eclipse.jdt.core.dom.IMethodBinding.getMethodDeclaration", "org.eclipse.jdt.core.dom.IMethodBinding.getParameterTypes", "java.util.List.size", "java.lang.Math.min", "org.eclipse.jdt.core.dom.ITypeBinding.getErasure", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "java.util.List.get", "org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.findImplementedType", "org.eclipse.jdt.core.dom.ITypeBinding.isParameterizedType", "org.eclipse.jdt.core.dom.ITypeBinding.isWildcardType", "org.eclipse.jdt.core.dom.ITypeBinding.getBound", "java.util.List.indexOf", "java.util.List.remove"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ClassInstanceCreation"], [""], [""], [""], [""], ["java.lang.Object[]"], ["java.util.Collection"], [""], [""], [""], [""], [""], ["int", "int"], [""], [""], ["int"], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String"], [""], [""], [""], ["java.lang.Object"], ["int"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.findImplementedType": "Returns the type binding for the provided qualified type name if it can be found in the type hierarchy of the provided type binding."}]}, {"index": "406", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCollectionMethodRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCollectionMethodRatherThanLoopCleanUp.getExpressionToFind", "methodParameterType": "MethodInvocation#Expression#", "methodParameterName": "condition#forVar#", "methodBody": "protected abstract Expression getExpressionToFind(MethodInvocation condition, Expression forVar);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the expression to find.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCollectionMethodRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCollectionMethodRatherThanLoopCleanUp.getMethodToReplace", "methodParameterType": "Expression#", "methodParameterName": "condition#", "methodBody": "protected abstract MethodInvocation getMethodToReplace(Expression condition);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the method to replace or null otherwise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCollectionMethodRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCollectionMethodRatherThanLoopCleanUp.newMethod", "methodParameterType": "Expression#Expression#boolean#ASTNodeFactory#", "methodParameterName": "iterable#toFind#isPositive#b#", "methodBody": "protected abstract Expression newMethod(Expression iterable, Expression toFind, boolean isPositive, ASTNodeFactory b);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Generate the future method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OppositeComparisonRatherThanNegativeExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OppositeComparisonRatherThanNegativeExpressionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OppositeComparisonRatherThanNegativeExpressionCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "410", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OppositeComparisonRatherThanNegativeExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OppositeComparisonRatherThanNegativeExpressionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OppositeComparisonRatherThanNegativeExpressionCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "411", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OppositeComparisonRatherThanNegativeExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OppositeComparisonRatherThanNegativeExpressionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OppositeComparisonRatherThanNegativeExpressionCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EndOfMethodRatherThanReturnCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EndOfMethodRatherThanReturnCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EndOfMethodRatherThanReturnCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "413", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EndOfMethodRatherThanReturnCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EndOfMethodRatherThanReturnCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EndOfMethodRatherThanReturnCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "414", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EndOfMethodRatherThanReturnCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EndOfMethodRatherThanReturnCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EndOfMethodRatherThanReturnCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "415", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StandardMethodRatherThanLibraryMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StandardMethodRatherThanLibraryMethodCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StandardMethodRatherThanLibraryMethodCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "416", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StandardMethodRatherThanLibraryMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StandardMethodRatherThanLibraryMethodCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StandardMethodRatherThanLibraryMethodCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "417", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StandardMethodRatherThanLibraryMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StandardMethodRatherThanLibraryMethodCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StandardMethodRatherThanLibraryMethodCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "418", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SingleDeclarationsRatherThanMultiDeclarationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SingleDeclarationsRatherThanMultiDeclarationCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SingleDeclarationsRatherThanMultiDeclarationCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "419", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SingleDeclarationsRatherThanMultiDeclarationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SingleDeclarationsRatherThanMultiDeclarationCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SingleDeclarationsRatherThanMultiDeclarationCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "420", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SingleDeclarationsRatherThanMultiDeclarationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SingleDeclarationsRatherThanMultiDeclarationCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SingleDeclarationsRatherThanMultiDeclarationCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "421", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UnboxingRatherThanExplicitMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UnboxingRatherThanExplicitMethodCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UnboxingRatherThanExplicitMethodCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "422", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UnboxingRatherThanExplicitMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UnboxingRatherThanExplicitMethodCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UnboxingRatherThanExplicitMethodCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "423", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UnboxingRatherThanExplicitMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UnboxingRatherThanExplicitMethodCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UnboxingRatherThanExplicitMethodCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "424", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/XORRatherThanDuplicateConditionsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.XORRatherThanDuplicateConditionsCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_XORRatherThanDuplicateConditionsCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "425", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/XORRatherThanDuplicateConditionsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.XORRatherThanDuplicateConditionsCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_XORRatherThanDuplicateConditionsCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "426", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/XORRatherThanDuplicateConditionsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.XORRatherThanDuplicateConditionsCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_XORRatherThanDuplicateConditionsCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "427", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoubleCompareRatherThanEqualityCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoubleCompareRatherThanEqualityCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoubleCompareRatherThanEqualityCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "428", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoubleCompareRatherThanEqualityCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoubleCompareRatherThanEqualityCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoubleCompareRatherThanEqualityCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "429", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoubleCompareRatherThanEqualityCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoubleCompareRatherThanEqualityCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoubleCompareRatherThanEqualityCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "430", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndConditionRatherThanEmbededIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndConditionRatherThanEmbededIfCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndConditionRatherThanEmbededIfCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "431", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndConditionRatherThanEmbededIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndConditionRatherThanEmbededIfCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndConditionRatherThanEmbededIfCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "432", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndConditionRatherThanEmbededIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndConditionRatherThanEmbededIfCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndConditionRatherThanEmbededIfCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "433", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveSemiColonCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveSemiColonCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveSemiColonCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "434", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveSemiColonCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveSemiColonCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveSemiColonCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "435", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveSemiColonCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveSemiColonCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveSemiColonCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "436", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LazyLogicalRatherThanEagerCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LazyLogicalRatherThanEagerCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LazyLogicalRatherThanEagerCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "437", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LazyLogicalRatherThanEagerCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LazyLogicalRatherThanEagerCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LazyLogicalRatherThanEagerCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "438", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LazyLogicalRatherThanEagerCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LazyLogicalRatherThanEagerCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LazyLogicalRatherThanEagerCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "439", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderMethodRatherThanReassignationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderMethodRatherThanReassignationCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderMethodRatherThanReassignationCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "440", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderMethodRatherThanReassignationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderMethodRatherThanReassignationCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderMethodRatherThanReassignationCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "441", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderMethodRatherThanReassignationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderMethodRatherThanReassignationCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderMethodRatherThanReassignationCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "442", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NoAssignmentInIfConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NoAssignmentInIfConditionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NoAssignmentInIfConditionCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "443", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NoAssignmentInIfConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NoAssignmentInIfConditionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NoAssignmentInIfConditionCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "444", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NoAssignmentInIfConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NoAssignmentInIfConditionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NoAssignmentInIfConditionCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "445", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashMapRatherThanTreeMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanTreeMapCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashMapRatherThanTreeMapCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "446", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashMapRatherThanTreeMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanTreeMapCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashMapRatherThanTreeMapCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "447", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashMapRatherThanTreeMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanTreeMapCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashMapRatherThanTreeMapCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "448", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringRatherThanNewStringCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringRatherThanNewStringCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringRatherThanNewStringCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "449", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringRatherThanNewStringCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringRatherThanNewStringCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringRatherThanNewStringCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "450", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringRatherThanNewStringCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringRatherThanNewStringCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringRatherThanNewStringCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "451", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LiteralRatherThanBooleanConstantCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LiteralRatherThanBooleanConstantCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LiteralRatherThanBooleanConstantCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "452", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LiteralRatherThanBooleanConstantCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LiteralRatherThanBooleanConstantCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LiteralRatherThanBooleanConstantCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "453", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LiteralRatherThanBooleanConstantCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LiteralRatherThanBooleanConstantCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LiteralRatherThanBooleanConstantCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "454", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SetRatherThanListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SetRatherThanListCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SetRatherThanListCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "455", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SetRatherThanListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SetRatherThanListCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SetRatherThanListCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "456", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SetRatherThanListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SetRatherThanListCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SetRatherThanListCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "457", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractEnumCollectionReplacementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractEnumCollectionReplacementCleanUp.typeArgs", "methodParameterType": "Type#", "methodParameterName": "parameterizedType#", "methodBody": "List<Type> typeArgs(final Type parameterizedType) {\n        return ASTNodes.typeArguments((ParameterizedType) parameterizedType);\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Just one more wrapper to extract type arguments, <br> to avoid boilerplate casting and shorten method name.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ParameterizedType"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments": "Generecized version of the equivalent JDT method."}]}, {"index": "458", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanPrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanPrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "459", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanPrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanPrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "460", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanPrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanPrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "461", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericListRatherThanRawListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericListRatherThanRawListCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_GenericListRatherThanRawListCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "462", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericListRatherThanRawListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericListRatherThanRawListCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_GenericListRatherThanRawListCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "463", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericListRatherThanRawListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericListRatherThanRawListCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_GenericListRatherThanRawListCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "464", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericListRatherThanRawListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericListRatherThanRawListCleanUp.substituteType", "methodParameterType": "ASTNodeFactory#Type#ASTNode#Set<String>#Set<String>#", "methodParameterName": "b#origType#originalExpression#classesToUseWithImport#importsToAdd#", "methodBody": "@Override\n    protected Type substituteType(final ASTNodeFactory b, final Type origType, final ASTNode originalExpression,\n            final Set<String> classesToUseWithImport, final Set<String> importsToAdd) {\n        if (origType.isParameterizedType()) {\n            return null;\n        }\n\n        final TypeNameDecider typeNameDecider= new TypeNameDecider(originalExpression);\n\n        final ParameterizedType parameterizedType= b.getAST().newParameterizedType(b.createCopyTarget(origType));\n        ASTNodes.typeArguments(parameterizedType).clear();\n        ASTNodes.typeArguments(parameterizedType).add(b.toType(elementType, typeNameDecider));\n        return parameterizedType;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the substitute type.", "call_func_name": ["org.eclipse.jdt.core.dom.Type.isParameterizedType", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.<init>", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.getAST", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createCopyTarget", "org.eclipse.jdt.core.dom.AST.newParameterizedType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments", "java.util.List.clear", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType", "java.util.List.add"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ASTNode"], [""], ["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.Type"], ["org.eclipse.jdt.core.dom.ParameterizedType"], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"], ["java.lang.Object"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.getAST": "Returns the  {@link AST}."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType": "Converts a type binding into a type."}]}, {"index": "465", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HotSpotIntrinsicedAPIsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HotSpotIntrinsicedAPIsCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HotSpotIntrinsicedAPIsCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "466", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HotSpotIntrinsicedAPIsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HotSpotIntrinsicedAPIsCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HotSpotIntrinsicedAPIsCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "467", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HotSpotIntrinsicedAPIsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HotSpotIntrinsicedAPIsCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HotSpotIntrinsicedAPIsCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "468", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateConstructorRatherThanGWTMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateConstructorRatherThanGWTMethodCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AggregateConstructorRatherThanGWTMethodCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "469", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateConstructorRatherThanGWTMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateConstructorRatherThanGWTMethodCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AggregateConstructorRatherThanGWTMethodCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "470", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateConstructorRatherThanGWTMethodCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateConstructorRatherThanGWTMethodCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AggregateConstructorRatherThanGWTMethodCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "471", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MapCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MapCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "472", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MapCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MapCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "473", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MapCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MapCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "474", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BigNumberCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BigNumberCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BigNumberCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "475", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BigNumberCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BigNumberCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BigNumberCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "476", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BigNumberCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BigNumberCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BigNumberCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "477", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/PushNegationDownCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.PushNegationDownCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_PushNegationDownCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "478", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/PushNegationDownCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.PushNegationDownCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_PushNegationDownCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "479", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/PushNegationDownCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.PushNegationDownCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_PushNegationDownCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "480", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CharPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CharPrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CharPrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "481", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CharPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CharPrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CharPrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "482", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CharPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CharPrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CharPrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "483", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringValueOfRatherThanConcatCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringValueOfRatherThanConcatCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringValueOfRatherThanConcatCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "484", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringValueOfRatherThanConcatCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringValueOfRatherThanConcatCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringValueOfRatherThanConcatCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "485", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringValueOfRatherThanConcatCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringValueOfRatherThanConcatCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringValueOfRatherThanConcatCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "486", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AllCleanUpRules.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getConfiguredRefactoringRules", "methodParameterType": "Preferences#", "methodParameterName": "preferences#", "methodBody": "public static List<RefactoringRule> getConfiguredRefactoringRules(final Preferences preferences) {\n        final List<RefactoringRule> refactorings= getAllCleanUpRules();\n\n        for (final Iterator<RefactoringRule> iter= refactorings.iterator(); iter.hasNext();) {\n            final RefactoringRule refactoring= iter.next();\n\n            if (!refactoring.isEnabled(preferences)) {\n                iter.remove();\n            }\n        }\n\n        return refactorings;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cleanup rules which have been enabled from the Eclipse preferences.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getAllCleanUpRules", "java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.isEnabled", "java.util.Iterator.remove", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], [""], ["org.autorefactor.preferences.Preferences"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getAllCleanUpRules": "Returns all the available cleanup rules."}, {"org.autorefactor.jdt.internal.corext.dom.RefactoringRule.isEnabled": "Returns whether the current cleanup is enabled by the preferences."}]}, {"index": "487", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AllCleanUpRules.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getAllCleanUpRules", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static List<RefactoringRule> getAllCleanUpRules() {\n        return newArrayList(new AddBracketsToControlStatementCleanUp(),\n                new RemoveSemiColonCleanUp(), new RemoveUnnecessaryLocalBeforeReturnCleanUp(), new RedundantModifiersCleanUp(),\n                new RemoveUnnecessaryCastCleanUp(), new PushNegationDownCleanUp(),\n                new SimpleNameRatherThanQualifiedNameCleanUp(), new SimplifyExpressionCleanUp(),\n                // The previous cleanups should run first as they make the code more standard and avoid weird code\n                new LocalVariableRatherThanFieldCleanUp(),\n                new IntPrimitiveRatherThanWrapperCleanUp(), new ShortPrimitiveRatherThanWrapperCleanUp(),\n                new LongPrimitiveRatherThanWrapperCleanUp(), new DoublePrimitiveRatherThanWrapperCleanUp(),\n                new FloatPrimitiveRatherThanWrapperCleanUp(), new CharPrimitiveRatherThanWrapperCleanUp(),\n                new BytePrimitiveRatherThanWrapperCleanUp(), new AssignRatherThanFilterThenAssignAnywayCleanUp(),\n                new AssignRatherThanTernaryFilterThenAssignAnywayCleanUp(),\n                new VectorOldToNewAPICleanUp(), new PrimitiveWrapperCreationCleanUp(),\n                new AutoBoxingRatherThanExplicitMethodCleanUp(), new UnboxingRatherThanExplicitMethodCleanUp(),\n                new BracketsRatherThanArrayInstantiationCleanUp(), new LambdaExpressionRatherThanComparatorCleanUp(),\n                new LambdaCleanUp(), new LiteralRatherThanBooleanConstantCleanUp(), new BooleanCleanUp(),\n                new BooleanPrimitiveRatherThanWrapperCleanUp(), new LazyLogicalRatherThanEagerCleanUp(),\n                new BooleanConstantRatherThanValueOfCleanUp(), new BooleanEqualsRatherThanNullCheckCleanUp(),\n                new XORRatherThanDuplicateConditionsCleanUp(), new ORConditionRatherThanRedundantClausesCleanUp(),\n                new TernaryOperatorRatherThanDuplicateConditionsCleanUp(),\n                // Must come after BooleanRefactoring, which may remove some targets\n                new InvertEqualsCleanUp(), new ComparisonCleanUp(),\n                new DoubleCompareRatherThanEqualityCleanUp(), new RemoveUnneededThisExpressionCleanUp(),\n                new AggregateConstructorRatherThanGWTMethodCleanUp(),\n                new StandardMethodRatherThanLibraryMethodCleanUp(), new StringRatherThanNewStringCleanUp(),\n                new StringCleanUp(), new StringValueOfRatherThanConcatCleanUp(), new BigNumberCleanUp(),\n                new OppositeComparisonRatherThanNegativeExpressionCleanUp(),\n                new RemoveEmptyIfCleanUp(),\n                new NoLoopIterationRatherThanEmptyCheckCleanUp(),\n                new InlineCodeRatherThanPeremptoryConditionCleanUp(),\n                new RemoveUselessBlockCleanUp(), new RemoveEmptyStatementCleanUp(),\n                new SingleDeclarationsRatherThanMultiDeclarationCleanUp(), new EndOfMethodRatherThanReturnCleanUp(),\n                new DoWhileRatherThanWhileCleanUp(), new DoWhileRatherThanDuplicateCodeCleanUp(),\n                new IfRatherThanWhileAndFallsThroughCleanUp(), new SuperCallRatherThanUselessOverridingCleanUp(),\n                new AndConditionRatherThanEmbededIfCleanUp(), new CommonCodeInIfElseStatementCleanUp(),\n                new OppositeConditionRatherThanDuplicateConditionCleanUp(),\n                new OneConditionRatherThanUnreachableBlockCleanUp(), new MergeConditionalBlocksCleanUp(),\n                new OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp(),\n                new OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp(),\n                new ElseRatherThanOppositeConditionCleanUp(), new GenericMapRatherThanRawMapCleanUp(),\n                new GenericListRatherThanRawListCleanUp(), new UseDiamondOperatorCleanUp(), new UseMultiCatchCleanUp(),\n                new ContainsRatherThanLoopCleanUp(), new ContainsAllRatherThanLoopCleanUp(), new CollectionCleanUp(), new AddAllRatherThanLoopCleanUp(),\n                new FillRatherThanLoopCleanUp(),\n                new ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp(), new BreakRatherThanPassiveIterationsCleanUp(),\n                new UpdateSetRatherThanTestingFirstCleanUp(), new IsEmptyRatherThanSizeCleanUp(), new MapCleanUp(),\n                new EntrySetRatherThanKeySetAndValueSearchCleanUp(), new MethodOnMapRatherThanMethodOnKeySetCleanUp(),\n                new NoAssignmentInIfConditionCleanUp(), new DeclarationOutsideLoopRatherThanInsideCleanUp(),\n                new IfElseIfCleanUp(), new CommonIfInIfElseCleanUp(),\n                new StringBuilderCleanUp(), new StringBuilderMethodRatherThanReassignationCleanUp(),\n                new StringBuilderRatherThanStringBufferCleanUp(), new HashMapRatherThanHashtableCleanUp(),\n                new ArrayListRatherThanVectorCleanUp(), new ArrayDequeRatherThanStackCleanUp(),\n                new SetRatherThanMapCleanUp(), new ArrayListRatherThanLinkedListCleanUp(),\n                new SetRatherThanListCleanUp(), new HashMapRatherThanTreeMapCleanUp(),\n                new HashSetRatherThanTreeSetCleanUp(), new UseStringContainsCleanUp(), new CommentsCleanUp(),\n                new RemoveFieldsDefaultValuesCleanUp(), new StaticConstantRatherThanInstanceConstantCleanUp(),\n                new RemoveOverriddenAssignmentCleanUp(), new Java7HashRatherThanEclipseJava6HashCleanUp(),\n                new HotSpotIntrinsicedAPIsCleanUp(), new AnnotationCleanUp(), new TryWithResourceCleanUp(),\n                // FIXME it would be nice if it was only enabled when testng jar is detected for\n                // the project\n                new TestNGAssertCleanUp(), new JUnitAssertCleanUp(), new RemoveEmptyLinesCleanUp(),\n                new RemoveEmptySuperConstrInvocationCleanUp(),\n                new ImplicitDefaultConstructorRatherThanWrittenOneCleanUp(), new AndroidWakeLockCleanUp(),\n                new AndroidViewHolderCleanUp(), new LogParametersRatherThanLogMessageCleanUp(),\n                new NamedMethodRatherThanLogLevelParameterCleanUp(), new EnumMapRatherThanHashMapCleanUp(),\n                new EnumSetRatherThanHashSetCleanUp(), new RemoveUncheckedThrowsClausesCleanUp(),\n                new UppercaseNumberSuffixRatherThanLowercaseCleanUp(), new SwitchCleanUp(), new IfRatherThanTwoSwitchCasesCleanUp(),\n                new VariableInsideIfRatherThanAboveCleanUp(),\n\n                // Those cleanups should end the list because some other cleanups are prioritary\n                new ReduceIndentationCleanUp());\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns all the available cleanup rules.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.AddBracketsToControlStatementCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveSemiColonCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryLocalBeforeReturnCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RedundantModifiersCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryCastCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.PushNegationDownCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.SimpleNameRatherThanQualifiedNameCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.SimplifyExpressionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.LocalVariableRatherThanFieldCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.IntPrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ShortPrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.LongPrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.DoublePrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.FloatPrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.CharPrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BytePrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanFilterThenAssignAnywayCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanTernaryFilterThenAssignAnywayCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.VectorOldToNewAPICleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.PrimitiveWrapperCreationCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AutoBoxingRatherThanExplicitMethodCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.UnboxingRatherThanExplicitMethodCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BracketsRatherThanArrayInstantiationCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.LambdaExpressionRatherThanComparatorCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.LambdaCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.LiteralRatherThanBooleanConstantCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BooleanCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BooleanPrimitiveRatherThanWrapperCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.LazyLogicalRatherThanEagerCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BooleanConstantRatherThanValueOfCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BooleanEqualsRatherThanNullCheckCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.XORRatherThanDuplicateConditionsCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ORConditionRatherThanRedundantClausesCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.TernaryOperatorRatherThanDuplicateConditionsCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.InvertEqualsCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ComparisonCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.DoubleCompareRatherThanEqualityCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveUnneededThisExpressionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AggregateConstructorRatherThanGWTMethodCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StandardMethodRatherThanLibraryMethodCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StringRatherThanNewStringCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StringCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StringValueOfRatherThanConcatCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BigNumberCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.OppositeComparisonRatherThanNegativeExpressionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyIfCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.NoLoopIterationRatherThanEmptyCheckCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.InlineCodeRatherThanPeremptoryConditionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveUselessBlockCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyStatementCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.SingleDeclarationsRatherThanMultiDeclarationCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.EndOfMethodRatherThanReturnCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanWhileCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanDuplicateCodeCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.IfRatherThanWhileAndFallsThroughCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.SuperCallRatherThanUselessOverridingCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AndConditionRatherThanEmbededIfCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.CommonCodeInIfElseStatementCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.OppositeConditionRatherThanDuplicateConditionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.OneConditionRatherThanUnreachableBlockCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.MergeConditionalBlocksCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.OneIfRatherThanDuplicateBlocksThatFallThroughCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ElseRatherThanOppositeConditionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.GenericMapRatherThanRawMapCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.GenericListRatherThanRawListCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.UseDiamondOperatorCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.UseMultiCatchCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ContainsRatherThanLoopCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ContainsAllRatherThanLoopCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.CollectionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AddAllRatherThanLoopCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.FillRatherThanLoopCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.BreakRatherThanPassiveIterationsCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.UpdateSetRatherThanTestingFirstCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.IsEmptyRatherThanSizeCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.MapCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.MethodOnMapRatherThanMethodOnKeySetCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.NoAssignmentInIfConditionCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.DeclarationOutsideLoopRatherThanInsideCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.IfElseIfCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.CommonIfInIfElseCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StringBuilderMethodRatherThanReassignationCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StringBuilderRatherThanStringBufferCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanHashtableCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanVectorCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ArrayDequeRatherThanStackCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.SetRatherThanMapCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanLinkedListCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.SetRatherThanListCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.HashMapRatherThanTreeMapCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.HashSetRatherThanTreeSetCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.UseStringContainsCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.CommentsCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveFieldsDefaultValuesCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.StaticConstantRatherThanInstanceConstantCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveOverriddenAssignmentCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.Java7HashRatherThanEclipseJava6HashCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.HotSpotIntrinsicedAPIsCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AnnotationCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.TryWithResourceCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.TestNGAssertCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.JUnitAssertCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyLinesCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveEmptySuperConstrInvocationCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ImplicitDefaultConstructorRatherThanWrittenOneCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AndroidWakeLockCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AndroidViewHolderCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.LogParametersRatherThanLogMessageCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.NamedMethodRatherThanLogLevelParameterCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.EnumMapRatherThanHashMapCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.EnumSetRatherThanHashSetCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.RemoveUncheckedThrowsClausesCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.UppercaseNumberSuffixRatherThanLowercaseCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.SwitchCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.IfRatherThanTwoSwitchCasesCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.VariableInsideIfRatherThanAboveCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.ReduceIndentationCleanUp.<init>", "org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.newArrayList"], "call_func_parameterorg.autorefactor.jdt.internal.corext.dom.RefactoringRule[]"]], "passed_comments": "/"}, {"index": "488", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/InvertEqualsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.InvertEqualsCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_InvertEqualsCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "489", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/InvertEqualsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.InvertEqualsCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_InvertEqualsCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "490", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/InvertEqualsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.InvertEqualsCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_InvertEqualsCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "491", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IsEmptyRatherThanSizeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IsEmptyRatherThanSizeCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IsEmptyRatherThanSizeCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "492", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IsEmptyRatherThanSizeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IsEmptyRatherThanSizeCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IsEmptyRatherThanSizeCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "493", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IsEmptyRatherThanSizeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IsEmptyRatherThanSizeCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IsEmptyRatherThanSizeCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "494", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveOverriddenAssignmentCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveOverriddenAssignmentCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveOverriddenAssignmentCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "495", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveOverriddenAssignmentCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveOverriddenAssignmentCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveOverriddenAssignmentCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "496", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveOverriddenAssignmentCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveOverriddenAssignmentCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveOverriddenAssignmentCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "497", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.AggregateASTVisitor", "methodParameterType": "List<RefactoringRule>#", "methodParameterName": "visitors#", "methodBody": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) // $NON-NLS-2$\n    public AggregateASTVisitor(List<RefactoringRule> visitors) {\n        this.visitors= (List) visitors;\n        analyzeVisitors();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#CastExpression#Assignment#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "498", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        throw new UnsupportedOperationException();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "499", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        throw new UnsupportedOperationException();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "500", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        throw new UnsupportedOperationException();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": ["java.lang.UnsupportedOperationException.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "501", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.isEnabled", "methodParameterType": "Preferences#", "methodParameterName": "preferences#", "methodBody": "public boolean isEnabled(Preferences preferences) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if the visitor is enabled.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "502", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.isJavaVersionSupported", "methodParameterType": "Release#", "methodParameterName": "javaSeRelease#", "methodBody": "public boolean isJavaVersionSupported(Release javaSeRelease) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if this Java version is supported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "503", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.setRefactoringContext", "methodParameterType": "RefactoringContext#", "methodParameterName": "ctx#", "methodBody": "@SuppressWarnings({ \"rawtypes\", \"unchecked\" }) // $NON-NLS-2$\n    public void setRefactoringContext(RefactoringContext ctx) {\n        this.ctx= ctx;\n        for (RefactoringRule v : (List<RefactoringRule>) (List) visitors) {\n            v.setRefactoringContext(ctx);\n        }\n        this.visitorsContributingRefactoring.clear();\n    }", "AST": "Javadoc#SimpleName#StringLiteral#StringLiteral#ArrayInitializer#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#CastExpression#CastExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(ArrayInitializer(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ArrayInitializer)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)CastExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the cleanup context.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.corext.dom.RefactoringRule.setRefactoringContext", "java.util.Iterator.hasNext", "java.util.Set.clear"], "call_func_parameter": [[""], [""], ["org.autorefactor.jdt.internal.ui.fix.RefactoringContext"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.RefactoringRule.setRefactoringContext": "Sets the cleanup context before analysis."}]}, {"index": "504", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getRefactorings", "methodParameterType": "CompilationUnit#", "methodParameterName": "astRoot#", "methodBody": "public Refactorings getRefactorings(CompilationUnit astRoot) {\n        astRoot.accept(this);\n        return this.ctx.getRefactorings();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the cleanups.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings"], "call_func_parameter": [[""]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings": "Returns the  {@link Refactorings} object containing the changes that must beapplied to the AST."}]}, {"index": "505", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getRefactorings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Refactorings getRefactorings() {\n        return this.ctx.getRefactorings();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the cleanups.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "506", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.getVisitorsContributingRefactoring", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<ASTVisitor> getVisitorsContributingRefactoring() {\n        return visitorsContributingRefactoring;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the visitors that contributed cleanups in the last run.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "507", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.continueVisiting", "methodParameterType": "boolean#ASTVisitor#ASTNode#", "methodParameterName": "continueVisiting#v#node#", "methodBody": "private boolean continueVisiting(boolean continueVisiting, ASTVisitor v, ASTNode node) {\n        if (!continueVisiting) {\n            if (!this.ctx.getRefactorings().hasRefactorings()) {\n                logBadlyBehavedVisitor(v, node);\n            } else {\n                visitorsContributingRefactoring.add(v);\n            }\n            // Changes will be made to this node.\n            // no other visitors can make any more changes to it\n            // => do not let other visitors visit this node\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Verify whether the following visitors can visit the current node.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings", "org.autorefactor.jdt.internal.corext.dom.Refactorings.hasRefactorings", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.logBadlyBehavedVisitor", "java.util.Set.add"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.ASTVisitor", "org.eclipse.jdt.core.dom.ASTNode"], ["java.lang.Object"]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings": "Returns the  {@link Refactorings} object containing the changes that must beapplied to the AST."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.hasRefactorings": "Returns whether this instance has any cleanups."}]}, {"index": "508", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.main", "methodParameterType": "String[]#", "methodParameterName": "args#", "methodBody": "public static void main(String[] args) {\n        final Method[] mm= ASTVisitor.class.getDeclaredMethods();\n        Arrays.sort(mm, new Comparator<Method>() {\n            /**\n             * Compare objects.\n             *\n             * @param o1 First item\n             * @param o2 Second item\n             *\n             * @return -1, 0 or 1\n             */\n            public int compare(Method o1, Method o2) {\n                return o1.getName().compareTo(o2.getName());\n            }\n        });\n        for (Method m : mm) {\n            System.out.println(\"@Override\"); //$NON-NLS-1$\n            System.out.print(\"public \" + m.getReturnType() + \" \"); //$NON-NLS-1$ //$NON-NLS-2$\n            System.out.print(m.getName() + \"(\"); //$NON-NLS-1$\n            Class<?>[] paramTypes= m.getParameterTypes();\n            for (int i= 0; i < paramTypes.length; i++) {\n                Class<?> paramType= paramTypes[i];\n                if (i > 0) {\n                    System.out.print(\", \"); //$NON-NLS-1$\n                }\n                System.out.print(paramType.getSimpleName() + \" node\"); //$NON-NLS-1$\n            }\n            System.out.println(\") {\"); //$NON-NLS-1$\n            final boolean isVisit= isVisit(m);\n            final boolean isEndVisit= isEndVisit(m);\n            final boolean isPrevisit2= is(\"preVisit2\", m); //$NON-NLS-1$\n            if (isVisit || isEndVisit) {\n                System.out.print(\"\\tfinal List<ASTVisitor> visitorList = getVisitors(\"); //$NON-NLS-1$\n                System.out.print((isVisit ? \"visitorsMap\" : \"endVisitorsMap\") + \", \"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n                System.out.println(m.getParameterTypes()[0].getSimpleName() + \".class);\"); //$NON-NLS-1$\n            }\n            System.out.print(\"\\tfor (Iterator<ASTVisitor> iter = \"); //$NON-NLS-1$\n            if (is(\"preVisit\", m)) { //$NON-NLS-1$\n                System.out.print(\"preVisitors\"); //$NON-NLS-1$\n            } else if (isPrevisit2) {\n                System.out.print(\"preVisitors2\"); //$NON-NLS-1$\n            } else if (is(\"postVisit\", m)) { //$NON-NLS-1$\n                System.out.print(\"postVisitors\"); //$NON-NLS-1$\n            } else if (isVisit || isEndVisit) {\n                System.out.print(\"visitorList\"); //$NON-NLS-1$\n            } else {\n                throw new NotImplementedException(null, \"for method \" + m); //$NON-NLS-1$\n            }\n            System.out.println(\".iterator(); iter.hasNext();) {\"); //$NON-NLS-1$\n            System.out.println(\"\\t\\tfinal ASTVisitor v = iter.next();\"); //$NON-NLS-1$\n            System.out.println(\"\\t\\ttry {\"); //$NON-NLS-1$\n            if (isPrevisit2) {\n                System.out.println(\"\\t\\t\\tif (!v.\" + m.getName() + \"(node)) {\"); //$NON-NLS-1$ //$NON-NLS-2$\n                System.out.println(\"\\t\\t\\t\\treturn DO_NOT_VISIT_SUBTREE;\"); //$NON-NLS-1$\n                System.out.println(\"\\t\\t\\t}\"); //$NON-NLS-1$\n            } else if (Boolean.TYPE.equals(m.getReturnType())) {\n                System.out.println(\"\\t\\t\\tif (isJavaVersionSupported(v)\"); //$NON-NLS-1$\n                System.out.println(\"\\t\\t\\t\\t\\t&& !continueVisiting(v.\" + m.getName() + \"(node), v, node)) {\"); //$NON-NLS-1$ //$NON-NLS-2$\n                System.out.println(\"\\t\\t\\t\\treturn DO_NOT_VISIT_SUBTREE;\"); //$NON-NLS-1$\n                System.out.println(\"\\t\\t\\t}\"); //$NON-NLS-1$\n            } else {\n                System.out.println(\"\\t\\t\\tv.\" + m.getName() + \"(node);\"); //$NON-NLS-1$ //$NON-NLS-2$\n            }\n            System.out.println(\"\\t\\t} catch (Exception e) {\"); //$NON-NLS-1$\n            System.out.println(\"\\t\\t\\tlogFaultyVisitor(v, node, e);\"); //$NON-NLS-1$\n            System.out.println(\"\\t\\t\\titer.remove();\"); //$NON-NLS-1$\n            System.out.println(\"\\t\\t}\"); //$NON-NLS-1$\n            System.out.println(\"\\t}\"); //$NON-NLS-1$\n            if (Boolean.TYPE.equals(m.getReturnType())) {\n                System.out.println(\"\\treturn VISIT_SUBTREE;\"); //$NON-NLS-1$\n            }\n            System.out.println(\"}\"); //$NON-NLS-1$\n            System.out.println();\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#WildcardType#ParameterizedType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#ForStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#PrimitiveType#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#ParenthesizedExpression#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#NullLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)ForStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(MethodInvocation(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Generates the code for all the ASTVisitor methods that delegate to the underlying visitors.", "call_func_name": ["java.lang.Class.getDeclaredMethods", "java.util.Arrays.sort", "java.io.PrintStream.println", "java.lang.StringBuilder.<init>", "java.lang.reflect.Method.getReturnType", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.PrintStream.print", "java.lang.reflect.Method.getName", "java.lang.String.valueOf", "java.lang.reflect.Method.getParameterTypes", "java.lang.Class.getSimpleName", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.isVisit", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.isEndVisit", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.is", "org.autorefactor.util.NotImplementedException.<init>", "java.lang.Object.equals", "java.io.PrintStream.println"], "call_func_parameter": [[""], ["java.lang.Object[]", "java.util.Comparator"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.Object"], [""], [""], ["java.lang.reflect.Method"], ["java.lang.reflect.Method"], ["java.lang.String", "java.lang.reflect.Method"], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], ["java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "509", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AggregateASTVisitor.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.isByDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isByDefault() {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if it is the visitor by default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "510", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCleanUpRule.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCleanUpRule.isByDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isByDefault() {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if it is the visitor by default.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "511", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCleanUpRule.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCleanUpRule.isEnabled", "methodParameterType": "Preferences#", "methodParameterName": "preferences#", "methodBody": "public boolean isEnabled(Preferences preferences) {\n        return preferences.isEnabled(getClass());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if the visitor is enabled.", "call_func_name": ["java.lang.Object.getClass", "org.autorefactor.preferences.Preferences.isEnabled"], "call_func_parameter": [[""], ["java.lang.Class"]], "passed_comments": [{"org.autorefactor.preferences.Preferences.isEnabled": "Returns whether this cleanup rule is on."}]}, {"index": "512", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCleanUpRule.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCleanUpRule.isJavaVersionSupported", "methodParameterType": "Release#", "methodParameterName": "javaSeRelease#", "methodBody": "public boolean isJavaVersionSupported(Release javaSeRelease) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if this Java version is supported.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "513", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCleanUpRule.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCleanUpRule.setRefactoringContext", "methodParameterType": "RefactoringContext#", "methodParameterName": "ctx#", "methodBody": "public void setRefactoringContext(RefactoringContext ctx) {\n        this.ctx= ctx;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the cleanup context.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "514", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractCleanUpRule.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractCleanUpRule.getRefactorings", "methodParameterType": "CompilationUnit#", "methodParameterName": "astRoot#", "methodBody": "public Refactorings getRefactorings(CompilationUnit astRoot) {\n        astRoot.accept(this);\n        return ctx.getRefactorings();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the cleanups.", "call_func_name": ["org.eclipse.jdt.core.dom.CompilationUnit.accept", "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTVisitor"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings": "Returns the  {@link Refactorings} object containing the changes that must beapplied to the AST."}]}, {"index": "515", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoWhileRatherThanDuplicateCodeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanDuplicateCodeCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "516", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoWhileRatherThanDuplicateCodeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanDuplicateCodeCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "517", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoWhileRatherThanDuplicateCodeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanDuplicateCodeCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "518", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyIfCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyIfCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "519", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyIfCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyIfCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "520", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyIfCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyIfCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "521", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryCastCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryCastCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnnecessaryCastCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "522", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryCastCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryCastCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnnecessaryCastCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "523", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryCastCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryCastCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnnecessaryCastCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "524", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryCastCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryCastCleanUp.isNotRefactored", "methodParameterType": "Expression#", "methodParameterName": "leftOperand#", "methodBody": "private boolean isNotRefactored(Expression leftOperand) {\n        return preVisit2(leftOperand);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If left operand is refactored, we cannot easily make inferences about right operand. Wait for next iteration.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryCastCleanUp.preVisit2"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "525", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnnecessaryCastCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnnecessaryCastCleanUp.isConstantExpressionAssignmentConversion", "methodParameterType": "CastExpression#", "methodParameterName": "node#", "methodBody": "private boolean isConstantExpressionAssignmentConversion(CastExpression node) {\n        final Object value= node.getExpression().resolveConstantExpressionValue();\n        if (value instanceof Integer) {\n            final int val= (Integer) value;\n            return ASTNodes.hasType(node, byte.class.getSimpleName()) && Byte.MIN_VALUE <= val && val <= Byte.MAX_VALUE\n                    || ASTNodes.hasType(node, short.class.getSimpleName()) && Short.MIN_VALUE <= val && val <= Short.MAX_VALUE\n                    || ASTNodes.hasType(node, char.class.getSimpleName()) && 0 <= val && val <= 65535;\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#PrimitiveType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#NumberLiteral#SimpleName#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)InfixExpression)InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(PrimitiveType)PrimitiveType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@see JLS, section 5.2 Assignment Conversion", "call_func_name": ["org.eclipse.jdt.core.dom.CastExpression.getExpression", "org.eclipse.jdt.core.dom.Expression.resolveConstantExpressionValue", "java.lang.Integer.intValue", "java.lang.Class.getSimpleName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType"], "call_func_parameter": [[""], [""], [""], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String[]"]], "passed_comments": "/"}, {"index": "526", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimplifyExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimplifyExpressionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SimplifyExpressionCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "527", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimplifyExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimplifyExpressionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SimplifyExpressionCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "528", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimplifyExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimplifyExpressionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SimplifyExpressionCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "529", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimplifyExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimplifyExpressionCleanUp.isInnerExprHardToRead", "methodParameterType": "Expression#ASTNode#", "methodParameterName": "innerExpression#parent#", "methodBody": "private boolean isInnerExprHardToRead(final Expression innerExpression, final ASTNode parent) {\n        if (parent instanceof InfixExpression) {\n            if (innerExpression instanceof InfixExpression) {\n                final InfixExpression innerIe= (InfixExpression) innerExpression;\n                final InfixExpression.Operator innerOp= innerIe.getOperator();\n                final InfixExpression.Operator parentOp= ((InfixExpression) parent).getOperator();\n                return ASTNodes.hasOperator((InfixExpression) parent, InfixExpression.Operator.EQUALS) || shouldHaveParentheses(innerOp, parentOp)\n                        || ASTNodes.is(innerIe.getLeftOperand(), Assignment.class)\n                        || ASTNodes.is(innerIe.getRightOperand(), Assignment.class);\n            }\n        } else if (parent instanceof ConditionalExpression) {\n            return innerExpression instanceof ConditionalExpression || innerExpression instanceof Assignment\n                    || innerExpression instanceof InstanceofExpression || innerExpression instanceof InfixExpression;\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#InfixExpression#ReturnStatement#Block#IfStatement#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ReturnStatement(InfixExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression)InfixExpression)ReturnStatement)Block)IfStatement)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the supplied expression is complex enough to read.", "call_func_name": ["org.eclipse.jdt.core.dom.InfixExpression.getOperator", "org.eclipse.jdt.core.dom.InfixExpression.getLeftOperand", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.is", "org.eclipse.jdt.core.dom.InfixExpression.getRightOperand"], "call_func_parameter": [[""], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.Class"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.is": "Returns whether the provided expression has the provided type."}]}, {"index": "530", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimplifyExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimplifyExpressionCleanUp.isNullCheckRedundant", "methodParameterType": "Expression#Expression#", "methodParameterName": "e#nullCheckedExpression#", "methodBody": "private boolean isNullCheckRedundant(Expression e, Expression nullCheckedExpression) {\n        if (nullCheckedExpression != null) {\n            if (e instanceof InstanceofExpression) {\n                final Expression expression= ((InstanceofExpression) e).getLeftOperand();\n                return expression.subtreeMatch(ASTSemanticMatcher.INSTANCE, nullCheckedExpression);\n            }\n            if (e instanceof MethodInvocation) {\n                final MethodInvocation expression= (MethodInvocation) e;\n                if (expression.getExpression() != null && expression.getExpression().resolveConstantExpressionValue() != null\n                        && ASTNodes.arguments(expression).size() == 1\n                        && ASTNodes.arguments(expression).get(0).subtreeMatch(ASTSemanticMatcher.INSTANCE, nullCheckedExpression)) {\n                    // Did we invoke java.lang.Object.equals() or\n                    // java.lang.String.equalsIgnoreCase()?\n                    return ASTNodes.usesGivenSignature(expression, Object.class.getCanonicalName(), \"equals\", Object.class.getCanonicalName()) //$NON-NLS-1$\n                            || ASTNodes.usesGivenSignature(expression, String.class.getCanonicalName(), \"equalsIgnoreCase\", String.class.getCanonicalName()); //$NON-NLS-1$\n                }\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The previous null check is redundant if: <ul> <li>the null checked expression is reused in an instanceof expression</li> <li>the null checked expression is reused in an expression checking for object equality against an expression that resolves to a non null constant</li> </ul>", "call_func_name": ["org.eclipse.jdt.core.dom.InstanceofExpression.getLeftOperand", "org.eclipse.jdt.core.dom.Expression.subtreeMatch", "org.eclipse.jdt.core.dom.MethodInvocation.getExpression", "org.eclipse.jdt.core.dom.Expression.resolveConstantExpressionValue", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments", "java.util.List.size", "java.util.List.get", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.usesGivenSignature"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ASTMatcher", "java.lang.Object"], [""], [""], ["org.eclipse.jdt.core.dom.MethodInvocation"], [""], ["int"], [""], ["org.eclipse.jdt.core.dom.MethodInvocation", "java.lang.String", "java.lang.String", "java.lang.String[]"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.arguments": "Generecized version of the equivalent JDT method."}]}, {"index": "531", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderRatherThanStringBufferCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderRatherThanStringBufferCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderRatherThanStringBufferCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "532", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderRatherThanStringBufferCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderRatherThanStringBufferCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderRatherThanStringBufferCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "533", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderRatherThanStringBufferCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderRatherThanStringBufferCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderRatherThanStringBufferCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "534", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TryWithResourceCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TryWithResourceCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TryWithResourceCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "535", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TryWithResourceCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TryWithResourceCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TryWithResourceCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "536", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TryWithResourceCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TryWithResourceCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TryWithResourceCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "537", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayListRatherThanVectorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanVectorCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayListRatherThanVectorCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "538", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayListRatherThanVectorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanVectorCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayListRatherThanVectorCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "539", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayListRatherThanVectorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanVectorCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayListRatherThanVectorCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "540", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MethodOnMapRatherThanMethodOnKeySetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MethodOnMapRatherThanMethodOnKeySetCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MethodOnMapRatherThanMethodOnKeySetCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "541", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MethodOnMapRatherThanMethodOnKeySetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MethodOnMapRatherThanMethodOnKeySetCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MethodOnMapRatherThanMethodOnKeySetCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "542", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MethodOnMapRatherThanMethodOnKeySetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MethodOnMapRatherThanMethodOnKeySetCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MethodOnMapRatherThanMethodOnKeySetCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "543", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LocalVariableRatherThanFieldCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LocalVariableRatherThanFieldCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LocalVariableRatherThanFieldCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "544", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LocalVariableRatherThanFieldCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LocalVariableRatherThanFieldCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LocalVariableRatherThanFieldCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "545", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LocalVariableRatherThanFieldCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LocalVariableRatherThanFieldCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LocalVariableRatherThanFieldCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "546", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "547", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "548", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ObjectsEqualsRatherThanEqualsAndNullCheckCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "549", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ReduceIndentationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ReduceIndentationCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ReduceIndentationCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "550", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ReduceIndentationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ReduceIndentationCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ReduceIndentationCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "551", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ReduceIndentationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ReduceIndentationCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ReduceIndentationCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "552", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnneededThisExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnneededThisExpressionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnneededThisExpressionCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "553", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnneededThisExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnneededThisExpressionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnneededThisExpressionCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "554", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUnneededThisExpressionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUnneededThisExpressionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUnneededThisExpressionCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "555", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoWhileRatherThanWhileCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanWhileCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "556", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoWhileRatherThanWhileCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanWhileCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "557", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DoWhileRatherThanWhileCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DoWhileRatherThanWhileCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DoWhileRatherThanWhileCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "558", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "559", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "560", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "561", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommentsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommentsCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommentsCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "562", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommentsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommentsCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommentsCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "563", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommentsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommentsCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommentsCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "564", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommentsCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommentsCleanUp.anyTagNotEmpty", "methodParameterType": "List<TagElement>#boolean#", "methodParameterName": "tags#throwIfUnknown#", "methodBody": "private boolean anyTagNotEmpty(List<TagElement> tags, boolean throwIfUnknown) {\n        if (tags.isEmpty()) {\n            return false;\n        }\n        for (TagElement tag : tags) {\n            if (isNotEmpty(tag, throwIfUnknown)) {\n                return true;\n            }\n        }\n\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A tag is considered empty when it does not provide any useful information beyond what is already in the code.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.ui.fix.CommentsCleanUp.isNotEmpty", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], [""], ["org.eclipse.jdt.core.dom.TagElement", "boolean"], [""]], "passed_comments": "/"}, {"index": "565", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AssignRatherThanFilterThenAssignAnywayCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanFilterThenAssignAnywayCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AssignRatherThanFilterThenAssignAnywayCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "566", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AssignRatherThanFilterThenAssignAnywayCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanFilterThenAssignAnywayCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AssignRatherThanFilterThenAssignAnywayCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "567", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AssignRatherThanFilterThenAssignAnywayCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanFilterThenAssignAnywayCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AssignRatherThanFilterThenAssignAnywayCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "568", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getWrapperFullyQualifiedName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getWrapperFullyQualifiedName();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the wrapper fully qualified name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "569", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getPrimitiveTypeName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract String getPrimitiveTypeName();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the primitive type name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "570", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getLiteralClass", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract Class<? extends Expression> getLiteralClass();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the literal class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "571", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getPrefixInSafeOperators", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<PrefixExpression.Operator> getPrefixInSafeOperators() {\n        return new ArrayList<>(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the prefix in safe operators.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "572", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getInfixInSafeOperators", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<InfixExpression.Operator> getInfixInSafeOperators() {\n        return new ArrayList<>(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the Infix In Safe Operators.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "573", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getPostfixInSafeOperators", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<PostfixExpression.Operator> getPostfixInSafeOperators() {\n        return new ArrayList<>(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the postfix in safe operators.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "574", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getPrefixOutSafeOperators", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<PrefixExpression.Operator> getPrefixOutSafeOperators() {\n        return new ArrayList<>(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the prefix out safe operators.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "575", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getInfixOutSafeOperators", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<InfixExpression.Operator> getInfixOutSafeOperators() {\n        return new ArrayList<>(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the infix out safe operators.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "576", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getPostfixOutSafeOperators", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<PostfixExpression.Operator> getPostfixOutSafeOperators() {\n        return new ArrayList<>(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the postfix out safe operators.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "577", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getAssignmentOutSafeOperators", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<Assignment.Operator> getAssignmentOutSafeOperators() {\n        return new ArrayList<>(0);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the assignment out safe operators.", "call_func_name": ["java.util.ArrayList.<init>"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "578", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.getSafeInConstants", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String[] getSafeInConstants() {\n        return new String[0];\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the safe in constants.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "579", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractPrimitiveRatherThanWrapperCleanUp.isSpecificPrimitiveAllowed", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public boolean isSpecificPrimitiveAllowed(final ASTNode node) {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if the specific primitive is allowed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "580", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayDequeRatherThanStackCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayDequeRatherThanStackCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayDequeRatherThanStackCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "581", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayDequeRatherThanStackCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayDequeRatherThanStackCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayDequeRatherThanStackCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "582", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayDequeRatherThanStackCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayDequeRatherThanStackCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayDequeRatherThanStackCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "583", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayListRatherThanLinkedListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanLinkedListCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayListRatherThanLinkedListCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "584", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayListRatherThanLinkedListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanLinkedListCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayListRatherThanLinkedListCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "585", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ArrayListRatherThanLinkedListCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ArrayListRatherThanLinkedListCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ArrayListRatherThanLinkedListCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "586", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UpdateSetRatherThanTestingFirstCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UpdateSetRatherThanTestingFirstCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UpdateSetRatherThanTestingFirstCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "587", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UpdateSetRatherThanTestingFirstCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UpdateSetRatherThanTestingFirstCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UpdateSetRatherThanTestingFirstCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "588", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UpdateSetRatherThanTestingFirstCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UpdateSetRatherThanTestingFirstCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UpdateSetRatherThanTestingFirstCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "589", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ForeachCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ForeachCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return \"Foreach\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "590", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ForeachCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ForeachCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return \"\" + \"Replaces \\\"while\\\"/\\\"for with iterator\\\"/\\\"for with index loops\\\" into foreach loops\" //$NON-NLS-1$ //$NON-NLS-2$\n                + \" (applicable to arrays or Iterable).\" //$NON-NLS-1$\n                + \"Replaces Map.keySet() iteration with calls to Map.get()} into iterations over Map.entrySet().\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "591", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ForeachCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ForeachCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return \"It reduces code to focus attention on code that matters.\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "592", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ORConditionRatherThanRedundantClausesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ORConditionRatherThanRedundantClausesCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ORConditionRatherThanRedundantClausesCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "593", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ORConditionRatherThanRedundantClausesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ORConditionRatherThanRedundantClausesCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ORConditionRatherThanRedundantClausesCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "594", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ORConditionRatherThanRedundantClausesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ORConditionRatherThanRedundantClausesCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ORConditionRatherThanRedundantClausesCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "595", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseMultiCatchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseMultiCatchCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseMultiCatchCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "596", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseMultiCatchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseMultiCatchCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseMultiCatchCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "597", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UseMultiCatchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UseMultiCatchCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UseMultiCatchCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "598", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "599", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "600", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "601", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanCleanUp.areOppositeBooleanValues", "methodParameterType": "Expression#Expression#", "methodParameterName": "expr1#expr2#", "methodBody": "private static boolean areOppositeBooleanValues(Expression expr1, Expression expr2) {\n        final Boolean b1= ASTNodes.getBooleanLiteral(expr1);\n        final Boolean b2= ASTNodes.getBooleanLiteral(expr2);\n        return b1 != null && b2 != null && !b1.equals(b2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compares mixed boolean literal and Boolean object values against each other.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.ASTNodes.getBooleanLiteral", "java.lang.Boolean.equals"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression"], ["java.lang.Object"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.getBooleanLiteral": "Returns the  {@link Boolean} object value represented by the providedexpression."}]}, {"index": "602", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/InlineCodeRatherThanPeremptoryConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.InlineCodeRatherThanPeremptoryConditionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_InlineCodeRatherThanPeremptoryConditionCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "603", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/InlineCodeRatherThanPeremptoryConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.InlineCodeRatherThanPeremptoryConditionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_InlineCodeRatherThanPeremptoryConditionCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "604", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/InlineCodeRatherThanPeremptoryConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.InlineCodeRatherThanPeremptoryConditionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_InlineCodeRatherThanPeremptoryConditionCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "605", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ComparisonCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ComparisonCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ComparisonCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "606", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ComparisonCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ComparisonCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ComparisonCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "607", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ComparisonCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ComparisonCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ComparisonCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "608", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BytePrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BytePrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BytePrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "609", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BytePrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BytePrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BytePrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "610", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BytePrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BytePrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BytePrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "611", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveStupidIdiomaticPatternCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveStupidIdiomaticPatternCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return \"Try statement then return\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "612", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveStupidIdiomaticPatternCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveStupidIdiomaticPatternCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return \"Refactors to a proper use of try statements and return statements.\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "613", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveStupidIdiomaticPatternCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveStupidIdiomaticPatternCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return \"It reduces code to focus attention on code that matters.\" //$NON-NLS-1$\n                + \" It also improves the time and space performance.\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "614", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUselessBlockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUselessBlockCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUselessBlockCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "615", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUselessBlockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUselessBlockCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUselessBlockCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "616", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveUselessBlockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveUselessBlockCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveUselessBlockCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "617", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UppercaseNumberSuffixRatherThanLowercaseCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UppercaseNumberSuffixRatherThanLowercaseCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UppercaseNumberSuffixRatherThanLowercaseCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "618", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UppercaseNumberSuffixRatherThanLowercaseCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UppercaseNumberSuffixRatherThanLowercaseCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UppercaseNumberSuffixRatherThanLowercaseCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "619", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/UppercaseNumberSuffixRatherThanLowercaseCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.UppercaseNumberSuffixRatherThanLowercaseCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_UppercaseNumberSuffixRatherThanLowercaseCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "620", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveFieldsDefaultValuesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveFieldsDefaultValuesCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveFieldsDefaultValuesCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "621", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveFieldsDefaultValuesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveFieldsDefaultValuesCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveFieldsDefaultValuesCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "622", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveFieldsDefaultValuesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveFieldsDefaultValuesCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveFieldsDefaultValuesCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "623", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommonCodeInIfElseStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommonCodeInIfElseStatementCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommonCodeInIfElseStatementCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "624", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommonCodeInIfElseStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommonCodeInIfElseStatementCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommonCodeInIfElseStatementCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "625", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommonCodeInIfElseStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommonCodeInIfElseStatementCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommonCodeInIfElseStatementCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "626", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommonCodeInIfElseStatementCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommonCodeInIfElseStatementCleanUp.collectAllCases", "methodParameterType": "List<List<Statement>>#IfStatement#List<ASTNode>#", "methodParameterName": "allCasesStatements#node#allCases#", "methodBody": "private boolean collectAllCases(List<List<Statement>> allCasesStatements, IfStatement node, List<ASTNode> allCases) {\n        final List<Statement> thenStatements= ASTNodes.asList(node.getThenStatement());\n        final List<Statement> elseStatements= ASTNodes.asList(node.getElseStatement());\n\n        if (thenStatements.isEmpty() || elseStatements.isEmpty()) {\n            // If the then or else clause is empty, then there is no common code whatsoever.\n            // let other cleanups take care of removing empty blocks.\n            return false;\n        }\n\n        allCases.add(node);\n        allCasesStatements.add(thenStatements);\n\n        if (elseStatements.size() == 1) {\n            final IfStatement is= ASTNodes.as(elseStatements.get(0), IfStatement.class);\n            if (is != null) {\n                return collectAllCases(allCasesStatements, is, allCases);\n            }\n        }\n\n        allCases.add(node.getElseStatement());\n        allCasesStatements.add(elseStatements);\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Collects all cases (if/else, if/else if/else, etc.) and returns whether all are covered.", "call_func_name": ["org.eclipse.jdt.core.dom.IfStatement.getThenStatement", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.asList", "org.eclipse.jdt.core.dom.IfStatement.getElseStatement", "java.util.List.isEmpty", "java.util.List.add", "java.util.List.size", "java.util.List.get", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.as", "org.autorefactor.jdt.internal.ui.fix.CommonCodeInIfElseStatementCleanUp.collectAllCases"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.Statement"], [""], [""], ["java.lang.Object"], [""], ["int"], ["org.eclipse.jdt.core.dom.Statement", "java.lang.Class"], ["java.util.List", "org.eclipse.jdt.core.dom.IfStatement", "java.util.List"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.asList": "Returns the provided statement as a non null list of statements: <ul> <li>if the statement is null, then an empty list is returned</li> <li>if the statement is a  {@link Block}, then its children are returned</li> <li>otherwise, the current node is returned wrapped in a list</li> </ul>"}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.as": "Casts the provided statement to an object of the provided type if type matches."}, {"org.autorefactor.jdt.internal.ui.fix.CommonCodeInIfElseStatementCleanUp.collectAllCases": "Collects all cases (if/else, if/else if/else, etc.) and returns whether all are covered."}]}, {"index": "627", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SwitchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SwitchCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SwitchCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "628", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SwitchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SwitchCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SwitchCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "629", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SwitchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SwitchCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SwitchCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "630", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SwitchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SwitchCleanUp.filterDuplicateCaseValues", "methodParameterType": "List<SwitchCaseSection>#", "methodParameterName": "sourceCases#", "methodBody": "private List<SwitchCaseSection> filterDuplicateCaseValues(final List<SwitchCaseSection> sourceCases) {\n        final List<SwitchCaseSection> results= new ArrayList<>();\n        final Set<Object> alreadyProccessedValues= new HashSet<>();\n\n        for (SwitchCaseSection sourceCase : sourceCases) {\n            final List<Expression> filteredExprs= new ArrayList<>();\n\n            for (Expression expression : sourceCase.constantExprs) {\n                final Object constantValue= expression.resolveConstantExpressionValue();\n\n                if (constantValue == null) {\n                    throw new NotImplementedException(expression, \"Cannot handle non constant expressions\"); //$NON-NLS-1$\n                }\n\n                if (alreadyProccessedValues.add(constantValue)) {\n                    // This is a new value (never seen before)\n                    filteredExprs.add(expression);\n                }\n            }\n\n            if (!filteredExprs.isEmpty()) {\n                results.add(new SwitchCaseSection(filteredExprs, sourceCase.statements));\n            }\n        }\n\n        return results;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Side-effect: removes the dead branches in a chain of if-elseif.", "call_func_name": ["java.util.ArrayList.<init>", "java.util.HashSet.<init>", "java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jdt.core.dom.Expression.resolveConstantExpressionValue", "org.autorefactor.util.NotImplementedException.<init>", "java.util.Set.add", "java.util.List.add", "java.util.Iterator.hasNext", "java.util.List.isEmpty"], "call_func_parameter": [[""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], ["java.lang.Object"], ["java.lang.Object"], [""], [""]], "passed_comments": "/"}, {"index": "631", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndroidWakeLockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndroidWakeLockCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndroidWakeLockCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "632", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndroidWakeLockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndroidWakeLockCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndroidWakeLockCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "633", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AndroidWakeLockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AndroidWakeLockCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AndroidWakeLockCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "634", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RedundantModifiersCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RedundantModifiersCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RedundantModifiersCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "635", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RedundantModifiersCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RedundantModifiersCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RedundantModifiersCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "636", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RedundantModifiersCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RedundantModifiersCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RedundantModifiersCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "637", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/Java7HashRatherThanEclipseJava6HashCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.Java7HashRatherThanEclipseJava6HashCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_Java7HashRatherThanEclipseJava6HashCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "638", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/Java7HashRatherThanEclipseJava6HashCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.Java7HashRatherThanEclipseJava6HashCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_Java7HashRatherThanEclipseJava6HashCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "639", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/Java7HashRatherThanEclipseJava6HashCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.Java7HashRatherThanEclipseJava6HashCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_Java7HashRatherThanEclipseJava6HashCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "640", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NoLoopIterationRatherThanEmptyCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NoLoopIterationRatherThanEmptyCheckCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NoLoopIterationRatherThanEmptyCheckCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "641", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NoLoopIterationRatherThanEmptyCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NoLoopIterationRatherThanEmptyCheckCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NoLoopIterationRatherThanEmptyCheckCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "642", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NoLoopIterationRatherThanEmptyCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NoLoopIterationRatherThanEmptyCheckCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_NoLoopIterationRatherThanEmptyCheckCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "643", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MergeConditionalBlocksCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MergeConditionalBlocksCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MergeConditionalBlocksCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "644", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MergeConditionalBlocksCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MergeConditionalBlocksCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MergeConditionalBlocksCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "645", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/MergeConditionalBlocksCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.MergeConditionalBlocksCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_MergeConditionalBlocksCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "646", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/PrimitiveWrapperCreationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.PrimitiveWrapperCreationCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_PrimitiveWrapperCreationCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "647", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/PrimitiveWrapperCreationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.PrimitiveWrapperCreationCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_PrimitiveWrapperCreationCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "648", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/PrimitiveWrapperCreationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.PrimitiveWrapperCreationCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_PrimitiveWrapperCreationCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "649", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyLinesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyLinesCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyLinesCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "650", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyLinesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyLinesCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyLinesCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "651", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptyLinesCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptyLinesCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptyLinesCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "652", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LambdaCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LambdaCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LambdaCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "653", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LambdaCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LambdaCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LambdaCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "654", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LambdaCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LambdaCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LambdaCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "655", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericMapRatherThanRawMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericMapRatherThanRawMapCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_GenericMapRatherThanRawMapCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "656", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericMapRatherThanRawMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericMapRatherThanRawMapCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_GenericMapRatherThanRawMapCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "657", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericMapRatherThanRawMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericMapRatherThanRawMapCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_GenericMapRatherThanRawMapCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "658", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/GenericMapRatherThanRawMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.GenericMapRatherThanRawMapCleanUp.substituteType", "methodParameterType": "ASTNodeFactory#Type#ASTNode#Set<String>#Set<String>#", "methodParameterName": "b#origType#originalExpression#classesToUseWithImport#importsToAdd#", "methodBody": "@Override\n    protected Type substituteType(final ASTNodeFactory b, final Type origType, final ASTNode originalExpression,\n            final Set<String> classesToUseWithImport, final Set<String> importsToAdd) {\n        if (origType.isParameterizedType()) {\n            return null;\n        }\n\n        final TypeNameDecider typeNameDecider= new TypeNameDecider(originalExpression);\n\n        final ParameterizedType parameterizedType= b.getAST().newParameterizedType(b.createCopyTarget(origType));\n        final List<Type> typeArgs= ASTNodes.typeArguments(parameterizedType);\n        typeArgs.clear();\n        typeArgs.add(b.toType(keyType, typeNameDecider));\n        typeArgs.add(b.toType(valueType, typeNameDecider));\n\n        return parameterizedType;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the substitute type.", "call_func_name": ["org.eclipse.jdt.core.dom.Type.isParameterizedType", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.<init>", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.getAST", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createCopyTarget", "org.eclipse.jdt.core.dom.AST.newParameterizedType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments", "java.util.List.clear", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType", "java.util.List.add"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ASTNode"], [""], ["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.Type"], ["org.eclipse.jdt.core.dom.ParameterizedType"], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"], ["java.lang.Object"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.getAST": "Returns the  {@link AST}."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodes.typeArguments": "Generecized version of the equivalent JDT method."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType": "Converts a type binding into a type."}]}, {"index": "659", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ReduceVariableScopeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ReduceVariableScopeCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return \"Reduce scope of variable\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "660", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ReduceVariableScopeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ReduceVariableScopeCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return \"Reduces the scope of local variables.\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "661", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ReduceVariableScopeCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ReduceVariableScopeCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return \"It reduces the reading and debugging cost.\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "662", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SetRatherThanMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SetRatherThanMapCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SetRatherThanMapCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "663", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SetRatherThanMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SetRatherThanMapCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SetRatherThanMapCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "664", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SetRatherThanMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SetRatherThanMapCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SetRatherThanMapCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "665", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SetRatherThanMapCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SetRatherThanMapCleanUp.substituteType", "methodParameterType": "ASTNodeFactory#Type#ASTNode#Set<String>#Set<String>#", "methodParameterName": "b#origType#originalExpression#classesToUseWithImport#importsToAdd#", "methodBody": "@Override\n    protected Type substituteType(final ASTNodeFactory b, final Type origType, final ASTNode originalExpression,\n            final Set<String> classesToUseWithImport, final Set<String> importsToAdd) {\n        final ITypeBinding origTypeBinding= origType.resolveBinding();\n\n        if (origTypeBinding == null) {\n            return null;\n        }\n\n        String substitutingType= getSubstitutingClassName(origTypeBinding.getErasure().getQualifiedName());\n\n        if (classesToUseWithImport.contains(substitutingType)) {\n            importsToAdd.add(substitutingType);\n            substitutingType= getSimpleName(substitutingType);\n        }\n\n        final TypeNameDecider typeNameDecider= new TypeNameDecider(originalExpression);\n\n        if (origTypeBinding.isParameterizedType()) {\n            final ITypeBinding[] origTypeArgs= origTypeBinding.getTypeArguments();\n            final Type[] newTypes;\n            if (origTypeArgs.length > 0 && !((ParameterizedType) origType).typeArguments().isEmpty()) {\n                newTypes= new Type[1];\n                newTypes[0]= b.toType(origTypeArgs[0], typeNameDecider);\n            } else {\n                newTypes= new Type[0];\n            }\n\n            return b.genericType(substitutingType, newTypes);\n        }\n\n        return b.type(substitutingType);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the substitute type.", "call_func_name": ["org.eclipse.jdt.core.dom.Type.resolveBinding", "org.eclipse.jdt.core.dom.ITypeBinding.getErasure", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "org.autorefactor.jdt.internal.ui.fix.SetRatherThanMapCleanUp.getSubstitutingClassName", "java.util.Set.contains", "java.util.Set.add", "org.autorefactor.jdt.internal.ui.fix.SetRatherThanMapCleanUp.getSimpleName", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.<init>", "org.eclipse.jdt.core.dom.ITypeBinding.isParameterizedType", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeArguments", "org.eclipse.jdt.core.dom.ParameterizedType.typeArguments", "java.util.List.isEmpty", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.genericType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], ["org.eclipse.jdt.core.dom.ASTNode"], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"], ["java.lang.String", "org.eclipse.jdt.core.dom.Type[]"], ["java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType": "Converts a type binding into a type."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type": "Returns a type for the provided type name (simple or qualified name)."}]}, {"index": "666", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "667", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "668", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneCodeThatFallsThroughRatherThanRedundantBlocksCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "669", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ContainsAllRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ContainsAllRatherThanLoopCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ContainsAllRatherThanLoopCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "670", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ContainsAllRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ContainsAllRatherThanLoopCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ContainsAllRatherThanLoopCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "671", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ContainsAllRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ContainsAllRatherThanLoopCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ContainsRatherThanLoopCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "672", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AnnotationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AnnotationCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AnnotationCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "673", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AnnotationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AnnotationCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AnnotationCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "674", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AnnotationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AnnotationCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AnnotationCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "675", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StaticConstantRatherThanInstanceConstantCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StaticConstantRatherThanInstanceConstantCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StaticConstantRatherThanInstanceConstantCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "676", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StaticConstantRatherThanInstanceConstantCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StaticConstantRatherThanInstanceConstantCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StaticConstantRatherThanInstanceConstantCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "677", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StaticConstantRatherThanInstanceConstantCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StaticConstantRatherThanInstanceConstantCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StaticConstantRatherThanInstanceConstantCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "678", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ElseRatherThanOppositeConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ElseRatherThanOppositeConditionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ElseRatherThanOppositeConditionCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "679", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ElseRatherThanOppositeConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ElseRatherThanOppositeConditionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ElseRatherThanOppositeConditionCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "680", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ElseRatherThanOppositeConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ElseRatherThanOppositeConditionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ElseRatherThanOppositeConditionCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "681", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/FillRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.FillRatherThanLoopCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_FillRatherThanLoopCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "682", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/FillRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.FillRatherThanLoopCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_FillRatherThanLoopCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "683", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/FillRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.FillRatherThanLoopCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_FillRatherThanLoopCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "684", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfElseIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfElseIfCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfElseIfCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "685", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfElseIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfElseIfCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfElseIfCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "686", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfElseIfCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfElseIfCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfElseIfCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "687", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimpleNameRatherThanQualifiedNameCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimpleNameRatherThanQualifiedNameCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SimpleNameRatherThanQualifiedNameCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "688", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimpleNameRatherThanQualifiedNameCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimpleNameRatherThanQualifiedNameCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SimpleNameRatherThanQualifiedNameCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "689", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SimpleNameRatherThanQualifiedNameCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SimpleNameRatherThanQualifiedNameCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SimpleNameRatherThanQualifiedNameCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "690", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanEqualsRatherThanNullCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanEqualsRatherThanNullCheckCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanEqualsRatherThanNullCheckCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "691", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanEqualsRatherThanNullCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanEqualsRatherThanNullCheckCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanEqualsRatherThanNullCheckCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "692", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BooleanEqualsRatherThanNullCheckCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BooleanEqualsRatherThanNullCheckCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BooleanEqualsRatherThanNullCheckCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "693", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OppositeConditionRatherThanDuplicateConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OppositeConditionRatherThanDuplicateConditionCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OppositeConditionRatherThanDuplicateConditionCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "694", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OppositeConditionRatherThanDuplicateConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OppositeConditionRatherThanDuplicateConditionCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OppositeConditionRatherThanDuplicateConditionCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "695", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OppositeConditionRatherThanDuplicateConditionCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OppositeConditionRatherThanDuplicateConditionCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OppositeConditionRatherThanDuplicateConditionCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "696", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneConditionRatherThanUnreachableBlockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneConditionRatherThanUnreachableBlockCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneConditionRatherThanUnreachableBlockCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "697", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneConditionRatherThanUnreachableBlockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneConditionRatherThanUnreachableBlockCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneConditionRatherThanUnreachableBlockCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "698", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/OneConditionRatherThanUnreachableBlockCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.OneConditionRatherThanUnreachableBlockCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_OneConditionRatherThanUnreachableBlockCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "699", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptySuperConstrInvocationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptySuperConstrInvocationCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptySuperConstrInvocationCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "700", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptySuperConstrInvocationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptySuperConstrInvocationCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptySuperConstrInvocationCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "701", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RemoveEmptySuperConstrInvocationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RemoveEmptySuperConstrInvocationCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_RemoveEmptySuperConstrInvocationCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "702", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AssignRatherThanTernaryFilterThenAssignAnywayCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanTernaryFilterThenAssignAnywayCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "703", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AssignRatherThanTernaryFilterThenAssignAnywayCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanTernaryFilterThenAssignAnywayCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "704", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AssignRatherThanTernaryFilterThenAssignAnywayCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AssignRatherThanTernaryFilterThenAssignAnywayCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AssignRatherThanTernaryFilterThenAssignAnywayCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "705", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/FloatPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.FloatPrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_FloatPrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "706", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/FloatPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.FloatPrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_FloatPrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "707", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/FloatPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.FloatPrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_FloatPrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "708", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/JUnitAssertCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.JUnitAssertCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_JUnitAssertCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "709", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/JUnitAssertCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.JUnitAssertCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_JUnitAssertCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "710", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/JUnitAssertCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.JUnitAssertCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_JUnitAssertCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "711", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ImplicitDefaultConstructorRatherThanWrittenOneCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ImplicitDefaultConstructorRatherThanWrittenOneCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "712", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ImplicitDefaultConstructorRatherThanWrittenOneCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ImplicitDefaultConstructorRatherThanWrittenOneCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "713", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ImplicitDefaultConstructorRatherThanWrittenOneCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ImplicitDefaultConstructorRatherThanWrittenOneCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ImplicitDefaultConstructorRatherThanWrittenOneCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "714", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ContainsRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ContainsRatherThanLoopCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ContainsRatherThanLoopCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "715", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ContainsRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ContainsRatherThanLoopCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ContainsRatherThanLoopCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "716", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ContainsRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ContainsRatherThanLoopCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ContainsRatherThanLoopCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "717", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LongPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LongPrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LongPrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "718", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LongPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LongPrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LongPrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "719", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LongPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LongPrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LongPrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "720", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SuperCallRatherThanUselessOverridingCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SuperCallRatherThanUselessOverridingCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SuperCallRatherThanUselessOverridingCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "721", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SuperCallRatherThanUselessOverridingCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SuperCallRatherThanUselessOverridingCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SuperCallRatherThanUselessOverridingCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "722", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SuperCallRatherThanUselessOverridingCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SuperCallRatherThanUselessOverridingCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_SuperCallRatherThanUselessOverridingCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "723", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/SuperCallRatherThanUselessOverridingCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.SuperCallRatherThanUselessOverridingCleanUp.isMethodUsedInItsPackage", "methodParameterType": "IMethodBinding#MethodDeclaration#", "methodParameterName": "methodBinding#node#", "methodBody": "private boolean isMethodUsedInItsPackage(final IMethodBinding methodBinding, MethodDeclaration node) {\n        final IPackageBinding methodPackage= methodBinding.getDeclaringClass().getPackage();\n\n        final AtomicBoolean methodIsUsedInPackage= new AtomicBoolean(false);\n        final SearchRequestor requestor= new SearchRequestor() {\n            @Override\n            public void acceptSearchMatch(SearchMatch match) {\n                methodIsUsedInPackage.set(true);\n            }\n        };\n\n        try {\n            final SearchEngine searchEngine= new SearchEngine();\n            searchEngine.search(SearchPattern.createPattern(methodBinding.getJavaElement(), IJavaSearchConstants.REFERENCES, SearchPattern.R_EXACT_MATCH),\n                    new SearchParticipant[] { SearchEngine.getDefaultSearchParticipant() },\n                    SearchEngine.createJavaSearchScope(new IJavaElement[] { methodPackage.getJavaElement() }),\n                    requestor, ctx.getProgressMonitor());\n            return methodIsUsedInPackage.get();\n        } catch (CoreException e) {\n            throw new UnhandledException(node, e);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#BooleanLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayInitializer#ArrayCreation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayInitializer)ArrayCreation)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "This method is extremely expensive.", "call_func_name": ["org.eclipse.jdt.core.dom.IMethodBinding.getDeclaringClass", "org.eclipse.jdt.core.dom.ITypeBinding.getPackage", "java.util.concurrent.atomic.AtomicBoolean.<init>", "org.eclipse.jdt.core.search.SearchEngine.<init>", "org.eclipse.jdt.core.dom.IMethodBinding.getJavaElement", "org.eclipse.jdt.core.search.SearchPattern.createPattern", "org.eclipse.jdt.core.search.SearchEngine.getDefaultSearchParticipant", "org.eclipse.jdt.core.dom.IPackageBinding.getJavaElement", "org.eclipse.jdt.core.search.SearchEngine.createJavaSearchScope", "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getProgressMonitor", "org.eclipse.jdt.core.search.SearchEngine.search", "java.util.concurrent.atomic.AtomicBoolean.get", "org.autorefactor.util.UnhandledException.<init>"], "call_func_parameter": [[""], [""], ["boolean"], [""], [""], ["org.eclipse.jdt.core.IJavaElement", "int", "int"], [""], [""], ["org.eclipse.jdt.core.IJavaElement[]"], [""], ["org.eclipse.jdt.core.search.SearchPattern", "org.eclipse.jdt.core.search.SearchParticipant[]", "org.eclipse.jdt.core.search.IJavaSearchScope", "org.eclipse.jdt.core.search.SearchRequestor", "org.eclipse.core.runtime.IProgressMonitor"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Throwable"]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getProgressMonitor": "Returns the progress monitor of the current job."}]}, {"index": "724", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LogParametersRatherThanLogMessageCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LogParametersRatherThanLogMessageCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LogParametersRatherThanLogMessageCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "725", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LogParametersRatherThanLogMessageCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LogParametersRatherThanLogMessageCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LogParametersRatherThanLogMessageCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "726", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LogParametersRatherThanLogMessageCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LogParametersRatherThanLogMessageCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LogParametersRatherThanLogMessageCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "727", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EntrySetRatherThanKeySetAndValueSearchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EntrySetRatherThanKeySetAndValueSearchCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "728", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EntrySetRatherThanKeySetAndValueSearchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EntrySetRatherThanKeySetAndValueSearchCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "729", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EntrySetRatherThanKeySetAndValueSearchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_EntrySetRatherThanKeySetAndValueSearchCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "730", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EntrySetRatherThanKeySetAndValueSearchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.createMapEntryType", "methodParameterType": "SingleVariableDeclaration#MethodInvocation#TypeNameDecider#", "methodParameterName": "parameter#getValueMi#typeNameDecider#", "methodBody": "private Type createMapEntryType(SingleVariableDeclaration parameter, MethodInvocation getValueMi,\n            TypeNameDecider typeNameDecider) {\n        final String mapEntryType= typeNameDecider.useSimplestPossibleName(Entry.class.getCanonicalName());\n\n        final ASTNodeFactory b= ctx.getASTBuilder();\n        final Type paramType= parameter.getType();\n        final Type mapKeyType;\n        if (paramType.isPrimitiveType()) {\n            // Use the type binding (not as precise as what is in the code)\n            final ITypeBinding mapTypeBinding= getValueMi.getExpression().resolveTypeBinding();\n            final ITypeBinding keyTypeBinding= mapTypeBinding.getTypeArguments()[0];\n            mapKeyType= b.toType(keyTypeBinding, typeNameDecider);\n        } else {\n            // Use the type as defined in the code\n            mapKeyType= b.createMoveTarget(paramType);\n        }\n        final Type mapValueType= b.copyType(getValueMi, typeNameDecider);\n        return b.genericType(mapEntryType, mapKeyType, mapValueType);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#ArrayAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)ArrayAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If possible, use the type declaration, so we can return the type as it was declared. Otherwise, let's use the type binding and output verbose fully qualified types.", "call_func_name": ["java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName", "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder", "org.eclipse.jdt.core.dom.SingleVariableDeclaration.getType", "org.eclipse.jdt.core.dom.Type.isPrimitiveType", "org.eclipse.jdt.core.dom.MethodInvocation.getExpression", "org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeArguments", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createMoveTarget", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.copyType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.genericType"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"], ["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.Expression", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"], ["java.lang.String", "org.eclipse.jdt.core.dom.Type[]"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.useSimplestPossibleName": "Returns the simplest possible name that should be used when referring to the provided fully qualifier type name."}, {"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder": "Returns a new  {@link ASTNodeFactory} object to use in the cleanup."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType": "Converts a type binding into a type."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.copyType": "Creates a type by copying the type binding of the provided expression."}]}, {"index": "731", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EntrySetRatherThanKeySetAndValueSearchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.haveSameTypeBindings", "methodParameterType": "Collection<? extends Expression>#", "methodParameterName": "exprs#", "methodBody": "private boolean haveSameTypeBindings(Collection<? extends Expression> exprs) {\n        Iterator<? extends Expression> it= exprs.iterator();\n\n        if (!it.hasNext()) {\n            // Not really expected\n            return false;\n        }\n\n        final ITypeBinding type0= it.next().resolveTypeBinding();\n\n        if (type0 == null) {\n            return false;\n        }\n\n        while (it.hasNext()) {\n            final ITypeBinding typeN= it.next().resolveTypeBinding();\n            if (!areSameTypeBindings(type0, typeN)) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#WhileStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(WhileStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)WhileStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sanity check.", "call_func_name": ["java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.eclipse.jdt.core.dom.Expression.resolveTypeBinding", "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.areSameTypeBindings"], "call_func_parameter": [[""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.eclipse.jdt.core.dom.ITypeBinding"]], "passed_comments": "/"}, {"index": "732", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/EntrySetRatherThanKeySetAndValueSearchCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.areSameParameterizedTypeBindings", "methodParameterType": "ITypeBinding#ITypeBinding#", "methodParameterName": "type1#type2#", "methodBody": "private boolean areSameParameterizedTypeBindings(final ITypeBinding type1, final ITypeBinding type2) {\n        return type1.getErasure().equals(type2.getErasure())\n                && areSameTypeBindings(type1.getTypeArguments(), type2.getTypeArguments());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Special handling because of captures.", "call_func_name": ["org.eclipse.jdt.core.dom.ITypeBinding.getErasure", "org.eclipse.jdt.core.dom.ITypeBinding.equals", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeArguments", "org.autorefactor.jdt.internal.ui.fix.EntrySetRatherThanKeySetAndValueSearchCleanUp.areSameTypeBindings"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.ITypeBinding[]", "org.eclipse.jdt.core.dom.ITypeBinding[]"]], "passed_comments": "/"}, {"index": "733", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DeclarationOutsideLoopRatherThanInsideCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DeclarationOutsideLoopRatherThanInsideCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DeclarationOutsideLoopRatherThanInsideCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "734", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DeclarationOutsideLoopRatherThanInsideCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DeclarationOutsideLoopRatherThanInsideCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DeclarationOutsideLoopRatherThanInsideCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "735", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/DeclarationOutsideLoopRatherThanInsideCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.DeclarationOutsideLoopRatherThanInsideCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_DeclarationOutsideLoopRatherThanInsideCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "736", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "737", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "738", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_StringBuilderCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "739", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/StringBuilderCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.maybeReplaceWithNewStringAppends", "methodParameterType": "Expression#LinkedList<Pair<ITypeBinding,Expression>>#Expression#boolean#", "methodParameterName": "node#allAppendedStrings#lastExpression#isInstanceCreationToRewrite#", "methodBody": "private boolean maybeReplaceWithNewStringAppends(final Expression node,\n            final LinkedList<Pair<ITypeBinding, Expression>> allAppendedStrings, final Expression lastExpression,\n            final boolean isInstanceCreationToRewrite) {\n        final ASTNodeFactory b= this.ctx.getASTBuilder();\n\n        Expression result= null;\n        final List<Expression> tempStringLiterals= new ArrayList<>();\n        final List<Expression> finalStrings= new ArrayList<>();\n        final AtomicBoolean isFirst= new AtomicBoolean(true);\n\n        for (Pair<ITypeBinding, Expression> appendedString : allAppendedStrings) {\n            if (appendedString == null) {\n                return true;\n            }\n\n            if (isValuedStringLiteralOrConstant(appendedString.getSecond())) {\n                tempStringLiterals.add(b.createCopyTarget(appendedString.getSecond()));\n            } else {\n                result= handleTempStringLiterals(b, lastExpression, isInstanceCreationToRewrite, result, tempStringLiterals,\n                        finalStrings, isFirst);\n\n                if (isFirst.get()) {\n                    isFirst.set(false);\n\n                    if (!isInstanceCreationToRewrite) {\n                        result= b.createCopyTarget(lastExpression);\n                        finalStrings.add(getTypedExpression(b, appendedString));\n                    } else if (appendedString.getFirst() != null\n                            ? ASTNodes.hasType(appendedString.getFirst(), String.class.getCanonicalName())\n                            : ASTNodes.hasType(appendedString.getSecond(), String.class.getCanonicalName())) {\n                        result= b.new0(b.createCopyTarget(((ClassInstanceCreation) lastExpression).getType()),\n                                getTypedExpression(b, appendedString));\n                    } else {\n                        result= b.new0(b.createCopyTarget(((ClassInstanceCreation) lastExpression).getType()));\n                        finalStrings.add(getTypedExpression(b, appendedString));\n                    }\n                } else {\n                    finalStrings.add(getTypedExpression(b, appendedString));\n                }\n            }\n        }\n\n        result= handleTempStringLiterals(b, lastExpression, isInstanceCreationToRewrite, result, tempStringLiterals,\n                finalStrings, isFirst);\n\n        for (Expression finalString : finalStrings) {\n            if (result == null) {\n                result= finalString;\n            } else {\n                result= b.invoke(result, \"append\", finalString); //$NON-NLS-1$\n            }\n        }\n\n        ctx.getRefactorings().replace(node, result);\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#BooleanLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(IfStatement(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Rewrite the successive calls to append()", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder", "java.util.ArrayList.<init>", "java.util.concurrent.atomic.AtomicBoolean.<init>", "java.util.LinkedList.iterator", "java.util.Iterator.next", "org.autorefactor.util.Pair.getSecond", "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.isValuedStringLiteralOrConstant", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.createCopyTarget", "java.util.List.add", "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.handleTempStringLiterals", "java.util.concurrent.atomic.AtomicBoolean.get", "java.util.concurrent.atomic.AtomicBoolean.set", "org.autorefactor.jdt.internal.ui.fix.StringBuilderCleanUp.getTypedExpression", "org.autorefactor.util.Pair.getFirst", "java.lang.Class.getCanonicalName", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.hasType", "org.eclipse.jdt.core.dom.ClassInstanceCreation.getType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.new0", "java.util.Iterator.hasNext", "java.util.List.iterator", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.invoke", "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings", "org.autorefactor.jdt.internal.corext.dom.Refactorings.replace"], "call_func_parameter": [[""], [""], ["boolean"], [""], [""], [""], ["org.eclipse.jdt.core.dom.Expression"], ["org.eclipse.jdt.core.dom.ASTNode"], ["java.lang.Object"], ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory", "org.eclipse.jdt.core.dom.Expression", "boolean", "org.eclipse.jdt.core.dom.Expression", "java.util.List", "java.util.List", "java.util.concurrent.atomic.AtomicBoolean"], [""], ["boolean"], ["org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory", "org.autorefactor.util.Pair"], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "java.lang.String[]"], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String[]"], [""], ["org.eclipse.jdt.core.dom.Type", "org.eclipse.jdt.core.dom.Expression[]"], [""], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String", "org.eclipse.jdt.core.dom.Expression[]"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder": "Returns a new  {@link ASTNodeFactory} object to use in the cleanup."}, {"org.autorefactor.util.Pair.getSecond": "Gets the second element of this pair."}, {"org.autorefactor.util.Pair.getFirst": "Gets the first element of this pair."}, {"org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings": "Returns the  {@link Refactorings} object containing the changes that must beapplied to the AST."}, {"org.autorefactor.jdt.internal.corext.dom.Refactorings.replace": "Replaces the provided node from the AST with the provided replacement node."}]}, {"index": "740", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashSetRatherThanTreeSetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashSetRatherThanTreeSetCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashSetRatherThanTreeSetCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "741", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashSetRatherThanTreeSetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashSetRatherThanTreeSetCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashSetRatherThanTreeSetCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "742", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/HashSetRatherThanTreeSetCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.HashSetRatherThanTreeSetCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_HashSetRatherThanTreeSetCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "743", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.getExistingClassCanonicalName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String[] getExistingClassCanonicalName();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get the existing class canonical name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "744", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.getSubstitutingClassName", "methodParameterType": "String#", "methodParameterName": "origRawType#", "methodBody": "protected abstract String getSubstitutingClassName(String origRawType);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get the substituting class name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "745", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canBeSharedInOtherThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean canBeSharedInOtherThread() {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If a local variable can be used in a runnable.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "746", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canInvokeIterator", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean canInvokeIterator() {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If an iterator can be implicitly or explicitly invoked on the object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "747", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canInstantiationBeRefactored", "methodParameterType": "ClassInstanceCreation#", "methodParameterName": "instanceCreation#", "methodBody": "protected boolean canInstantiationBeRefactored(final ClassInstanceCreation instanceCreation) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the instantiation can be refactored.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "748", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.isMethodReturningExistingClass", "methodParameterType": "MethodInvocation#", "methodParameterName": "mi#", "methodBody": "protected boolean isMethodReturningExistingClass(final MethodInvocation mi) {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Is the method returning existing class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "749", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canMethodBeRefactored", "methodParameterType": "MethodInvocation#List<MethodInvocation>#", "methodParameterName": "mi#methodCallsToRefactor#", "methodBody": "protected boolean canMethodBeRefactored(final MethodInvocation mi,\n            final List<MethodInvocation> methodCallsToRefactor) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the method can be refactored.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "750", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.refactorMethod", "methodParameterType": "ASTNodeFactory#MethodInvocation#MethodInvocation#", "methodParameterName": "b#originalMi#refactoredMi#", "methodBody": "protected void refactorMethod(final ASTNodeFactory b, final MethodInvocation originalMi,\n            final MethodInvocation refactoredMi) {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Refactor the method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "751", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canCodeBeRefactored", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected boolean canCodeBeRefactored() {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the cleanup can be done.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "752", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.substituteType", "methodParameterType": "ASTNodeFactory#Type#ASTNode#Set<String>#Set<String>#", "methodParameterName": "b#origType#originalExpression#classesToUseWithImport#importsToAdd#", "methodBody": "protected Type substituteType(final ASTNodeFactory b, final Type origType, final ASTNode originalExpression,\n            final Set<String> classesToUseWithImport, final Set<String> importsToAdd) {\n        final ITypeBinding origTypeBinding= origType.resolveBinding();\n\n        if (origTypeBinding == null) {\n            return null;\n        }\n\n        final String origRawType= origTypeBinding.getErasure().getQualifiedName();\n        String substitutingClassName= getSubstitutingClassName(origRawType);\n\n        if (substitutingClassName != null) {\n            if (classesToUseWithImport.contains(substitutingClassName)) {\n                importsToAdd.add(substitutingClassName);\n                substitutingClassName= getSimpleName(substitutingClassName);\n            }\n\n            final TypeNameDecider typeNameDecider= new TypeNameDecider(originalExpression);\n\n            if (origTypeBinding.isParameterizedType()) {\n                final ITypeBinding[] origTypeArgs= origTypeBinding.getTypeArguments();\n\n                final Type[] newTypes;\n                if (((ParameterizedType) origType).typeArguments().isEmpty()) {\n                    newTypes= new Type[0];\n                } else {\n                    newTypes= new Type[origTypeArgs.length];\n                    for (int i= 0; i < origTypeArgs.length; i++) {\n                        newTypes[i]= b.toType(origTypeArgs[i], typeNameDecider);\n                    }\n                }\n\n                return b.genericType(substitutingClassName, newTypes);\n            }\n\n            return b.type(substitutingClassName);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#QualifiedName#ArrayCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#ArrayAccess#SimpleName#SimpleName#SimpleName#SimpleName#ArrayAccess#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#ForStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ArrayCreation)Assignment)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)ForStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the substitute type or null if the class should be the same.", "call_func_name": ["org.eclipse.jdt.core.dom.Type.resolveBinding", "org.eclipse.jdt.core.dom.ITypeBinding.getErasure", "org.eclipse.jdt.core.dom.ITypeBinding.getQualifiedName", "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.getSubstitutingClassName", "java.util.Set.contains", "java.util.Set.add", "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.getSimpleName", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider.<init>", "org.eclipse.jdt.core.dom.ITypeBinding.isParameterizedType", "org.eclipse.jdt.core.dom.ITypeBinding.getTypeArguments", "org.eclipse.jdt.core.dom.ParameterizedType.typeArguments", "java.util.List.isEmpty", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.genericType", "org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type"], "call_func_parameter": [[""], [""], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.String"], ["org.eclipse.jdt.core.dom.ASTNode"], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding", "org.autorefactor.jdt.internal.corext.dom.TypeNameDecider"], ["java.lang.String", "org.eclipse.jdt.core.dom.Type[]"], ["java.lang.String"]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.getSubstitutingClassName": "Get the substituting class name."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.toType": "Converts a type binding into a type."}, {"org.autorefactor.jdt.internal.corext.dom.ASTNodeFactory.type": "Returns a type for the provided type name (simple or qualified name)."}]}, {"index": "753", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.isTypeCompatible", "methodParameterType": "ITypeBinding#ITypeBinding#", "methodParameterName": "targetType#sourceType#", "methodBody": "protected boolean isTypeCompatible(final ITypeBinding targetType, final ITypeBinding sourceType) {\n        return targetType != null && targetType.isAssignmentCompatible(sourceType);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if the type of the variable is compatible.", "call_func_name": ["org.eclipse.jdt.core.dom.ITypeBinding.isAssignmentCompatible"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ITypeBinding"]], "passed_comments": "/"}, {"index": "754", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AbstractClassSubstituteCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.maybeRefactorBlock", "methodParameterType": "Block#Set<String>#Set<String>#", "methodParameterName": "node#classesToUseWithImport#importsToAdd#", "methodBody": "protected boolean maybeRefactorBlock(final Block node, final Set<String> classesToUseWithImport,\n            final Set<String> importsToAdd) {\n        final ObjectInstantiationVisitor classCreationVisitor= new ObjectInstantiationVisitor(node);\n        node.accept(classCreationVisitor);\n\n        for (ClassInstanceCreation instanceCreation : classCreationVisitor.getObjectInstantiations()) {\n            final List<VariableDeclaration> varDecls= new ArrayList<>();\n            final List<MethodInvocation> methodCallsToRefactor= new ArrayList<>();\n\n            if (canInstantiationBeRefactored(instanceCreation) && canBeRefactored(node, instanceCreation,\n                    instanceCreation.resolveTypeBinding(), varDecls, methodCallsToRefactor) && canCodeBeRefactored()) {\n                replaceClass(instanceCreation, varDecls, methodCallsToRefactor, classesToUseWithImport, importsToAdd);\n                return false;\n            }\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Maybe refactor the block.", "call_func_name": ["org.eclipse.jdt.core.dom.Block.accept", "java.util.List.iterator", "java.util.Iterator.next", "java.util.ArrayList.<init>", "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canInstantiationBeRefactored", "org.eclipse.jdt.core.dom.ClassInstanceCreation.resolveTypeBinding", "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canBeRefactored", "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canCodeBeRefactored", "org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.replaceClass", "java.util.Iterator.hasNext"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTVisitor"], [""], [""], [""], ["org.eclipse.jdt.core.dom.ClassInstanceCreation"], [""], ["org.eclipse.jdt.core.dom.Block", "org.eclipse.jdt.core.dom.ASTNode", "org.eclipse.jdt.core.dom.ITypeBinding", "java.util.List", "java.util.List"], [""], ["org.eclipse.jdt.core.dom.ClassInstanceCreation", "java.util.List", "java.util.List", "java.util.Set", "java.util.Set"], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canInstantiationBeRefactored": "If the instantiation can be refactored."}, {"org.autorefactor.jdt.internal.ui.fix.AbstractClassSubstituteCleanUp.canCodeBeRefactored": "If the cleanup can be done."}]}, {"index": "755", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LambdaExpressionRatherThanComparatorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LambdaExpressionRatherThanComparatorCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LambdaExpressionRatherThanComparatorCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "756", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LambdaExpressionRatherThanComparatorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LambdaExpressionRatherThanComparatorCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LambdaExpressionRatherThanComparatorCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "757", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/LambdaExpressionRatherThanComparatorCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.LambdaExpressionRatherThanComparatorCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_LambdaExpressionRatherThanComparatorCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "758", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NewClassImportCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getAlreadyImportedClasses", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public Set<String> getAlreadyImportedClasses(final ASTNode node) {\n        final Set<String> alreadyImportedClasses= new HashSet<>();\n        final CompilationUnit cu= (CompilationUnit) node.getRoot();\n        final Set<String> classesToUse= getClassesToImport();\n        final Map<String, String> importsByPackage= new HashMap<>();\n\n        for (String clazz : classesToUse) {\n            importsByPackage.put(getPackageName(clazz), clazz);\n        }\n\n        for (Object anObject : cu.imports()) {\n            final ImportDeclaration anImport= (ImportDeclaration) anObject;\n\n            if (anImport.isOnDemand()) {\n                String fullName= importsByPackage.get(anImport.getName().getFullyQualifiedName());\n\n                if (fullName != null) {\n                    alreadyImportedClasses.add(fullName);\n                }\n            } else if (classesToUse.contains(anImport.getName().getFullyQualifiedName())) {\n                alreadyImportedClasses.add(anImport.getName().getFullyQualifiedName());\n            }\n        }\n\n        return alreadyImportedClasses;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if an import already exists for a class.", "call_func_name": ["java.util.HashSet.<init>", "org.eclipse.jdt.core.dom.ASTNode.getRoot", "org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getClassesToImport", "java.util.HashMap.<init>", "java.util.Set.iterator", "java.util.Iterator.next", "org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getPackageName", "java.util.Map.put", "java.util.Iterator.hasNext", "org.eclipse.jdt.core.dom.CompilationUnit.imports", "java.util.List.iterator", "org.eclipse.jdt.core.dom.ImportDeclaration.isOnDemand", "org.eclipse.jdt.core.dom.ImportDeclaration.getName", "org.eclipse.jdt.core.dom.Name.getFullyQualifiedName", "java.util.Map.get", "java.util.Set.add", "java.util.Set.contains"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["java.lang.String"], ["java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], [""], ["java.lang.Object"], ["java.lang.Object"], ["java.lang.Object"]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getClassesToImport": "The class names to import."}, {"org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getPackageName": "The package of the class."}]}, {"index": "759", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NewClassImportCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getSimpleName", "methodParameterType": "String#", "methodParameterName": "fullyQualifiedName#", "methodBody": "public String getSimpleName(final String fullyQualifiedName) {\n        return fullyQualifiedName.replaceFirst(\"^(?:.*\\\\.)?([^.]*)$\", \"$1\"); //$NON-NLS-1$ //$NON-NLS-2$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The simple name of the class.", "call_func_name": ["java.lang.String.replaceFirst"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "760", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NewClassImportCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getPackageName", "methodParameterType": "String#", "methodParameterName": "fullyQualifiedName#", "methodBody": "public String getPackageName(final String fullyQualifiedName) {\n        return fullyQualifiedName.replaceFirst(\"^(.*)\\\\.[^.]+$\", \"$1\"); //$NON-NLS-1$ //$NON-NLS-2$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The package of the class.", "call_func_name": ["java.lang.String.replaceFirst"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "761", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NewClassImportCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getRefactoringClassInstance", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract CleanUpWithNewClassImport getRefactoringClassInstance();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The class that does the cleanup when an import needs to be added.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "762", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/NewClassImportCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.NewClassImportCleanUp.getClassesToImport", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public abstract Set<String> getClassesToImport();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The class names to import.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "763", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfRatherThanWhileAndFallsThroughCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfRatherThanWhileAndFallsThroughCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfRatherThanWhileAndFallsThroughCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "764", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfRatherThanWhileAndFallsThroughCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfRatherThanWhileAndFallsThroughCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfRatherThanWhileAndFallsThroughCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "765", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/IfRatherThanWhileAndFallsThroughCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.IfRatherThanWhileAndFallsThroughCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_IfRatherThanWhileAndFallsThroughCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "766", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BracketsRatherThanArrayInstantiationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BracketsRatherThanArrayInstantiationCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BracketsRatherThanArrayInstantiationCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "767", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BracketsRatherThanArrayInstantiationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BracketsRatherThanArrayInstantiationCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BracketsRatherThanArrayInstantiationCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "768", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/BracketsRatherThanArrayInstantiationCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.BracketsRatherThanArrayInstantiationCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_BracketsRatherThanArrayInstantiationCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "769", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.RefactoringContext", "methodParameterType": "ICompilationUnit#CompilationUnit#JavaProjectOptions#SubMonitor#Environment#", "methodParameterName": "compilationUnit#astRoot#options#monitor#environment#", "methodBody": "public RefactoringContext(ICompilationUnit compilationUnit, CompilationUnit astRoot, JavaProjectOptions options,\n            SubMonitor monitor, Environment environment) {\n        this.compilationUnit= compilationUnit;\n        this.astRoot= astRoot;\n        this.monitor= monitor;\n        this.environment= environment;\n        this.refactorings= new Refactorings(astRoot, environment.getEventLoop(), monitor);\n        this.astBuilder= new ASTNodeFactory(refactorings);\n        this.options= options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "770", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getAST", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AST getAST() {\n        return refactorings.getAST();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link AST} object to use in the cleanup.", "call_func_name": ["org.autorefactor.jdt.internal.corext.dom.Refactorings.getAST"], "call_func_parameter": [[""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.Refactorings.getAST": "Returns the AST."}]}, {"index": "771", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getASTBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ASTNodeFactory getASTBuilder() {\n        return astBuilder;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a new  {@link ASTNodeFactory} object to use in the cleanup.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "772", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getCompilationUnit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ICompilationUnit getCompilationUnit() {\n        return compilationUnit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the compilation unit to refactor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "773", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getJavaProjectOptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JavaProjectOptions getJavaProjectOptions() {\n        return options;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the Java project options used to compile the project.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "774", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getProgressMonitor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public SubMonitor getProgressMonitor() {\n        return monitor;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the progress monitor of the current job.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "775", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getRefactorings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Refactorings getRefactorings() {\n        return refactorings;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the  {@link Refactorings} object containing the changes that must beapplied to the AST.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "776", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/RefactoringContext.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.RefactoringContext.getLogger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Logger getLogger() {\n        return environment.getLogger();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the logger.", "call_func_name": ["org.autorefactor.environment.Environment.getLogger"], "call_func_parameter": [[""]], "passed_comments": [{"org.autorefactor.environment.Environment.getLogger": "Returns the logger."}]}, {"index": "777", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TestNGAssertCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TestNGAssertCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TestNGAssertCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "778", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TestNGAssertCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TestNGAssertCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TestNGAssertCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "779", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/TestNGAssertCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.TestNGAssertCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_TestNGAssertCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "780", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ShortPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ShortPrimitiveRatherThanWrapperCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ShortPrimitiveRatherThanWrapperCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "781", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ShortPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ShortPrimitiveRatherThanWrapperCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ShortPrimitiveRatherThanWrapperCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "782", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/ShortPrimitiveRatherThanWrapperCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.ShortPrimitiveRatherThanWrapperCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_ShortPrimitiveRatherThanWrapperCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "783", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/VectorOldToNewAPICleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.VectorOldToNewAPICleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_VectorOldToNewAPICleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "784", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/VectorOldToNewAPICleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.VectorOldToNewAPICleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_VectorOldToNewAPICleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "785", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/VectorOldToNewAPICleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.VectorOldToNewAPICleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_VectorOldToNewAPICleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "786", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AddAllRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AddAllRatherThanLoopCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AddAllRatherThanLoopCleanUp_name;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "787", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AddAllRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AddAllRatherThanLoopCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AddAllRatherThanLoopCleanUp_description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "788", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/AddAllRatherThanLoopCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.AddAllRatherThanLoopCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_AddAllRatherThanLoopCleanUp_reason;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "789", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommonIfInIfElseCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommonIfInIfElseCleanUp.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getName() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommonIfInIfElseCleanUp_name;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "790", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommonIfInIfElseCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommonIfInIfElseCleanUp.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDescription() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommonIfInIfElseCleanUp_description;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the description.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "791", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/jdt/internal/ui/fix/CommonIfInIfElseCleanUp.java", "methodName": "org.autorefactor.jdt.internal.ui.fix.CommonIfInIfElseCleanUp.getReason", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getReason() {\n        return MultiFixMessages.CleanUpRefactoringWizard_CommonIfInIfElseCleanUp_reason;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "792", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/Environment.java", "methodName": "org.autorefactor.environment.Environment.Environment", "methodParameterType": "EventLoop#Logger#Preferences#", "methodParameterName": "eventLoop#logger#preferences#", "methodBody": "public Environment(EventLoop eventLoop, Logger logger, Preferences preferences) {\n        this.eventLoop= eventLoop;\n        this.logger= logger;\n        this.preferences= preferences;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "793", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/Environment.java", "methodName": "org.autorefactor.environment.Environment.getEventLoop", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public EventLoop getEventLoop() {\n        return eventLoop;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the event loop.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "794", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/Environment.java", "methodName": "org.autorefactor.environment.Environment.getLogger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Logger getLogger() {\n        return logger;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the logger.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "795", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/Environment.java", "methodName": "org.autorefactor.environment.Environment.getPreferences", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Preferences getPreferences() {\n        return preferences;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the preferences.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "796", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/EventLoop.java", "methodName": "org.autorefactor.environment.EventLoop.syncExec", "methodParameterType": "Callable<E>#", "methodParameterName": "callable#", "methodBody": "<E extends Exception> void syncExec(Callable<E> callable) throws E;", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Calls the  {@link Callable#call()} method of the callable to be invoked by theevent loop at the next reasonable opportunity.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "797", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/Logger.java", "methodName": "org.autorefactor.environment.Logger.error", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "void error(String message);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Logs an error message into Eclipse workspace logs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "798", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/Logger.java", "methodName": "org.autorefactor.environment.Logger.error", "methodParameterType": "String#Exception#", "methodParameterName": "message#e#", "methodBody": "void error(String message, Exception e);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Logs an error message with an exception into Eclipse workspace logs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "799", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/environment/Logger.java", "methodName": "org.autorefactor.environment.Logger.warn", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "void warn(String message);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Logs a warning message into Eclipse workspace logs.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "800", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/AutoRefactorException.java", "methodName": "org.autorefactor.util.AutoRefactorException.AutoRefactorException", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public AutoRefactorException(ASTNode node) {\n        super(ASTNodes.getSourceLocation(node));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "801", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/AutoRefactorException.java", "methodName": "org.autorefactor.util.AutoRefactorException.AutoRefactorException", "methodParameterType": "ASTNode#String#", "methodParameterName": "node#message#", "methodBody": "public AutoRefactorException(ASTNode node, String message) {\n        super(buildMessage(node, message));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "802", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/AutoRefactorException.java", "methodName": "org.autorefactor.util.AutoRefactorException.AutoRefactorException", "methodParameterType": "ASTNode#Throwable#", "methodParameterName": "node#cause#", "methodBody": "public AutoRefactorException(ASTNode node, Throwable cause) {\n        super(ASTNodes.getSourceLocation(node), cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "803", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/AutoRefactorException.java", "methodName": "org.autorefactor.util.AutoRefactorException.AutoRefactorException", "methodParameterType": "ASTNode#String#Throwable#", "methodParameterName": "node#message#cause#", "methodBody": "public AutoRefactorException(ASTNode node, String message, Throwable cause) {\n        super(buildMessage(node, message), cause);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "804", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/IllegalArgumentException.java", "methodName": "org.autorefactor.util.IllegalArgumentException.IllegalArgumentException", "methodParameterType": "ASTNode#String#", "methodParameterName": "node#message#", "methodBody": "public IllegalArgumentException(ASTNode node, String message) {\n        super(node, message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "805", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/IllegalStateException.java", "methodName": "org.autorefactor.util.IllegalStateException.IllegalStateException", "methodParameterType": "ASTNode#String#", "methodParameterName": "node#message#", "methodBody": "public IllegalStateException(ASTNode node, String message) {\n        super(node, message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "806", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Pair.java", "methodName": "org.autorefactor.util.Pair.empty", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static <F, S> Pair<F, S> empty() {\n        return new Pair<F, S>(null, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#NullLiteral#NullLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an immutable empty pair.", "call_func_name": ["org.autorefactor.util.Pair.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "807", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Pair.java", "methodName": "org.autorefactor.util.Pair.of", "methodParameterType": "F#S#", "methodParameterName": "first#second#", "methodBody": "public static <F, S> Pair<F, S> of(F first, S second) {\n        return new Pair<F, S>(first, second);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an immutable pair made of the two objects.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "808", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Pair.java", "methodName": "org.autorefactor.util.Pair.Pair", "methodParameterType": "F#S#", "methodParameterName": "first#second#", "methodBody": "private Pair(F first, S second) {\n        this.first= first;\n        this.second= second;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Creates a new pair.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "809", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Pair.java", "methodName": "org.autorefactor.util.Pair.getFirst", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public F getFirst() {\n        return first;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the first element of this pair.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "810", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Pair.java", "methodName": "org.autorefactor.util.Pair.getSecond", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public S getSecond() {\n        return second;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the second element of this pair.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "811", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/NotImplementedException.java", "methodName": "org.autorefactor.util.NotImplementedException.NotImplementedException", "methodParameterType": "ASTNode#", "methodParameterName": "node#", "methodBody": "public NotImplementedException(ASTNode node) {\n        this(node, node);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Class constructor to use when some code is not implemented.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "812", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/NotImplementedException.java", "methodName": "org.autorefactor.util.NotImplementedException.NotImplementedException", "methodParameterType": "ASTNode#Object#", "methodParameterName": "node#cause#", "methodBody": "public NotImplementedException(ASTNode node, Object cause) {\n        this(node, \"for an object of type \" + (cause != null ? cause.getClass() : null)); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor to use when the provided object was not expected.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "813", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/NotImplementedException.java", "methodName": "org.autorefactor.util.NotImplementedException.NotImplementedException", "methodParameterType": "ASTNode#String#", "methodParameterName": "node#reason#", "methodBody": "public NotImplementedException(ASTNode node, String reason) {\n        super(node, DEFAULT_MESSAGE + \" \" + (reason != null ? reason : \"\")); //$NON-NLS-1$ //$NON-NLS-2$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(ParenthesizedExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor to use with a provided reason.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "814", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/UnhandledException.java", "methodName": "org.autorefactor.util.UnhandledException.UnhandledException", "methodParameterType": "ASTNode#Throwable#", "methodParameterName": "node#unhandled#", "methodBody": "public UnhandledException(ASTNode node, Throwable unhandled) {\n        super(node, unhandled);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "815", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/UnhandledException.java", "methodName": "org.autorefactor.util.UnhandledException.UnhandledException", "methodParameterType": "ASTNode#String#Throwable#", "methodParameterName": "node#message#unhandled#", "methodBody": "public UnhandledException(ASTNode node, String message, Throwable unhandled) {\n        super(node, message, unhandled);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "816", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "Object#Object#", "methodParameterName": "obj1#obj2#", "methodBody": "public static boolean equal(Object obj1, Object obj2) {\n        if (obj1 == null) {\n            return obj2 == null;\n        }\n\n        return obj1.equals(obj2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided objects are equal.", "call_func_name": ["java.lang.Object.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "817", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equalNotNull", "methodParameterType": "Object#Object#", "methodParameterName": "obj1#obj2#", "methodBody": "public static boolean equalNotNull(Object obj1, Object obj2) {\n        return obj1 != null && obj1.equals(obj2);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided objects are equal and not null.", "call_func_name": ["java.lang.Object.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "818", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "boolean#boolean#", "methodParameterName": "b1#b2#", "methodBody": "public static boolean equal(boolean b1, boolean b2) {\n        return b1 == b2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided booleans are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "819", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "byte#byte#", "methodParameterName": "b1#b2#", "methodBody": "public static boolean equal(byte b1, byte b2) {\n        return b1 == b2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided bytes are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "820", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "char#char#", "methodParameterName": "c1#c2#", "methodBody": "public static boolean equal(char c1, char c2) {\n        return c1 == c2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided objects are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "821", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "short#short#", "methodParameterName": "s1#s2#", "methodBody": "public static boolean equal(short s1, short s2) {\n        return s1 == s2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided shorts are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "822", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "int#int#", "methodParameterName": "i1#i2#", "methodBody": "public static boolean equal(int i1, int i2) {\n        return i1 == i2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided integers are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "823", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "long#long#", "methodParameterName": "l1#l2#", "methodBody": "public static boolean equal(long l1, long l2) {\n        return l1 == l2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided longs are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "824", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "float#float#", "methodParameterName": "f1#f2#", "methodBody": "public static boolean equal(float f1, float f2) {\n        return f1 == f2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided floats are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "825", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.equal", "methodParameterType": "double#double#", "methodParameterName": "d1#d2#", "methodBody": "public static boolean equal(double d1, double d2) {\n        return d1 == d2;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether the two provided doubles are equal.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "826", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.getFirst", "methodParameterType": "List<E>#", "methodParameterName": "list#", "methodBody": "public static <E> E getFirst(final List<E> list) {\n        return list.get(0);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the first element in the list. <p> Note: Care must be taken to first test that the list is not empty before calling this method.", "call_func_name": ["java.util.List.get"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "827", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.getLast", "methodParameterType": "List<E>#", "methodParameterName": "list#", "methodBody": "public static <E> E getLast(final List<E> list) {\n        return list.get(list.size() - 1);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the last element in the list. <p> Note: Care must be taken to first test that the list is not empty before calling this method.", "call_func_name": ["java.util.List.size", "java.util.List.get"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "828", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/util/Utils.java", "methodName": "org.autorefactor.util.Utils.getOrDefault", "methodParameterType": "Map<K,V>#K#V#", "methodParameterName": "map#key#defaultValue#", "methodBody": "public static <K, V> V getOrDefault(Map<K, V> map, K key, V defaultValue) {\n        return map.containsKey(key) ? map.get(key) : defaultValue;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ConditionalExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ConditionalExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "829", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CodePathCollector.java", "methodName": "org.autorefactor.cfg.CodePathCollector.getPaths", "methodParameterType": "CFGBasicBlock#", "methodParameterName": "entryBlock#", "methodBody": "public Collection<List<CFGBasicBlock>> getPaths(CFGBasicBlock entryBlock) {\n        collectPathes(entryBlock);\n        return results;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the collected code paths.", "call_func_name": ["org.autorefactor.cfg.CodePathCollector.collectPathes"], "call_func_parameter": [["org.autorefactor.cfg.CFGBasicBlock"]], "passed_comments": "/"}, {"index": "830", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.CFGBasicBlock", "methodParameterType": "ASTNode#String#String#boolean#LineAndColumn#", "methodParameterName": "node#fileName#codeExcerpt#isDecision#lineAndColumn#", "methodBody": "public CFGBasicBlock(ASTNode node, String fileName, String codeExcerpt, boolean isDecision,\n            LineAndColumn lineAndColumn) {\n        this(node, fileName, codeExcerpt, isDecision, null, lineAndColumn);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructor for a new block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "831", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.buildEntryBlock", "methodParameterType": "ASTNode#String#String#", "methodParameterName": "node#fileName#codeExcerpt#", "methodBody": "public static CFGBasicBlock buildEntryBlock(ASTNode node, String fileName, String codeExcerpt) {\n        return new CFGBasicBlock(node, fileName, codeExcerpt, false, true, new LineAndColumn(0, 1, 1));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#SimpleName#SimpleType#NumberLiteral#NumberLiteral#NumberLiteral#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds and returns a new entry block.", "call_func_name": ["java.lang.Boolean.valueOf", "org.autorefactor.cfg.LineAndColumn.<init>", "org.autorefactor.cfg.CFGBasicBlock.<init>"], "call_func_parameter": [["boolean"], ["int", "int", "int"], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String", "java.lang.String", "boolean", "java.lang.Boolean", "org.autorefactor.cfg.LineAndColumn"]], "passed_comments": "/"}, {"index": "832", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.buildExitBlock", "methodParameterType": "ASTNode#String#String#LineAndColumn#", "methodParameterName": "node#fileName#codeExcerpt#lineAndColumn#", "methodBody": "public static CFGBasicBlock buildExitBlock(ASTNode node, String fileName, String codeExcerpt,\n            LineAndColumn lineAndColumn) {\n        return new CFGBasicBlock(node, fileName, codeExcerpt, false, false, lineAndColumn);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds and returns a new exit block.", "call_func_name": ["java.lang.Boolean.valueOf", "org.autorefactor.cfg.CFGBasicBlock.<init>"], "call_func_parameter": [["boolean"], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String", "java.lang.String", "boolean", "java.lang.Boolean", "org.autorefactor.cfg.LineAndColumn"]], "passed_comments": "/"}, {"index": "833", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.getLineAndColumn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public LineAndColumn getLineAndColumn() {\n        return lineAndColumn;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the line and column information of this block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "834", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.getNode", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ASTNode getNode() {\n        return node;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the AST node represented by this basic block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "835", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.isDecision", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isDecision() {\n        return this.isDecision;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this block is a decision block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "836", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.isEntryBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isEntryBlock() {\n        return Boolean.TRUE.equals(this.isEntryBlock);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this basic block is the entry block of a method.", "call_func_name": ["java.lang.Boolean.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "837", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.isExitBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isExitBlock() {\n        return Boolean.FALSE.equals(this.isEntryBlock);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns whether this basic block is the exit block of a method.", "call_func_name": ["java.lang.Boolean.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "838", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.getOutgoingEdgesAndVariableAccesses", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Collection<Object> getOutgoingEdgesAndVariableAccesses() {\n        return outgoingEdgesAndVariableAccesses;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a collection of the outgoing edges and variable accesses of this basic block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "839", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.addIncomingEdge", "methodParameterType": "CFGEdge#", "methodParameterName": "edge#", "methodBody": "public void addIncomingEdge(CFGEdge edge) {\n        if (edge.getTargetBlock() != this) {\n            throw new IllegalArgumentException(null,\n                    \"Error: the target block of this incoming edge is not the current block: \" + edge); //$NON-NLS-1$\n        }\n        if (!this.incomingEdges.add(edge)) {\n            throw new IllegalArgumentException(null, \"Error: duplicate incoming edge:\" + edge); //$NON-NLS-1$\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ThisExpression#InfixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ThisExpression)ThisExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds an incoming edge to this basic block.", "call_func_name": ["org.autorefactor.cfg.CFGEdge.getTargetBlock", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.util.IllegalArgumentException.<init>", "java.util.Collection.add"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], ["java.lang.Object"]], "passed_comments": [{"org.autorefactor.cfg.CFGEdge.getTargetBlock": "Returns the target block of the edge."}]}, {"index": "840", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.addOutgoingEdge", "methodParameterType": "CFGEdge#", "methodParameterName": "edge#", "methodBody": "public void addOutgoingEdge(CFGEdge edge) {\n        if (edge.getSourceBlock() != this) {\n            throw new IllegalArgumentException(null,\n                    \"Error: the source block of this outgoing edge is not the current block\"); //$NON-NLS-1$\n        }\n        if (!this.outgoingEdgesAndVariableAccesses.add(edge)) {\n            throw new IllegalArgumentException(null, \"Error: duplicate outgoing edge:\" + edge); //$NON-NLS-1$\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ThisExpression#InfixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#NullLiteral#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ThisExpression)ThisExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Adds an outgoing edge to this basic block.", "call_func_name": ["org.autorefactor.cfg.CFGEdge.getSourceBlock", "org.autorefactor.util.IllegalArgumentException.<init>", "java.util.Collection.add", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], ["java.lang.Object"], ["java.lang.String"], ["java.lang.Object"], [""]], "passed_comments": [{"org.autorefactor.cfg.CFGEdge.getSourceBlock": "Returns the source block of the edge."}]}, {"index": "841", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.addVariableAccess", "methodParameterType": "VariableAccess#", "methodParameterName": "varAccess#", "methodBody": "public void addVariableAccess(VariableAccess varAccess) {\n        this.outgoingEdgesAndVariableAccesses.add(varAccess);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Adds a variable access to this basic block.", "call_func_name": ["java.util.Collection.add"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "842", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.compareTo", "methodParameterType": "CFGBasicBlock#", "methodParameterName": "o#", "methodBody": "public int compareTo(CFGBasicBlock o) {\n        final Integer startPosition= lineAndColumn.getStartPosition();\n        return startPosition.compareTo(o.lineAndColumn.getStartPosition());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compare objects.", "call_func_name": ["org.autorefactor.cfg.LineAndColumn.getStartPosition", "java.lang.Integer.valueOf", "java.lang.Integer.compareTo"], "call_func_parameter": [[""], ["int"], ["java.lang.Integer"]], "passed_comments": "/"}, {"index": "843", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.getFileName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getFileName() {\n        return this.fileName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the file name containing this basic block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "844", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.getCodeExcerpt", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCodeExcerpt() {\n        return codeExcerpt;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a code excerpt for this basic block.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "845", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.getDotNodeLabel", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDotNodeLabel() {\n        final StringBuilder sb= new StringBuilder();\n        appendDotNodeLabel(sb);\n        return sb.toString();\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the node label in the DOT format.", "call_func_name": ["java.lang.StringBuilder.<init>", "org.autorefactor.cfg.CFGBasicBlock.appendDotNodeLabel", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.StringBuilder"], [""]], "passed_comments": [{"org.autorefactor.cfg.CFGBasicBlock.appendDotNodeLabel": "Appends the node label in the DOT format and returns the provided string builder."}]}, {"index": "846", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.appendDotNodeId", "methodParameterType": "StringBuilder#", "methodParameterName": "sb#", "methodBody": "StringBuilder appendDotNodeId(StringBuilder sb) {\n        if (isEntryBlock()) {\n            sb.append(\"Entry\"); //$NON-NLS-1$\n        } else if (isExitBlock()) {\n            sb.append(\"Exit\"); //$NON-NLS-1$\n        } else {\n            LineAndColumn lal= this.lineAndColumn;\n            sb.append(\"_\").append(lal.getLine()).append(\"_\").append(lal.getColumn()); //$NON-NLS-1$ //$NON-NLS-2$\n        }\n\n        return sb;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Appends the node id in the DOT format and returns the provided string builder.", "call_func_name": ["org.autorefactor.cfg.CFGBasicBlock.isEntryBlock", "java.lang.StringBuilder.append", "org.autorefactor.cfg.CFGBasicBlock.isExitBlock", "org.autorefactor.cfg.LineAndColumn.getLine", "java.lang.StringBuilder.append", "org.autorefactor.cfg.LineAndColumn.getColumn"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int"], [""]], "passed_comments": [{"org.autorefactor.cfg.CFGBasicBlock.isEntryBlock": "Returns whether this basic block is the entry block of a method."}, {"org.autorefactor.cfg.CFGBasicBlock.isExitBlock": "Returns whether this basic block is the exit block of a method."}]}, {"index": "847", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBasicBlock.java", "methodName": "org.autorefactor.cfg.CFGBasicBlock.appendDotNodeLabel", "methodParameterType": "StringBuilder#", "methodParameterName": "sb#", "methodBody": "StringBuilder appendDotNodeLabel(StringBuilder sb) {\n        sb.append(this.codeExcerpt).append(\"\\\\n(\"); //$NON-NLS-1$\n        LineAndColumn lal= this.lineAndColumn;\n        sb.append(lal.getLine()).append(\",\").append(lal.getColumn()).append(\")\"); //$NON-NLS-1$ //$NON-NLS-2$\n        return sb;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Appends the node label in the DOT format and returns the provided string builder.", "call_func_name": ["java.lang.StringBuilder.append", "org.autorefactor.cfg.LineAndColumn.getLine", "java.lang.StringBuilder.append", "org.autorefactor.cfg.LineAndColumn.getColumn"], "call_func_parameter": [["java.lang.String"], [""], ["int"], [""]], "passed_comments": "/"}, {"index": "848", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/VariableAccess.java", "methodName": "org.autorefactor.cfg.VariableAccess.VariableAccess", "methodParameterType": "ASTNode#Name#Type#int#", "methodParameterName": "astNode#name#type#accessType#", "methodBody": "public VariableAccess(ASTNode astNode, Name name, Type type, int accessType) {\n        this.astNode= astNode;\n        this.name= name;\n        this.type= type;\n        this.accessType= accessType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Class constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "849", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/VariableAccess.java", "methodName": "org.autorefactor.cfg.VariableAccess.VariableAccess", "methodParameterType": "ASTNode#int#", "methodParameterName": "astNode#accessType#", "methodBody": "public VariableAccess(ASTNode astNode, int accessType) {\n        this(astNode, astNode instanceof Name ? (Name) astNode : null, null, accessType);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#CastExpression#NullLiteral#ConditionalExpression#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(ConditionalExpression(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(NullLiteral)NullLiteral)ConditionalExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Class constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "850", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.CFGEdgeBuilder", "methodParameterType": "CFGBasicBlock#", "methodParameterName": "sourceBlock#", "methodBody": "public CFGEdgeBuilder(CFGBasicBlock sourceBlock) {\n        this(null, false, sourceBlock);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#BooleanLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "851", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.CFGEdgeBuilder", "methodParameterType": "Expression#boolean#CFGBasicBlock#", "methodParameterName": "condition#evaluationResult#sourceBlock#", "methodBody": "public CFGEdgeBuilder(Expression condition, boolean evaluationResult, CFGBasicBlock sourceBlock) {\n        this.condition= condition;\n        this.evaluationResult= evaluationResult;\n        this.sourceBlock= sourceBlock;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "852", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.CFGEdgeBuilder", "methodParameterType": "CFGBasicBlock#boolean#", "methodParameterName": "throwingBlock#jumping#", "methodBody": "public CFGEdgeBuilder(CFGBasicBlock throwingBlock, boolean jumping) {\n        this.sourceBlock= throwingBlock;\n        this.jumping= jumping;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "853", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.withTarget", "methodParameterType": "CFGBasicBlock#", "methodParameterName": "targetBlock#", "methodBody": "public CFGEdgeBuilder withTarget(CFGBasicBlock targetBlock) {\n        this.targetBlock= targetBlock;\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets the target block of the edge.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "854", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CFGEdge build() {\n        if (sourceBlock == null) {\n            throw new IllegalStateException(this.condition, \"sourceBlock is mandatory\"); //$NON-NLS-1$\n        }\n        if (targetBlock == null) {\n            throw new IllegalStateException(this.condition, \"targetBlock is mandatory\"); //$NON-NLS-1$\n        }\n        if (built != null) {\n            throw new IllegalStateException(this.condition, \"CFGEdgeBuilder \" + this + \" has already been built\"); //$NON-NLS-1$ //$NON-NLS-2$\n        }\n        if (condition != null) {\n            built= buildEdge(condition, evaluationResult, sourceBlock, targetBlock);\n        } else {\n            built= buildEdge(sourceBlock, targetBlock);\n        }\n\n        return built;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#StringLiteral#ThisExpression#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(InfixExpression(StringLiteral)StringLiteral(ThisExpression)ThisExpression(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validates the content of this builder and then builds a  {@link CFGEdge} withit. This method can only be invoked once.", "call_func_name": ["org.autorefactor.util.IllegalStateException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.cfg.CFGEdgeBuilder.buildEdge", "org.autorefactor.cfg.CFGEdgeBuilder.buildEdge"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], ["java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""], ["org.eclipse.jdt.core.dom.Expression", "boolean", "org.autorefactor.cfg.CFGBasicBlock", "org.autorefactor.cfg.CFGBasicBlock"], ["org.autorefactor.cfg.CFGBasicBlock", "org.autorefactor.cfg.CFGBasicBlock"]], "passed_comments": [{"org.autorefactor.cfg.CFGEdgeBuilder.buildEdge": "Factory method building a CFGEdge with the provided arguments."}, {"org.autorefactor.cfg.CFGEdgeBuilder.buildEdge": "Factory method building a CFGEdge with the provided arguments."}]}, {"index": "855", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.buildEdge", "methodParameterType": "CFGBasicBlock#CFGBasicBlock#", "methodParameterName": "sourceBlock#targetBlock#", "methodBody": "public static CFGEdge buildEdge(CFGBasicBlock sourceBlock, CFGBasicBlock targetBlock) {\n        return buildEdge(null, true, sourceBlock, targetBlock);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Factory method building a CFGEdge with the provided arguments.", "call_func_name": ["org.autorefactor.cfg.CFGEdgeBuilder.buildEdge"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "boolean", "org.autorefactor.cfg.CFGBasicBlock", "org.autorefactor.cfg.CFGBasicBlock"]], "passed_comments": [{"org.autorefactor.cfg.CFGEdgeBuilder.buildEdge": "Factory method building a CFGEdge with the provided arguments."}]}, {"index": "856", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.buildEdge", "methodParameterType": "Expression#CFGBasicBlock#CFGBasicBlock#", "methodParameterName": "condition#sourceBlock#targetBlock#", "methodBody": "public static CFGEdge buildEdge(Expression condition, CFGBasicBlock sourceBlock, CFGBasicBlock targetBlock) {\n        return buildEdge(condition, true, sourceBlock, targetBlock);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Factory method building a CFGEdge with the provided arguments.", "call_func_name": ["org.autorefactor.cfg.CFGEdgeBuilder.buildEdge"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "boolean", "org.autorefactor.cfg.CFGBasicBlock", "org.autorefactor.cfg.CFGBasicBlock"]], "passed_comments": [{"org.autorefactor.cfg.CFGEdgeBuilder.buildEdge": "Factory method building a CFGEdge with the provided arguments."}]}, {"index": "857", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdgeBuilder.java", "methodName": "org.autorefactor.cfg.CFGEdgeBuilder.buildEdge", "methodParameterType": "Expression#boolean#CFGBasicBlock#CFGBasicBlock#", "methodParameterName": "condition#evaluationResult#sourceBlock#targetBlock#", "methodBody": "public static CFGEdge buildEdge(Expression condition, boolean evaluationResult, CFGBasicBlock sourceBlock,\n            CFGBasicBlock targetBlock) {\n        final CFGEdge edge= new CFGEdge(condition, evaluationResult, sourceBlock, targetBlock);\n        sourceBlock.addOutgoingEdge(edge);\n        targetBlock.addIncomingEdge(edge);\n        return edge;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Factory method building a CFGEdge with the provided arguments.", "call_func_name": ["org.autorefactor.cfg.CFGEdge.<init>", "org.autorefactor.cfg.CFGBasicBlock.addOutgoingEdge", "org.autorefactor.cfg.CFGBasicBlock.addIncomingEdge"], "call_func_parameter": [["org.eclipse.jdt.core.dom.Expression", "boolean", "org.autorefactor.cfg.CFGBasicBlock", "org.autorefactor.cfg.CFGBasicBlock"], ["org.autorefactor.cfg.CFGEdge"], ["org.autorefactor.cfg.CFGEdge"]], "passed_comments": [{"org.autorefactor.cfg.CFGBasicBlock.addOutgoingEdge": "Adds an outgoing edge to this basic block."}, {"org.autorefactor.cfg.CFGBasicBlock.addIncomingEdge": "Adds an incoming edge to this basic block."}]}, {"index": "858", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGDotPrinter.java", "methodName": "org.autorefactor.cfg.CFGDotPrinter.toDot", "methodParameterType": "CFGBasicBlock#", "methodParameterName": "startBlock#", "methodBody": "public String toDot(final CFGBasicBlock startBlock) {\n        final Map<ASTNode, CFGSubGraph> subGraphs= new HashMap<>();\n        final Set<CFGEdge> edges= new TreeSet<>(new CFGEdgeComparator());\n        collect(startBlock, subGraphs, edges);\n        final CFGSubGraph subGraph= subGraphs.get(startBlock.getNode());\n\n        final StringBuilder sb= new StringBuilder();\n        appendGraph(startBlock, subGraph, edges, sb);\n        return sb.toString();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a String representing the CFG in the dot format.", "call_func_name": ["java.util.HashMap.<init>", "java.util.TreeSet.<init>", "org.autorefactor.cfg.CFGDotPrinter.collect", "org.autorefactor.cfg.CFGBasicBlock.getNode", "java.util.Map.get", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.util.Comparator"], ["org.autorefactor.cfg.CFGBasicBlock", "java.util.Map", "java.util.Set"], [""], ["java.lang.Object"], [""], [""]], "passed_comments": [{"org.autorefactor.cfg.CFGBasicBlock.getNode": "Returns the AST node represented by this basic block."}]}, {"index": "859", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdge.java", "methodName": "org.autorefactor.cfg.CFGEdge.CFGEdge", "methodParameterType": "Expression#boolean#CFGBasicBlock#CFGBasicBlock#", "methodParameterName": "condition#evaluationResult#sourceBlock#targetBlock#", "methodBody": "public CFGEdge(Expression condition, boolean evaluationResult, CFGBasicBlock sourceBlock,\n            CFGBasicBlock targetBlock) {\n        this.condition= condition;\n        this.evaluationResult= evaluationResult;\n        this.sourceBlock= sourceBlock;\n        this.targetBlock= targetBlock;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "860", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdge.java", "methodName": "org.autorefactor.cfg.CFGEdge.getCondition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Expression getCondition() {\n        return this.condition;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the decision condition that led to the creation of this edge.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "861", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdge.java", "methodName": "org.autorefactor.cfg.CFGEdge.getSourceBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CFGBasicBlock getSourceBlock() {\n        return this.sourceBlock;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the source block of the edge.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "862", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdge.java", "methodName": "org.autorefactor.cfg.CFGEdge.getTargetBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CFGBasicBlock getTargetBlock() {\n        return this.targetBlock;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the target block of the edge.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "863", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGEdge.java", "methodName": "org.autorefactor.cfg.CFGEdge.getEvaluationResult", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean getEvaluationResult() {\n        return evaluationResult;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the condition evaluation result.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "864", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.CFGBuilder", "methodParameterType": "String#JavaProjectOptions#", "methodParameterName": "source#options#", "methodBody": "public CFGBuilder(String source, JavaProjectOptions options) {\n        this.source= source;\n        this.tabSize= options.getTabSize();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "865", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.addVariableAccess", "methodParameterType": "CFGBasicBlock#Expression#int#ThrowerBlocks#", "methodParameterName": "basicBlock#node#flags#throwers#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    private boolean addVariableAccess(CFGBasicBlock basicBlock, Expression node, int flags, ThrowerBlocks throwers) {\n        if (node == null) {\n            return false;\n        }\n\n        switch (node.getNodeType()) {\n        case ARRAY_ACCESS:\n            ArrayAccess aa= (ArrayAccess) node;\n            addVariableAccess(basicBlock, aa.getArray(), flags, throwers);\n            addVariableAccess(basicBlock, aa.getIndex(), flags, throwers);\n            throwers.addThrow(aa, newException(node, ArrayIndexOutOfBoundsException.class.getCanonicalName()));\n            return true;\n\n        case ARRAY_CREATION:\n            ArrayCreation ac= (ArrayCreation) node;\n            boolean acMightThrow1= addVariableAccess(basicBlock, ac.getInitializer(), flags, throwers);\n            boolean acMightThrow2= addVariableAccesses(basicBlock, ac.dimensions(), flags, throwers);\n            return acMightThrow1 || acMightThrow2;\n\n        case ARRAY_INITIALIZER:\n            ArrayInitializer ai= (ArrayInitializer) node;\n            return addVariableAccesses(basicBlock, ai.expressions(), flags, throwers);\n\n        case ASSIGNMENT:\n            Assignment a= (Assignment) node;\n            boolean aMightThrow1= addVariableAccess(basicBlock, a.getLeftHandSide(), VariableAccess.WRITE, throwers);\n            boolean aMightThrow2= addVariableAccess(basicBlock, a.getRightHandSide(), VariableAccess.READ, throwers);\n            return aMightThrow1 || aMightThrow2;\n\n        case BOOLEAN_LITERAL:\n        case CHARACTER_LITERAL:\n        case NULL_LITERAL:\n        case NUMBER_LITERAL:\n        case STRING_LITERAL:\n        case TYPE_LITERAL:\n            // Nothing to do\n            return false;\n\n        case CAST_EXPRESSION:\n            CastExpression cae= (CastExpression) node;\n            return addVariableAccess(basicBlock, cae.getExpression(), flags, throwers);\n\n        case CLASS_INSTANCE_CREATION:\n            ClassInstanceCreation cic= (ClassInstanceCreation) node;\n            addVariableAccess(basicBlock, cic.getExpression(), flags, throwers);\n            addVariableAccesses(basicBlock, cic.arguments(), flags, throwers);\n            IMethodBinding cicBinding= cic.resolveConstructorBinding();\n\n            if (cicBinding != null) {\n                ITypeBinding[] declaredThrows= cicBinding.getExceptionTypes();\n                throwers.addThrow(cic, declaredThrows);\n                return declaredThrows.length > 0;\n            }\n\n            return false;\n\n        case CONDITIONAL_EXPRESSION:\n            ConditionalExpression coe= (ConditionalExpression) node;\n            boolean mightThrow1= addVariableAccess(basicBlock, coe.getExpression(), flags, throwers);\n            boolean mightThrow2= addVariableAccess(basicBlock, coe.getThenExpression(), flags, throwers);\n            boolean mightThrow3= addVariableAccess(basicBlock, coe.getElseExpression(), flags, throwers);\n            return mightThrow1 || mightThrow2 || mightThrow3;\n\n        case FIELD_ACCESS:\n            FieldAccess fa= (FieldAccess) node;\n            boolean mightThrow= addVariableAccess(basicBlock, fa.getExpression(), flags, throwers);\n            basicBlock.addVariableAccess(new VariableAccess(fa, flags));\n\n            if (is(flags, VariableAccess.READ)) {\n                throwers.addThrow(fa, newException(node, NullPointerException.class.getCanonicalName()));\n                mightThrow= true;\n            }\n\n            return mightThrow;\n\n        case INFIX_EXPRESSION:\n            InfixExpression ie= (InfixExpression) node;\n            boolean ieMightThrow1= addVariableAccess(basicBlock, ie.getLeftOperand(), flags, throwers);\n            boolean ieMightThrow2= addVariableAccess(basicBlock, ie.getRightOperand(), flags, throwers);\n            return ieMightThrow1 || ieMightThrow2;\n\n        case INSTANCEOF_EXPRESSION:\n            InstanceofExpression ioe= (InstanceofExpression) node;\n            return addVariableAccess(basicBlock, ioe.getLeftOperand(), flags, throwers);\n\n        case METHOD_INVOCATION:\n            MethodInvocation mi= (MethodInvocation) node;\n            addVariableAccess(basicBlock, mi.getExpression(), flags, throwers);\n            addVariableAccesses(basicBlock, mi.arguments(), flags, throwers);\n            IMethodBinding methodBinding= mi.resolveMethodBinding();\n\n            if (methodBinding != null) {\n                ITypeBinding[] declaredThrows= methodBinding.getExceptionTypes();\n                throwers.addThrow(mi, declaredThrows);\n                return declaredThrows.length > 0;\n            }\n\n            return false;\n\n        case SIMPLE_NAME:\n            SimpleName sn= (SimpleName) node;\n            basicBlock.addVariableAccess(new VariableAccess(sn, flags));\n\n            if (is(flags, VariableAccess.READ)) {\n                throwers.addThrow(sn, newException(node, NullPointerException.class.getCanonicalName()));\n                return true;\n            }\n\n            return false;\n\n        case QUALIFIED_NAME:\n            QualifiedName qn= (QualifiedName) node;\n            basicBlock.addVariableAccess(new VariableAccess(qn, flags));\n            throwers.addThrow(qn, newException(node, NullPointerException.class.getCanonicalName()));\n            return true;\n\n        case PARENTHESIZED_EXPRESSION:\n            ParenthesizedExpression pe= (ParenthesizedExpression) node;\n            return addVariableAccess(basicBlock, pe.getExpression(), flags, throwers);\n\n        case POSTFIX_EXPRESSION:\n            PostfixExpression poe= (PostfixExpression) node;\n            return addVariableAccess(basicBlock, poe.getOperand(), flags, throwers);\n\n        case PREFIX_EXPRESSION:\n            PrefixExpression pre= (PrefixExpression) node;\n            return addVariableAccess(basicBlock, pre.getOperand(), flags, throwers);\n\n        case SUPER_FIELD_ACCESS:\n            SuperFieldAccess sfa= (SuperFieldAccess) node;\n            boolean sfaMightThrow1= addVariableAccess(basicBlock, sfa.getQualifier(), flags, throwers);\n            boolean sfaMightThrow2= addVariableAccess(basicBlock, sfa.getName(), flags, throwers);\n            return sfaMightThrow1 || sfaMightThrow2;\n\n        case SUPER_METHOD_INVOCATION:\n            SuperMethodInvocation smi= (SuperMethodInvocation) node;\n            addVariableAccess(basicBlock, smi.getQualifier(), flags, throwers);\n            addVariableAccess(basicBlock, smi.getName(), flags, throwers);\n            IMethodBinding sMethodBinding= smi.resolveMethodBinding();\n\n            if (sMethodBinding != null) {\n                ITypeBinding[] declaredThrows= sMethodBinding.getExceptionTypes();\n                throwers.addThrow(smi, declaredThrows);\n                return declaredThrows.length > 0;\n            }\n\n            return false;\n\n        case THIS_EXPRESSION:\n            ThisExpression te= (ThisExpression) node;\n            // TODO JNR remember use of \"this\" here\n            return addVariableAccess(basicBlock, te.getQualifier(), flags, throwers);\n\n        case VARIABLE_DECLARATION_EXPRESSION:\n            return addDeclarations(basicBlock, (VariableDeclarationExpression) node, throwers);\n\n        default:\n            throw new NotImplementedException(node);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#SimpleName#SwitchCase#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ReturnStatement#SwitchCase#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#SwitchStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement(SwitchCase)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)SwitchStatement)Block)MethodDeclaration", "methodDoc": "@return whether the current variable access can throw an exception.", "call_func_name": ["org.eclipse.jdt.core.dom.Expression.getNodeType", "org.eclipse.jdt.core.dom.ArrayAccess.getArray", "org.autorefactor.cfg.CFGBuilder.addVariableAccess", "org.eclipse.jdt.core.dom.ArrayAccess.getIndex", "java.lang.Class.getCanonicalName", "org.autorefactor.cfg.CFGBuilder.newException", "org.autorefactor.cfg.ThrowerBlocks.addThrow", "org.eclipse.jdt.core.dom.ArrayCreation.getInitializer", "org.eclipse.jdt.core.dom.ArrayCreation.dimensions", "org.autorefactor.cfg.CFGBuilder.addVariableAccesses", "org.eclipse.jdt.core.dom.ArrayInitializer.expressions", "org.eclipse.jdt.core.dom.Assignment.getLeftHandSide", "org.eclipse.jdt.core.dom.Assignment.getRightHandSide", "org.eclipse.jdt.core.dom.CastExpression.getExpression", "org.eclipse.jdt.core.dom.ClassInstanceCreation.getExpression", "org.eclipse.jdt.core.dom.ClassInstanceCreation.arguments", "org.eclipse.jdt.core.dom.ClassInstanceCreation.resolveConstructorBinding", "org.eclipse.jdt.core.dom.IMethodBinding.getExceptionTypes", "org.eclipse.jdt.core.dom.ConditionalExpression.getExpression", "org.eclipse.jdt.core.dom.ConditionalExpression.getThenExpression", "org.eclipse.jdt.core.dom.ConditionalExpression.getElseExpression", "org.eclipse.jdt.core.dom.FieldAccess.getExpression", "org.autorefactor.cfg.VariableAccess.<init>", "org.autorefactor.cfg.CFGBasicBlock.addVariableAccess", "org.autorefactor.cfg.CFGBuilder.is", "org.eclipse.jdt.core.dom.InfixExpression.getLeftOperand", "org.eclipse.jdt.core.dom.InfixExpression.getRightOperand", "org.eclipse.jdt.core.dom.InstanceofExpression.getLeftOperand", "org.eclipse.jdt.core.dom.MethodInvocation.getExpression", "org.eclipse.jdt.core.dom.MethodInvocation.arguments", "org.eclipse.jdt.core.dom.MethodInvocation.resolveMethodBinding", "org.eclipse.jdt.core.dom.ParenthesizedExpression.getExpression", "org.eclipse.jdt.core.dom.PostfixExpression.getOperand", "org.eclipse.jdt.core.dom.PrefixExpression.getOperand", "org.eclipse.jdt.core.dom.SuperFieldAccess.getQualifier", "org.eclipse.jdt.core.dom.SuperFieldAccess.getName", "org.eclipse.jdt.core.dom.SuperMethodInvocation.getQualifier", "org.eclipse.jdt.core.dom.SuperMethodInvocation.getName", "org.eclipse.jdt.core.dom.SuperMethodInvocation.resolveMethodBinding", "org.eclipse.jdt.core.dom.ThisExpression.getQualifier", "org.autorefactor.cfg.CFGBuilder.addDeclarations", "org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [[""], [""], ["org.autorefactor.cfg.CFGBasicBlock", "org.eclipse.jdt.core.dom.Expression", "int", "org.autorefactor.cfg.ThrowerBlocks"], [""], [""], ["org.eclipse.jdt.core.dom.Expression", "java.lang.String"], ["org.eclipse.jdt.core.dom.Expression", "org.eclipse.jdt.core.dom.ITypeBinding[]"], [""], [""], ["org.autorefactor.cfg.CFGBasicBlock", "java.util.List", "int", "org.autorefactor.cfg.ThrowerBlocks"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "int"], ["org.autorefactor.cfg.VariableAccess"], ["int", "int"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["org.autorefactor.cfg.CFGBasicBlock", "org.eclipse.jdt.core.dom.VariableDeclarationExpression", "org.autorefactor.cfg.ThrowerBlocks"], ["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": [{"org.autorefactor.cfg.CFGBuilder.addVariableAccess": "@return whether the current variable access can throw an exception."}, {"org.autorefactor.cfg.CFGBuilder.addVariableAccesses": "@return whether the current variable accesses can throw an exception."}, {"org.autorefactor.cfg.CFGBasicBlock.addVariableAccess": "Adds a variable access to this basic block."}]}, {"index": "866", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.addVariableAccesses", "methodParameterType": "CFGBasicBlock#List<Expression>#int#ThrowerBlocks#", "methodParameterName": "basicBlock#expressions#flags#throwers#", "methodBody": "private boolean addVariableAccesses(CFGBasicBlock basicBlock, List<Expression> expressions, int flags,\n            ThrowerBlocks throwers) {\n        boolean mightThrow= false;\n        for (Expression expression : expressions) {\n            if (addVariableAccess(basicBlock, expression, flags, throwers)) {\n                mightThrow= true;\n            }\n        }\n\n        return mightThrow;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return whether the current variable accesses can throw an exception.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.cfg.CFGBuilder.addVariableAccess", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], ["org.autorefactor.cfg.CFGBasicBlock", "org.eclipse.jdt.core.dom.Expression", "int", "org.autorefactor.cfg.ThrowerBlocks"], [""]], "passed_comments": [{"org.autorefactor.cfg.CFGBuilder.addVariableAccess": "@return whether the current variable access can throw an exception."}]}, {"index": "867", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "QualifiedName#", "methodParameterName": "node#", "methodBody": "public void buildCFG(QualifiedName node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "868", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "PrimitiveType#", "methodParameterName": "node#", "methodBody": "public void buildCFG(PrimitiveType node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "869", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "QualifiedType#", "methodParameterName": "node#", "methodBody": "public void buildCFG(QualifiedType node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "870", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "PrefixExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(PrefixExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "871", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "PostfixExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(PostfixExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "872", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ParenthesizedExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ParenthesizedExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "873", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SingleVariableDeclaration#", "methodParameterName": "node#", "methodBody": "public void buildCFG(SingleVariableDeclaration node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "874", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SimpleType#", "methodParameterName": "node#", "methodBody": "public void buildCFG(SimpleType node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "875", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SimpleName#", "methodParameterName": "node#", "methodBody": "public void buildCFG(SimpleName node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "876", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ReturnStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(ReturnStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        if (node.getExpression() != null) {\n            addVariableAccess(basicBlock, node.getExpression(), VariableAccess.READ, throwers);\n        }\n        CFGEdgeBuilder.buildEdge(basicBlock, this.exitBlock);\n        return state.nextStmtsAreDeadCode();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "877", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "Modifier#", "methodParameterName": "node#", "methodBody": "public void buildCFG(Modifier node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "878", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "MethodInvocation#", "methodParameterName": "node#", "methodBody": "public void buildCFG(MethodInvocation node) {\n        // TODO JNR add variable access to \"this\"\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "879", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "MethodDeclaration#", "methodParameterName": "node#", "methodBody": "public CFGBasicBlock buildCFG(MethodDeclaration node) {\n        final CFGBasicBlock entryBlock= newEntryBlock(node);\n        this.exitBlock= newExitBlock(node);\n\n        addDeclarations(entryBlock, ASTNodes.parameters(node));\n\n        try {\n            final ThrowerBlocks throwers= new ThrowerBlocks();\n            final CFGEdgeBuilder liveEdge= new CFGEdgeBuilder(entryBlock);\n            final LivenessState liveAfterBody= buildCFG(node.getBody(), LivenessState.of(liveEdge), throwers);\n            if (!liveAfterBody.liveEdges.isEmpty()) {\n                if (!((node.getReturnType2() == null) || (node.getReturnType2().resolveBinding() == null /* added for unit Tests */)\n                        || \"void\".equals(node.getReturnType2().resolveBinding().getName()))) { //$NON-NLS-1$\n                    throw new IllegalStateException(node, \"Did not expect to find any edges to build \" //$NON-NLS-1$\n                            + \"for a constructor or a non void method return type.\"); //$NON-NLS-1$\n                }\n                buildEdges(liveAfterBody, exitBlock);\n            }\n            if (!this.edgesToBuild.isEmpty()) {\n                throw new IllegalStateException(node,\n                        \"At this point, there should not be any edges left to build. Left edges: \" + this.edgesToBuild); //$NON-NLS-1$\n            }\n            List<CFGBasicBlock> throwingBlocks= throwers.selectBlocksThrowing(null);\n            if (!throwingBlocks.isEmpty()) {\n                for (CFGBasicBlock throwingBlock : throwingBlocks) {\n                    // TODO JNR\n                }\n            }\n            List<CFGEdgeBuilder> throwingEdges= throwers.selectEdgesThrowing(null);\n            if (!throwingEdges.isEmpty()) {\n                for (CFGEdgeBuilder throwingEdge : throwingEdges) {\n                    // TODO JNR\n                }\n            }\n\n            return entryBlock;\n        } finally {\n            this.exitBlock= null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#ThisExpression#SimpleName#FieldAccess#NullLiteral#Assignment#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(PrefixExpression(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(ParenthesizedExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block)Block)EnhancedForStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.cfg.CFGBuilder.newEntryBlock", "org.autorefactor.cfg.CFGBuilder.newExitBlock", "org.autorefactor.jdt.internal.corext.dom.ASTNodes.parameters", "org.autorefactor.cfg.CFGBuilder.addDeclarations", "org.autorefactor.cfg.ThrowerBlocks.<init>", "org.autorefactor.cfg.CFGEdgeBuilder.<init>", "org.eclipse.jdt.core.dom.MethodDeclaration.getBody", "java.util.List.isEmpty", "org.eclipse.jdt.core.dom.MethodDeclaration.getReturnType2", "org.eclipse.jdt.core.dom.Type.resolveBinding", "org.eclipse.jdt.core.dom.ITypeBinding.getName", "java.lang.String.equals", "org.autorefactor.util.IllegalStateException.<init>", "java.util.Map.isEmpty", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.cfg.ThrowerBlocks.selectBlocksThrowing", "java.util.List.iterator", "java.util.Iterator.next", "java.util.Iterator.hasNext", "org.autorefactor.cfg.ThrowerBlocks.selectEdgesThrowing"], "call_func_parameter": [["org.eclipse.jdt.core.dom.MethodDeclaration"], ["org.eclipse.jdt.core.dom.MethodDeclaration"], ["org.eclipse.jdt.core.dom.MethodDeclaration"], ["org.autorefactor.cfg.CFGBasicBlock", "java.util.List"], [""], ["org.autorefactor.cfg.CFGBasicBlock"], [""], [""], [""], [""], [""], ["java.lang.Object"], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.String"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.ITypeBinding"], [""], [""], [""], ["org.eclipse.jdt.core.dom.ITypeBinding"]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.ASTNodes.parameters": "Generecized version of the equivalent JDT method."}]}, {"index": "880", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "MethodRefParameter#", "methodParameterName": "node#", "methodBody": "public void buildCFG(MethodRefParameter node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "881", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "MethodRef#", "methodParameterName": "node#", "methodBody": "public void buildCFG(MethodRef node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "882", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "MemberValuePair#", "methodParameterName": "node#", "methodBody": "public void buildCFG(MemberValuePair node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "883", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ParameterizedType#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ParameterizedType node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "884", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "NumberLiteral#", "methodParameterName": "node#", "methodBody": "public void buildCFG(NumberLiteral node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "885", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "NullLiteral#", "methodParameterName": "node#", "methodBody": "public void buildCFG(NullLiteral node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "886", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "UnionType#", "methodParameterName": "node#", "methodBody": "public void buildCFG(UnionType node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "887", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "TypeParameter#", "methodParameterName": "node#", "methodBody": "public void buildCFG(TypeParameter node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "888", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "TypeLiteral#", "methodParameterName": "node#", "methodBody": "public void buildCFG(TypeLiteral node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "889", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "TypeDeclarationStatement#", "methodParameterName": "node#", "methodBody": "public void buildCFG(TypeDeclarationStatement node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.eclipse.jdt.core.dom.TypeDeclaration.isInterface", "java.util.LinkedList.<init>", "org.eclipse.jdt.core.dom.TypeDeclaration.getFields", "org.autorefactor.cfg.CFGBuilder.buildCFG", "org.eclipse.jdt.core.dom.TypeDeclaration.getMethods", "org.autorefactor.cfg.CFGBuilder.buildCFG", "java.util.List.add", "org.eclipse.jdt.core.dom.TypeDeclaration.getTypes", "org.autorefactor.cfg.CFGBuilder.buildCFG", "java.util.Collections.emptyList"], "call_func_parameter": [[""], [""], [""], ["org.eclipse.jdt.core.dom.FieldDeclaration"], [""], ["org.eclipse.jdt.core.dom.MethodDeclaration"], ["java.lang.Object"], [""], ["org.eclipse.jdt.core.dom.TypeDeclaration"], [""]], "passed_comments": [{"org.autorefactor.cfg.CFGBuilder.buildCFG": "Builds a CFG for the provided node."}, {"org.autorefactor.cfg.CFGBuilder.buildCFG": "Builds a CFG for the provided node."}, {"org.autorefactor.cfg.CFGBuilder.buildCFG": "Builds a CFG for the provided node."}, {"org.autorefactor.cfg.CFGBuilder.buildCFG": "Builds a CFG for the provided node."}]}, {"index": "890", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "TypeDeclaration#", "methodParameterName": "node#", "methodBody": "public List<CFGBasicBlock> buildCFG(TypeDeclaration node) {\n        if (!node.isInterface()) {\n            List<CFGBasicBlock> results= new LinkedList<>();\n            for (FieldDeclaration fieldDecl : node.getFields()) {\n                buildCFG(fieldDecl);\n            }\n            for (MethodDeclaration methodDecl : node.getMethods()) {\n                results.add(buildCFG(methodDecl));\n            }\n            for (TypeDeclaration typeDeclaration : node.getTypes()) {\n                buildCFG(typeDeclaration);\n            }\n            // for (BodyDeclaration bodyDeclaration : (List<BodyDeclaration>)\n            // node.bodyDeclarations()) {\n            // buildCFG(bodyDeclaration);\n            // }\n\n            return results;\n        }\n\n        return Collections.emptyList();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "891", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "TryStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(TryStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final ThrowerBlocks localThrowers= new ThrowerBlocks();\n\n        final LivenessState liveAfterTry= buildCFG(node.getBody(), state, localThrowers);\n        final LivenessState liveAfterCatchClauses= new LivenessState();\n\n        final Set<ITypeBinding> caughtExceptions= new HashSet<>();\n        for (CatchClause catchClause : ASTNodes.catchClauses(node)) {\n            final LivenessState catchState= new LivenessState();\n            CFGBasicBlock catchBasicBlock= getCFGBasicBlock(catchClause, catchState);\n            final SingleVariableDeclaration exceptionDecl= catchClause.getException();\n            addDeclaration(catchBasicBlock, exceptionDecl, VariableAccess.DECL_INIT);\n\n            final ITypeBinding caughtException= exceptionDecl.getType().resolveBinding();\n            caughtExceptions.add(caughtException);\n\n            final List<CFGBasicBlock> throwingBlocksInTry= localThrowers.selectBlocksThrowing(caughtException);\n            if (throwingBlocksInTry.isEmpty()) {\n                // TODO JNR dead code found!!\n            }\n            final List<CFGEdgeBuilder> liveBeforeCatchClause= new ArrayList<>(throwingBlocksInTry.size());\n            for (CFGBasicBlock throwingBlockInTry : throwingBlocksInTry) {\n                // TODO JNR if a Statement throws an exception, it must break the current\n                // basicBlock\n                // TODO JNR how to specify this edge is due to an exception?\n                liveBeforeCatchClause.add(new CFGEdgeBuilder(throwingBlockInTry));\n            }\n\n            final LivenessState liveAfterCatchClause= buildCFG(catchClause.getBody(), catchState, new ThrowerBlocks());\n            liveAfterCatchClauses.addAll(liveAfterCatchClause);\n        }\n\n        // TODO JNR move uncaught exceptions from localThrowers to throwers\n        final Map<CFGBasicBlock, Set<ITypeBinding>> throwUncaughtExceptions= localThrowers\n                .selectBlocksThrowingOtherThan(caughtExceptions);\n        for (Entry<CFGBasicBlock, Set<ITypeBinding>> throwing : throwUncaughtExceptions.entrySet()) {\n            final CFGEdgeBuilder uncaughtExceptionEdge= new CFGEdgeBuilder(throwing.getKey(), true);\n            liveAfterCatchClauses.add(uncaughtExceptionEdge);\n            throwers.addThrow(uncaughtExceptionEdge, throwing.getValue());\n        }\n\n        if (node.getFinally() != null) {\n            final LivenessState liveBeforeFinally= new LivenessState();\n            liveBeforeFinally.addAll(liveAfterTry);\n            liveBeforeFinally.addAll(liveAfterCatchClauses);\n            return buildCFG(node.getFinally(), liveBeforeFinally, throwers);\n        }\n\n        return liveAfterCatchClauses.copyLiveBasicBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "892", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "WildcardType#", "methodParameterName": "node#", "methodBody": "public void buildCFG(WildcardType node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "893", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "WhileStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(WhileStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock conditionBlock= getCFGBasicBlock(node.getExpression(), state.nextStmtWillCreateNewBlock());\n        addVariableAccess(conditionBlock, node.getExpression(), VariableAccess.READ, throwers);\n\n        final CFGEdgeBuilder liveEdge= new CFGEdgeBuilder(node.getExpression(), true, conditionBlock);\n        final LivenessState liveAfterStatement= buildCFG(node.getBody(), LivenessState.of(liveEdge), throwers);\n        liveAfterStatement.add(new CFGEdgeBuilder(node.getExpression(), false, conditionBlock));\n        buildEdgesAfterBranchableStatement(node, liveAfterStatement, conditionBlock);\n        return liveAfterStatement.nextStmtWillCreateNewBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "894", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "VariableDeclarationFragment#", "methodParameterName": "node#", "methodBody": "public void buildCFG(VariableDeclarationFragment node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "895", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "VariableDeclarationStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(VariableDeclarationStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        addDeclarations(basicBlock, ASTNodes.fragments(node), node.getType(), throwers);\n        return getInBlockStmtResult(state, basicBlock);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "896", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "VariableDeclarationExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(VariableDeclarationExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "897", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SwitchStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(SwitchStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        final LivenessState liveBeforeBody= new LivenessState(basicBlock, new CFGEdgeBuilder(basicBlock));\n        final LivenessState liveAfterBody= buildCFG(ASTNodes.statements(node), liveBeforeBody, throwers);\n        liveAfterBody.add(new CFGEdgeBuilder(basicBlock));\n\n        buildEdgesAfterBranchableStatement(node, liveAfterBody, basicBlock);\n        return liveAfterBody.nextStmtWillCreateNewBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "898", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SwitchCase#CFGBasicBlock#LivenessState#ThrowerBlocks#", "methodParameterName": "node#switchConditionBasicBlock#state#throwers#", "methodBody": "public LivenessState buildCFG(SwitchCase node, CFGBasicBlock switchConditionBasicBlock, LivenessState state,\n            ThrowerBlocks throwers) {\n        // The current live blocks will be empty if there was a break,\n        // or populated in case of fall-through.\n        addVariableAccess(switchConditionBasicBlock, node.getExpression(), VariableAccess.READ, throwers);\n        // Add an edge going from the condition of the switch\n        // (state.liveBasicBlock is the condition of the switch)\n        state.add(new CFGEdgeBuilder(node.getExpression(), true, switchConditionBasicBlock));\n        return state.nextStmtWillCreateNewBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "899", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SuperMethodInvocation#", "methodParameterName": "node#", "methodBody": "public void buildCFG(SuperMethodInvocation node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "900", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SuperFieldAccess#", "methodParameterName": "node#", "methodBody": "public void buildCFG(SuperFieldAccess node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "901", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SuperConstructorInvocation#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(SuperConstructorInvocation node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        addVariableAccesses(basicBlock, ASTNodes.arguments(node), VariableAccess.READ, throwers);\n        return getInBlockStmtResult(state, basicBlock);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "902", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "StringLiteral#", "methodParameterName": "node#", "methodBody": "public void buildCFG(StringLiteral node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "903", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ThrowStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(ThrowStatement node, LivenessState state, ThrowerBlocks throwers) {\n        CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        final Expression throwingExpression= node.getExpression();\n        addVariableAccess(state.liveBasicBlock, throwingExpression, VariableAccess.READ, throwers);\n        throwers.addThrow(basicBlock, throwingExpression.resolveTypeBinding());\n        return state.nextStmtsAreDeadCode();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "904", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ThisExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ThisExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "905", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "TextElement#", "methodParameterName": "node#", "methodBody": "public void buildCFG(TextElement node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "906", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "TagElement#", "methodParameterName": "node#", "methodBody": "public void buildCFG(TagElement node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "907", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "SynchronizedStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(SynchronizedStatement node, LivenessState state, ThrowerBlocks throwers) {\n        CFGBasicBlock basicBlock= getCFGBasicBlock(node, state.nextStmtWillCreateNewBlock());\n        addVariableAccess(basicBlock, node.getExpression(), VariableAccess.READ, throwers);\n        CFGEdgeBuilder liveEdge= new CFGEdgeBuilder(basicBlock);\n        LivenessState result= buildCFG(node.getBody(), LivenessState.of(liveEdge), throwers);\n        return result.nextStmtWillCreateNewBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "908", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "CatchClause#", "methodParameterName": "node#", "methodBody": "public void buildCFG(CatchClause node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "909", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "CastExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(CastExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "910", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "BreakStatement#LivenessState#", "methodParameterName": "node#state#", "methodBody": "public LivenessState buildCFG(BreakStatement node, LivenessState state) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        final Statement targetStatement;\n        if (node.getLabel() != null) {\n            targetStatement= findLabeledParentStatement(node);\n        } else {\n            targetStatement= findBreakableParentStatement(node);\n        }\n        addEdgeToBuild(targetStatement, new CFGEdgeBuilder(basicBlock), true);\n        return state.copyLiveBasicBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "911", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "BooleanLiteral#", "methodParameterName": "node#", "methodBody": "public void buildCFG(BooleanLiteral node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "912", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ConstructorInvocation#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(ConstructorInvocation node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        addVariableAccesses(basicBlock, ASTNodes.arguments(node), VariableAccess.READ, throwers);\n        return getInBlockStmtResult(state, basicBlock);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "913", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ConditionalExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ConditionalExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "914", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "CompilationUnit#", "methodParameterName": "node#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public List<CFGBasicBlock> buildCFG(CompilationUnit node) {\n        List<CFGBasicBlock> results= new LinkedList<>();\n        for (AbstractTypeDeclaration decl : (List<AbstractTypeDeclaration>) node.types()) {\n            if (decl.getNodeType() != TYPE_DECLARATION) {\n                throw new NotImplementedException(node);\n            }\n            results.addAll(buildCFG((TypeDeclaration) decl));\n        }\n\n        return results;\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#CastExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["java.util.LinkedList.<init>", "org.eclipse.jdt.core.dom.CompilationUnit.types", "java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jdt.core.dom.AbstractTypeDeclaration.getNodeType", "org.autorefactor.util.NotImplementedException.<init>", "org.autorefactor.cfg.CFGBuilder.buildCFG", "java.util.List.addAll", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], [""], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode"], ["org.eclipse.jdt.core.dom.TypeDeclaration"], ["java.util.Collection"], [""]], "passed_comments": [{"org.autorefactor.cfg.CFGBuilder.buildCFG": "Builds a CFG for the provided node."}, {"org.autorefactor.cfg.CFGBuilder.buildCFG": "Builds a CFG for the provided node."}]}, {"index": "915", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ClassInstanceCreation#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ClassInstanceCreation node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "916", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "CharacterLiteral#", "methodParameterName": "node#", "methodBody": "public void buildCFG(CharacterLiteral node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "917", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ArrayCreation#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ArrayCreation node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "918", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ArrayAccess#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ArrayAccess node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "919", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "AnonymousClassDeclaration#", "methodParameterName": "node#", "methodBody": "public void buildCFG(AnonymousClassDeclaration node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "920", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "Block#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(Block node, LivenessState state, ThrowerBlocks throwers) {\n        LivenessState liveState= state;\n        try {\n            liveState= buildCFG(ASTNodes.statements(node), state, throwers);\n        } finally {\n            moveAllEdgesToBuild(node, liveState);\n        }\n\n        return liveState.nextStmtWillCreateNewBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "921", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "Assignment#", "methodParameterName": "node#", "methodBody": "public void buildCFG(Assignment node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "922", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "AssertStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(AssertStatement node, LivenessState state, ThrowerBlocks throwers) {\n        CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        addVariableAccess(basicBlock, node.getExpression(), VariableAccess.READ, throwers);\n        addVariableAccess(basicBlock, node.getMessage(), VariableAccess.READ, throwers);\n        return getInBlockStmtResult(state, basicBlock);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "923", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ArrayType#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ArrayType node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "924", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ArrayInitializer#", "methodParameterName": "node#", "methodBody": "public void buildCFG(ArrayInitializer node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "925", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "Initializer#", "methodParameterName": "node#", "methodBody": "public void buildCFG(Initializer node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "926", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "InstanceofExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(InstanceofExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "927", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "InfixExpression#", "methodParameterName": "node#", "methodBody": "public void buildCFG(InfixExpression node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "928", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "IfStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(IfStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock exprBlock= getCFGBasicBlock(node, state.nextStmtWillCreateNewBlock(), true);\n        try {\n            addVariableAccess(exprBlock, node.getExpression(), VariableAccess.READ, throwers);\n\n            final LivenessState result= new LivenessState();\n            CFGEdgeBuilder thenEdge= new CFGEdgeBuilder(node.getExpression(), true, exprBlock);\n            result.addAll(buildCFG(node.getThenStatement(), LivenessState.of(thenEdge), throwers));\n\n            final Statement elseStatement= node.getElseStatement();\n            CFGEdgeBuilder elseEdge= new CFGEdgeBuilder(node.getExpression(), false, exprBlock);\n            if (elseStatement != null) {\n                result.addAll(buildCFG(elseStatement, LivenessState.of(elseEdge), throwers));\n            } else {\n                result.add(elseEdge);\n            }\n\n            return result.nextStmtWillCreateNewBlock();\n        } finally {\n            moveAllEdgesToBuild(node, state);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the passed in statement.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "929", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "MemberRef#", "methodParameterName": "node#", "methodBody": "public void buildCFG(MemberRef node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "930", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "LabeledStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(LabeledStatement node, LivenessState state, ThrowerBlocks throwers) {\n        // Does not count as an executable node, so do not get a basic block for it\n        return buildCFG(node.getBody(), state, throwers);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "931", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "EnhancedForStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(EnhancedForStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state.nextStmtWillCreateNewBlock());\n\n        addDeclaration(basicBlock, node.getParameter(), VariableAccess.DECL_INIT | VariableAccess.WRITE);\n\n        final LivenessState newLiveState= LivenessState.of(new CFGEdgeBuilder(basicBlock));\n        final LivenessState liveAfterBody= buildCFG(node.getBody(), newLiveState, throwers);\n        buildEdges(liveAfterBody, basicBlock);\n\n        final LivenessState liveAfterStatement= LivenessState.of(new CFGEdgeBuilder(basicBlock));\n        buildEdgesAfterBranchableStatement(node, liveAfterStatement, basicBlock);\n        return liveAfterStatement.nextStmtWillCreateNewBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#InfixExpression#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "932", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "EmptyStatement#LivenessState#", "methodParameterName": "node#state#", "methodBody": "public LivenessState buildCFG(EmptyStatement node, LivenessState state) {\n        CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        return getInBlockStmtResult(state, basicBlock);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "933", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "DoStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(DoStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state.nextStmtWillCreateNewBlock());\n        final LivenessState newLiveState= new LivenessState(basicBlock, new CFGEdgeBuilder(basicBlock));\n        final LivenessState liveAfterLoop= buildCFG(node.getBody(), newLiveState, throwers);\n        CFGBasicBlock conditionBlock= getCFGBasicBlock(node.getExpression(),\n                liveAfterLoop.nextStmtWillCreateNewBlock());\n        addVariableAccess(conditionBlock, node.getExpression(), VariableAccess.READ, throwers);\n\n        CFGEdgeBuilder.buildEdge(node.getExpression(), true, conditionBlock, basicBlock);\n\n        LivenessState liveAfterStatement= LivenessState.of(new CFGEdgeBuilder(node.getExpression(), false, conditionBlock));\n        buildEdgesAfterBranchableStatement(node, liveAfterStatement, basicBlock);\n        return liveAfterStatement;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "934", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ContinueStatement#LivenessState#", "methodParameterName": "node#state#", "methodBody": "public LivenessState buildCFG(ContinueStatement node, LivenessState state) {\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        final Statement targetStatement;\n        if (node.getLabel() != null) {\n            targetStatement= findLabeledParentStatement(node);\n        } else {\n            targetStatement= findContinuableParentStatement(node);\n        }\n        addEdgeToBuild(targetStatement, new CFGEdgeBuilder(basicBlock), false);\n        return state.copyLiveBasicBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "935", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ForStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(ForStatement node, LivenessState state, ThrowerBlocks throwers) {\n        final CFGBasicBlock initBlock= getCFGBasicBlock(ASTNodes.initializers(node), state);\n        final LivenessState initLiveBlock= LivenessState.of(new CFGEdgeBuilder(initBlock));\n        final CFGBasicBlock exprBlock= getCFGBasicBlock(node.getExpression(), initLiveBlock, true);\n        final CFGBasicBlock updatersBlock= getCFGBasicBlock(ASTNodes.updaters(node), new LivenessState());\n        CFGEdgeBuilder.buildEdge(updatersBlock, exprBlock);\n\n        for (Expression expression : ASTNodes.initializers(node)) {\n            if (expression instanceof VariableDeclarationExpression) {\n                addDeclarations(initBlock, (VariableDeclarationExpression) expression, throwers);\n            }\n        }\n        addVariableAccess(exprBlock, node.getExpression(), VariableAccess.READ, throwers);\n        addVariableAccesses(updatersBlock, ASTNodes.updaters(node), VariableAccess.WRITE, throwers);\n\n        CFGEdgeBuilder liveBlock= new CFGEdgeBuilder(node.getExpression(), true, exprBlock);\n        final LivenessState liveAfterBody= buildCFG(node.getBody(), LivenessState.of(liveBlock), throwers);\n        buildEdges(liveAfterBody, updatersBlock);\n\n        final LivenessState liveAfterStatement= LivenessState.of(new CFGEdgeBuilder(node.getExpression(), false, exprBlock));\n        buildEdgesAfterBranchableStatement(node, liveAfterStatement, updatersBlock);\n        return liveAfterStatement.nextStmtWillCreateNewBlock();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "936", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "FieldDeclaration#", "methodParameterName": "node#", "methodBody": "public void buildCFG(FieldDeclaration node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": ["org.autorefactor.util.NotImplementedException.<init>"], "call_func_parameter": [["org.eclipse.jdt.core.dom.ASTNode"]], "passed_comments": "/"}, {"index": "937", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "FieldAccess#", "methodParameterName": "node#", "methodBody": "public void buildCFG(FieldAccess node) {\n        throw new NotImplementedException(node);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "938", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.buildCFG", "methodParameterType": "ExpressionStatement#LivenessState#ThrowerBlocks#", "methodParameterName": "node#state#throwers#", "methodBody": "public LivenessState buildCFG(ExpressionStatement node, LivenessState state, ThrowerBlocks throwers) {\n        boolean isNewBlock= state.requireNewBlock();\n        final CFGBasicBlock basicBlock= getCFGBasicBlock(node, state);\n        boolean mightThrow= addVariableAccess(basicBlock, node.getExpression(), VariableAccess.READ, throwers);\n        if (!isNewBlock && mightThrow) {\n            final CFGBasicBlock currentBlock= getCFGBasicBlock(node, state.nextStmtWillCreateNewBlock());\n            return new LivenessState(currentBlock, new CFGEdgeBuilder(currentBlock));\n            // TODO JNR create a new CFGBasicBlock from here to catch / finally / exit\n        }\n\n        return getInBlockStmtResult(state, basicBlock);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(SimpleName)SimpleName)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Builds a CFG for the provided node.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "939", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/cfg/CFGBuilder.java", "methodName": "org.autorefactor.cfg.CFGBuilder.getCFGBasicBlock", "methodParameterType": "ASTNode#LivenessState#boolean#", "methodParameterName": "node#state#isDecision#", "methodBody": "private CFGBasicBlock getCFGBasicBlock(ASTNode node, LivenessState state, boolean isDecision) {\n        final Map<CFGEdgeBuilder, Boolean> toBuild= this.edgesToBuild.remove(node);\n        if (isNotEmpty(toBuild)) {\n            throw new IllegalStateException(node, \"No edges to build should exist for node \\\"\" + node //$NON-NLS-1$\n                    + \"\\\" before a CFGBasicBlock is created for it. Found the following edges to build \" + toBuild); //$NON-NLS-1$\n        }\n        if (!state.requireNewBlock()) {\n            // TODO JNR add nodes to the basicBlock they belong to\n            // and adapt the CFGDotPrinter to display \"...\" after the first node\n            // basicBlock.addNode(node);\n            return state.liveBasicBlock;\n        }\n        final LineAndColumn lineCol= getLineAndColumn(node);\n        final CFGBasicBlock basicBlock= new CFGBasicBlock(node, ASTNodes.getFileName(node), ASTPrintHelper.codeExcerpt(node), isDecision,\n                lineCol);\n        buildEdges(state, basicBlock);\n        return basicBlock;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Will create and return a new CFGBasicBlock for the passed in node, if the liveBasicBlock is null, otherwise it will return the liveBasicBlock.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "940", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/preferences/Preferences.java", "methodName": "org.autorefactor.preferences.Preferences.debugModeOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean debugModeOn();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns whether debug mode is on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "941", "file": "/root/repos/repos34/AutoRefactor/plugin/src/main/java/org/autorefactor/preferences/Preferences.java", "methodName": "org.autorefactor.preferences.Preferences.isEnabled", "methodParameterType": "Class<? extends AbstractCleanUpRule>#", "methodParameterName": "clazz#", "methodBody": "boolean isEnabled(Class<? extends AbstractCleanUpRule> clazz);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns whether this cleanup rule is on.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "942", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/AutoRefactorPlugin.java", "methodName": "org.autorefactor.AutoRefactorPlugin.getDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static AutoRefactorPlugin getDefault() {\n        // Deprecated. Replaced by IEclipsePreferences.\n        // Preferences are now stored according to scopes in the IPreferencesService.\n        // The return value of this method corresponds to a combination of the\n        // InstanceScope and the DefaultScope.\n        // To set preferences for your plug-in, use new\n        // InstanceScope().getNode(<&yourPluginId>).\n        // To set default preferences for your plug-in, use new\n        // DefaultScope().getNode(<yourPluginId>).\n        // To lookup an integer preference value for your plug-in, use\n        // Platform.getPreferencesService().getInt(<yourPluginId>, <preferenceKey>,\n        // <defaultValue>, null).\n        // Similar methods exist on IPreferencesService for obtaining other kinds of\n        // preference values\n        // (strings, booleans, etc).\n        return plugin;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the shared instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "943", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/AutoRefactorPlugin.java", "methodName": "org.autorefactor.AutoRefactorPlugin.getEnvironment", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static Environment getEnvironment() {\n        return environment;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the environment.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "944", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/AutoRefactorPlugin.java", "methodName": "org.autorefactor.AutoRefactorPlugin.turnDebugModeOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void turnDebugModeOn() {\n        getDefault().getPreferenceStore().setValue(PreferenceConstants.DEBUG_MODE_ON.getName(), true);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Turns on the debug mode. <p> This method is only for internal use.", "call_func_name": ["org.autorefactor.AutoRefactorPlugin.getDefault", "org.autorefactor.AutoRefactorPlugin.getPreferenceStore", "org.autorefactor.preferences.PreferenceConstants.getName", "org.eclipse.jface.preference.IPreferenceStore.setValue"], "call_func_parameter": [[""], [""], [""], ["java.lang.String", "boolean"]], "passed_comments": [{"org.autorefactor.AutoRefactorPlugin.getDefault": "Returns the shared instance."}]}, {"index": "945", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/AutoRefactorPlugin.java", "methodName": "org.autorefactor.AutoRefactorPlugin.getImageDescriptor", "methodParameterType": "String#", "methodParameterName": "path#", "methodBody": "public static ImageDescriptor getImageDescriptor(final String path) {\n        return imageDescriptorFromPlugin(PLUGIN_ID, path);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns an image descriptor for the image file at the given plug-in relative path.", "call_func_name": ["org.autorefactor.AutoRefactorPlugin.imageDescriptorFromPlugin"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "946", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorFix.java", "methodName": "org.autorefactor.ui.AutoRefactorFix.createCleanUp", "methodParameterType": "CompilationUnit#boolean#CleanUpOptions#", "methodParameterName": "compilationUnit#enabled#fOptions#", "methodBody": "public static ICleanUpFix createCleanUp(final CompilationUnit compilationUnit, final boolean enabled,\n            final CleanUpOptions fOptions) {\n        boolean hasChanges= false;\n        final ICompilationUnit iCompilationUnit= (ICompilationUnit) compilationUnit.getJavaElement();\n        final CleanUpChange cleanUpChange= new CleanUpChange(\"AutoRefactor\", iCompilationUnit); //$NON-NLS-1$\n        TextEdit allEdits= null;\n\n        if (enabled) {\n            final IJavaProject javaProject= PrepareApplyRefactoringsJob.getIJavaProject(iCompilationUnit);\n            final JavaProjectOptions options= new JavaProjectOptionsImpl(javaProject.getOptions(true));\n\n            final Environment environment= getEnvironment();\n            final List<RefactoringRule> refactoringRules= getConfiguredRefactoringRules(fOptions);\n            final SubMonitor loopMonitor= SubMonitor.convert(null, 1);\n            final Queue<RefactoringUnit> refactoringUnits= new ConcurrentLinkedQueue<>();\n            refactoringUnits.add(new RefactoringUnit(iCompilationUnit, options));\n\n            final ApplyRefactoringsJob applyRefactoringsJob= new ApplyRefactoringsJob(refactoringUnits,\n                    refactoringRules, environment);\n            final AggregateASTVisitor visitor= new AggregateASTVisitor(refactoringRules);\n            try {\n                List<TextEdit> textEdits= applyRefactoringsJob.applyRefactoring(iCompilationUnit, visitor, options,\n                        loopMonitor, false);\n\n                for (TextEdit textEdit : textEdits) {\n                    if (hasChanges) {\n                        allEdits= TextEditUtil.merge(allEdits, textEdit);\n                    } else {\n                        hasChanges= true;\n                        allEdits= textEdit;\n                    }\n                }\n            } catch (Exception e) {\n                if (!hasChanges) {\n                    return null;\n                }\n            }\n        }\n\n        if (!hasChanges) {\n            return null;\n        }\n\n        cleanUpChange.setEdit(allEdits);\n        AutoRefactorFix autoRefactorFix= new AutoRefactorFix();\n        autoRefactorFix.cleanUpChange= cleanUpChange;\n        return autoRefactorFix;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#PrefixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create the clean up.", "call_func_name": ["org.eclipse.jdt.core.dom.CompilationUnit.getJavaElement", "org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.getIJavaProject", "org.eclipse.jdt.core.IJavaProject.getOptions", "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptionsImpl.<init>", "org.autorefactor.AutoRefactorPlugin.getEnvironment", "org.autorefactor.ui.AutoRefactorFix.getConfiguredRefactoringRules", "org.eclipse.core.runtime.SubMonitor.convert", "java.util.concurrent.ConcurrentLinkedQueue.<init>", "org.autorefactor.jdt.internal.corext.dom.RefactoringUnit.<init>", "java.util.Queue.add", "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.<init>", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor.<init>", "org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.applyRefactoring", "java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jdt.internal.corext.refactoring.util.TextEditUtil.merge", "java.util.Iterator.hasNext", "org.autorefactor.ui.AutoRefactorFix.<init>"], "call_func_parameter": [[""], ["org.eclipse.jdt.core.IJavaElement"], ["boolean"], ["java.util.Map"], [""], ["org.eclipse.jdt.ui.cleanup.CleanUpOptions"], ["org.eclipse.core.runtime.IProgressMonitor", "int"], [""], ["org.eclipse.jdt.core.ICompilationUnit", "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions"], ["java.lang.Object"], ["java.util.Queue", "java.util.List", "org.autorefactor.environment.Environment"], ["java.util.List"], ["org.eclipse.jdt.core.ICompilationUnit", "org.autorefactor.jdt.internal.ui.fix.AggregateASTVisitor", "org.autorefactor.jdt.internal.corext.dom.JavaProjectOptions", "org.eclipse.core.runtime.SubMonitor", "boolean"], [""], [""], ["org.eclipse.text.edits.TextEdit", "org.eclipse.text.edits.TextEdit"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.getIJavaProject": "getIJavaProject."}, {"org.autorefactor.AutoRefactorPlugin.getEnvironment": "Returns the environment."}, {"org.autorefactor.ui.AutoRefactorFix.getConfiguredRefactoringRules": "Returns the cleanup rules which have been enabled from the Eclipse preferences."}, {"org.autorefactor.jdt.internal.corext.dom.ApplyRefactoringsJob.applyRefactoring": "Applies the cleanups provided inside the  {@link AggregateASTVisitor} tothe provided  {@link ICompilationUnit}."}]}, {"index": "947", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorFix.java", "methodName": "org.autorefactor.ui.AutoRefactorFix.getConfiguredRefactoringRules", "methodParameterType": "CleanUpOptions#", "methodParameterName": "options#", "methodBody": "public static List<RefactoringRule> getConfiguredRefactoringRules(final CleanUpOptions options) {\n        final List<RefactoringRule> refactorings= AllCleanUpRules.getAllCleanUpRules();\n        for (final Iterator<RefactoringRule> iter= refactorings.iterator(); iter.hasNext();) {\n            final RefactoringRule refactoring= iter.next();\n            final String cleanupPropertyName= AutoRefactorTabPage.getCleanupPropertyName(refactoring);\n\n            if (!AutoRefactorPlugin.getDefault().getPreferenceStore().contains(cleanupPropertyName)\n                    || !CleanUpOptions.TRUE.equals(\n                            AutoRefactorPlugin.getDefault().getPreferenceStore().getString(cleanupPropertyName))) {\n                iter.remove();\n            }\n        }\n\n        return refactorings;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(PrefixExpression(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cleanup rules which have been enabled from the Eclipse preferences.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getAllCleanUpRules", "java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.ui.AutoRefactorTabPage.getCleanupPropertyName", "org.autorefactor.AutoRefactorPlugin.getDefault", "org.autorefactor.AutoRefactorPlugin.getPreferenceStore", "org.eclipse.jface.preference.IPreferenceStore.contains", "org.eclipse.jface.preference.IPreferenceStore.getString", "java.lang.String.equals", "java.util.Iterator.remove", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], [""], ["org.autorefactor.jdt.internal.corext.dom.RefactoringRule"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.Object"], [""], [""]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getAllCleanUpRules": "Returns all the available cleanup rules."}, {"org.autorefactor.ui.AutoRefactorTabPage.getCleanupPropertyName": "Get the cleanup property name."}, {"org.autorefactor.AutoRefactorPlugin.getDefault": "Returns the shared instance."}]}, {"index": "948", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorFix.java", "methodName": "org.autorefactor.ui.AutoRefactorFix.createChange", "methodParameterType": "IProgressMonitor#", "methodParameterName": "progressMonitor#", "methodBody": "public CleanUpChange createChange(final IProgressMonitor progressMonitor) throws CoreException {\n        return cleanUpChange;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create the change.", "call_func_name": ["org.autorefactor.ui.AutoRefactorFix.createChange"], "call_func_parameter": [["org.eclipse.core.runtime.IProgressMonitor"]], "passed_comments": [{"org.autorefactor.ui.AutoRefactorFix.createChange": "Create the change."}]}, {"index": "949", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorSaveActionOptionsInitializer.java", "methodName": "org.autorefactor.ui.AutoRefactorSaveActionOptionsInitializer.setDefaultOptions", "methodParameterType": "CleanUpOptions#", "methodParameterName": "options#", "methodBody": "public void setDefaultOptions(CleanUpOptions options) {\n        options.setOption(\"org.autorefactor.ui.autorefactor_clean_up\", CleanUpOptions.FALSE); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the Default Options.", "call_func_name": ["org.eclipse.jdt.ui.cleanup.CleanUpOptions.setOption"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "950", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/ChooseRefactoringsWizardHandler.java", "methodName": "org.autorefactor.ui.ChooseRefactoringsWizardHandler.execute", "methodParameterType": "ExecutionEvent#", "methodParameterName": "event#", "methodBody": "public Object execute(final ExecutionEvent event) throws ExecutionException {\n        final Shell shell= HandlerUtil.getActiveShell(event);\n        try {\n            // Retrieve the targeted java element before the menu item is disposed by the\n            // framework\n            final Wizard wizard= new ChooseRefactoringsWizard(AutoRefactorHandler.getSelectedJavaElements(event));\n            final WizardDialog dialog= new WizardDialog(shell, wizard);\n            dialog.open();\n        } catch (final Exception e) {\n            Display.getDefault().asyncExec(new Runnable() {\n                /**\n                 * Run.\n                 */\n                public void run() {\n                    final StringWriter sw= new StringWriter();\n                    final PrintWriter pw= new PrintWriter(sw);\n                    e.printStackTrace(pw);\n\n                    openInformation(shell, \"Info\", \"An error has occurred:\\n\\n\" + sw); //$NON-NLS-1$ //$NON-NLS-2$\n                }\n            });\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Execute.", "call_func_name": ["org.eclipse.ui.handlers.HandlerUtil.getActiveShell", "org.autorefactor.ui.AutoRefactorHandler.getSelectedJavaElements", "org.autorefactor.ui.ChooseRefactoringsWizard.<init>", "org.eclipse.jface.wizard.WizardDialog.<init>", "org.eclipse.jface.wizard.WizardDialog.open", "org.eclipse.swt.widgets.Display.getDefault", "org.eclipse.swt.widgets.Display.asyncExec"], "call_func_parameter": [["org.eclipse.core.commands.ExecutionEvent"], ["org.eclipse.core.commands.ExecutionEvent"], ["java.util.List"], ["org.eclipse.swt.widgets.Shell", "org.eclipse.jface.wizard.IWizard"], [""], [""], ["java.lang.Runnable"]], "passed_comments": "/"}, {"index": "951", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorOptionsInitializer.java", "methodName": "org.autorefactor.ui.AutoRefactorOptionsInitializer.setDefaultOptions", "methodParameterType": "CleanUpOptions#", "methodParameterName": "options#", "methodBody": "public void setDefaultOptions(CleanUpOptions options) {\n        options.setOption(\"org.autorefactor.ui.autorefactor_clean_up\", CleanUpOptions.TRUE); //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the Default Options.", "call_func_name": ["org.eclipse.jdt.ui.cleanup.CleanUpOptions.setOption"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "952", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorHandler.java", "methodName": "org.autorefactor.ui.AutoRefactorHandler.execute", "methodParameterType": "ExecutionEvent#", "methodParameterName": "event#", "methodBody": "public Object execute(final ExecutionEvent event) throws ExecutionException {\n        try {\n            Environment environment= getEnvironment();\n            new PrepareApplyRefactoringsJob(getSelectedJavaElements(event),\n                    AllCleanUpRules.getConfiguredRefactoringRules(environment.getPreferences()), environment)\n                            .schedule();\n        } catch (Exception e) {\n            final Shell shell= HandlerUtil.getActiveShell(event);\n\n            StringWriter sw= new StringWriter();\n            PrintWriter pw= new PrintWriter(sw);\n            e.printStackTrace(pw);\n\n            showMessage(shell, \"An error has occurred:\\n\\n\" + sw); //$NON-NLS-1$\n        }\n\n        // TODO JNR provide a maven plugin\n        // TODO JNR provide a gradle plugin\n        // TODO JNR provide an ant task\n        // @see http://stackoverflow.com/questions/2113865/jdt-without-eclipse\n\n        // TODO JNR provide from the UI the ability to execute groovy (other\n        // scripts? rhino?) scripts for cleanup.\n\n        // <p> Extract method: Live variable analysis - READ WRITE variable analysis\n        // (including method params).\n        // If variable used in extracted method and WRITE first in selected text\n        // => do not pass it down as parameter\n        // Use ASTMatcher and do not compare content of expressions, compare just\n        // resolvedTypeBinding().\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Execute.", "call_func_name": ["org.autorefactor.AutoRefactorPlugin.getEnvironment", "org.autorefactor.ui.AutoRefactorHandler.getSelectedJavaElements", "org.autorefactor.environment.Environment.getPreferences", "org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getConfiguredRefactoringRules", "org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.<init>", "org.autorefactor.jdt.internal.corext.dom.PrepareApplyRefactoringsJob.schedule", "org.eclipse.ui.handlers.HandlerUtil.getActiveShell", "java.io.StringWriter.<init>", "java.io.PrintWriter.<init>", "java.lang.Exception.printStackTrace", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.autorefactor.ui.AutoRefactorHandler.showMessage"], "call_func_parameter": [[""], ["org.eclipse.core.commands.ExecutionEvent"], [""], ["org.autorefactor.preferences.Preferences"], ["java.util.List", "java.util.List", "org.autorefactor.environment.Environment"], [""], ["org.eclipse.core.commands.ExecutionEvent"], [""], ["java.io.Writer"], ["java.io.PrintWriter"], ["java.lang.String"], ["java.lang.Object"], [""], ["org.eclipse.swt.widgets.Shell", "java.lang.String"]], "passed_comments": [{"org.autorefactor.AutoRefactorPlugin.getEnvironment": "Returns the environment."}, {"org.autorefactor.environment.Environment.getPreferences": "Returns the preferences."}, {"org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getConfiguredRefactoringRules": "Returns the cleanup rules which have been enabled from the Eclipse preferences."}]}, {"index": "953", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.createContents", "methodParameterType": "Composite#", "methodParameterName": "parent#", "methodBody": "@Override\n    public Composite createContents(Composite parent) {\n        final List<RefactoringRule> allRefactoringRules= AllCleanUpRules.getAllCleanUpRules();\n        Collections.sort(allRefactoringRules, new Comparator<RefactoringRule>() {\n            /**\n             * Compare objects.\n             *\n             * @param o1 First item\n             * @param o2 Second item\n             *\n             * @return -1, 0 or 1\n             */\n            public int compare(final RefactoringRule o1, final RefactoringRule o2) {\n                return o1.getName().compareTo(o2.getName());\n            }\n        });\n\n        final Group ruleGroup= createControls(parent, allRefactoringRules);\n\n        initialize();\n        invalidateToggleRules(ruleGroup);\n\n        return fieldEditorParent;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create the contents.", "call_func_name": ["org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getAllCleanUpRules", "java.util.Collections.sort", "org.autorefactor.ui.AutoRefactorTabPage.createControls", "org.autorefactor.ui.AutoRefactorTabPage.initialize", "org.autorefactor.ui.AutoRefactorTabPage.invalidateToggleRules"], "call_func_parameter": [[""], ["java.util.List", "java.util.Comparator"], ["org.eclipse.swt.widgets.Composite", "java.util.List"], [""], ["org.eclipse.swt.widgets.Composite"]], "passed_comments": [{"org.autorefactor.jdt.internal.ui.fix.AllCleanUpRules.getAllCleanUpRules": "Returns all the available cleanup rules."}, {"org.autorefactor.ui.AutoRefactorTabPage.initialize": "Initialize."}]}, {"index": "954", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.initFields", "methodParameterType": "List<RefactoringRule>#", "methodParameterName": "allRefactoringRules#", "methodBody": "protected void initFields(final List<RefactoringRule> allRefactoringRules) {\n        fields= new ArrayList<>(allRefactoringRules.size());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize the fields.", "call_func_name": ["java.util.List.size", "java.util.ArrayList.<init>"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "955", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void initialize() {\n        if (fields != null) {\n            for (FieldEditor field : fields) {\n                field.setPreferenceStore(AutoRefactorPlugin.getDefault().getPreferenceStore());\n                field.load();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Initialize.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.next", "org.autorefactor.AutoRefactorPlugin.getDefault", "org.autorefactor.AutoRefactorPlugin.getPreferenceStore", "org.eclipse.jface.preference.FieldEditor.setPreferenceStore", "org.eclipse.jface.preference.FieldEditor.load", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], [""], [""], ["org.eclipse.jface.preference.IPreferenceStore"], [""], [""]], "passed_comments": [{"org.autorefactor.AutoRefactorPlugin.getDefault": "Returns the shared instance."}]}, {"index": "956", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.getCleanUpCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int getCleanUpCount() {\n        if (fields != null) {\n            return fields.size();\n        }\n\n        return 0;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the clean up count.", "call_func_name": ["java.util.List.size"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "957", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.getPreview", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getPreview() {\n        return \"// no preview\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the preview.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "958", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.getSelectedCleanUpCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public int getSelectedCleanUpCount() {\n        int selectedCleanups= 0;\n\n        if (fields != null) {\n            for (FieldEditor field : fields) {\n                if (((BooleanFieldEditor) field).getBooleanValue()) {\n                    selectedCleanups++;\n                }\n            }\n        }\n\n        return selectedCleanups;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the selected clean up count.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jface.preference.BooleanFieldEditor.getBooleanValue", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], [""], [""]], "passed_comments": "/"}, {"index": "959", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.setOptions", "methodParameterType": "CleanUpOptions#", "methodParameterName": "options#", "methodBody": "public void setOptions(CleanUpOptions options) {\n        if (fields != null) {\n            for (FieldEditor field : fields) {\n                final String isPreferenceEnabled= ((BooleanFieldEditor) field).getBooleanValue() ? CleanUpOptions.TRUE\n                        : CleanUpOptions.FALSE;\n\n                options.setOption(field.getPreferenceName(), isPreferenceEnabled);\n                field.getPreferenceStore().setValue(field.getPreferenceName(), isPreferenceEnabled);\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the options.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jface.preference.BooleanFieldEditor.getBooleanValue", "org.eclipse.jface.preference.FieldEditor.getPreferenceName", "org.eclipse.jdt.ui.cleanup.CleanUpOptions.setOption", "org.eclipse.jface.preference.FieldEditor.getPreferenceStore", "org.eclipse.jface.preference.IPreferenceStore.setValue", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "960", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.getPropertyName", "methodParameterType": "RefactoringRule#", "methodParameterName": "refactoringRule#", "methodBody": "public String getPropertyName(final RefactoringRule refactoringRule) {\n        return getCleanupPropertyName(refactoringRule);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the property name.", "call_func_name": ["org.autorefactor.ui.AutoRefactorTabPage.getCleanupPropertyName"], "call_func_parameter": [["org.autorefactor.jdt.internal.corext.dom.RefactoringRule"]], "passed_comments": [{"org.autorefactor.ui.AutoRefactorTabPage.getCleanupPropertyName": "Get the cleanup property name."}]}, {"index": "961", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorTabPage.java", "methodName": "org.autorefactor.ui.AutoRefactorTabPage.getCleanupPropertyName", "methodParameterType": "RefactoringRule#", "methodParameterName": "refactoringRule#", "methodBody": "public static String getCleanupPropertyName(final RefactoringRule refactoringRule) {\n        return refactoringRule.getClass().getCanonicalName() + \":cleanup\"; //$NON-NLS-1$\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the cleanup property name.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getCanonicalName", "java.lang.String.valueOf", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], [""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "962", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/EclipsePreferences.java", "methodName": "org.autorefactor.ui.preferences.EclipsePreferences.EclipsePreferences", "methodParameterType": "IPreferenceStore#", "methodParameterName": "preferenceStore#", "methodBody": "public EclipsePreferences(IPreferenceStore preferenceStore) {\n        this.preferenceStore= preferenceStore;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "963", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/EclipsePreferences.java", "methodName": "org.autorefactor.ui.preferences.EclipsePreferences.debugModeOn", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean debugModeOn() {\n        return getBoolean(DEBUG_MODE_ON);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if debug mode is on.", "call_func_name": ["org.autorefactor.ui.preferences.EclipsePreferences.getBoolean"], "call_func_parameter": [["org.autorefactor.preferences.PreferenceConstants"]], "passed_comments": "/"}, {"index": "964", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/EclipsePreferences.java", "methodName": "org.autorefactor.ui.preferences.EclipsePreferences.isEnabled", "methodParameterType": "Class<? extends AbstractCleanUpRule>#", "methodParameterName": "clazz#", "methodBody": "public boolean isEnabled(Class<? extends AbstractCleanUpRule> clazz) {\n        return preferenceStore.getBoolean(clazz.getCanonicalName());\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True if it is enabled.", "call_func_name": ["java.lang.Class.getCanonicalName", "org.eclipse.jface.preference.IPreferenceStore.getBoolean"], "call_func_parameter": [[""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "965", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/WorkspacePreferencePage.java", "methodName": "org.autorefactor.ui.preferences.WorkspacePreferencePage.WorkspacePreferencePage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public WorkspacePreferencePage() {\n        super(\"AutoRefactor workbench preferences\"); //$NON-NLS-1$\n        setPreferenceStore(AutoRefactorPlugin.getDefault().getPreferenceStore());\n    }", "AST": "Javadoc#Modifier#SimpleName#StringLiteral#SuperConstructorInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation(StringLiteral)StringLiteral)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Default constructor.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "966", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/WorkspacePreferencePage.java", "methodName": "org.autorefactor.ui.preferences.WorkspacePreferencePage.getPropertyName", "methodParameterType": "RefactoringRule#", "methodParameterName": "refactoringRule#", "methodBody": "public String getPropertyName(final RefactoringRule refactoringRule) {\n        return refactoringRule.getClass().getCanonicalName();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the property name.", "call_func_name": ["java.lang.Object.getClass", "java.lang.Class.getCanonicalName"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "967", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/WorkspacePreferencePage.java", "methodName": "org.autorefactor.ui.preferences.WorkspacePreferencePage.init", "methodParameterType": "IWorkbench#", "methodParameterName": "workbench#", "methodBody": "public void init(IWorkbench workbench) {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Initialization.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "968", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/WorkspacePreferencePage.java", "methodName": "org.autorefactor.ui.preferences.WorkspacePreferencePage.initFields", "methodParameterType": "List<RefactoringRule>#", "methodParameterName": "allRefactoringRules#", "methodBody": "protected void initFields(final List<RefactoringRule> allRefactoringRules) {\n        fields= new ArrayList<>(1 + allRefactoringRules.size());\n\n        fields.add(new BooleanFieldEditor(DEBUG_MODE_ON.getName(), DEBUG_MODE_ON.getDescription(), fieldEditorParent));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#NumberLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize the fields.", "call_func_name": ["java.util.List.size", "java.util.ArrayList.<init>", "org.autorefactor.preferences.PreferenceConstants.getName", "org.autorefactor.preferences.PreferenceConstants.getDescription", "org.eclipse.jface.preference.BooleanFieldEditor.<init>", "java.util.List.add"], "call_func_parameter": [[""], ["int"], [""], [""], ["java.lang.String", "java.lang.String", "org.eclipse.swt.widgets.Composite"], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "969", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/WorkspacePreferencePage.java", "methodName": "org.autorefactor.ui.preferences.WorkspacePreferencePage.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void initialize() {\n        if (fields != null) {\n            for (FieldEditor field : fields) {\n                field.setPage(this);\n                field.setPreferenceStore(getPreferenceStore());\n                field.load();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Initialize.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jface.preference.FieldEditor.setPage", "org.autorefactor.ui.preferences.WorkspacePreferencePage.getPreferenceStore", "org.eclipse.jface.preference.FieldEditor.setPreferenceStore", "org.eclipse.jface.preference.FieldEditor.load", "java.util.Iterator.hasNext"], "call_func_parameter": [[""], [""], ["org.eclipse.jface.dialogs.DialogPage"], [""], ["org.eclipse.jface.preference.IPreferenceStore"], [""], [""]], "passed_comments": "/"}, {"index": "970", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/preferences/WorkspacePreferencePage.java", "methodName": "org.autorefactor.ui.preferences.WorkspacePreferencePage.checkState", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected void checkState() {\n        boolean valid= true;\n        invalidFieldEditor= null;\n\n        if (fields != null) {\n            for (FieldEditor field : fields) {\n                valid= field.isValid();\n                if (!valid) {\n                    invalidFieldEditor= field;\n                    break;\n                }\n            }\n        }\n        setValid(valid);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Check the state.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.next", "org.eclipse.jface.preference.FieldEditor.isValid", "java.util.Iterator.hasNext", "org.autorefactor.ui.preferences.WorkspacePreferencePage.setValid"], "call_func_parameter": [[""], [""], [""], [""], ["boolean"]], "passed_comments": "/"}, {"index": "971", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/DisplayEventLoop.java", "methodName": "org.autorefactor.ui.DisplayEventLoop.syncExec", "methodParameterType": "Callable<E>#", "methodParameterName": "call#", "methodBody": "public <E extends Exception> void syncExec(final Callable<E> call) throws E {\n        final FutureTask<E> future= new FutureTask<E>(call);\n        Display.getDefault().syncExec(future);\n        final E ex;\n        try {\n            ex= future.get();\n        } catch (ExecutionException e) {\n            throw new UnhandledException(null, e.getCause());\n        } catch (Exception e) {\n            throw new UnhandledException(null, e);\n        }\n        if (ex != null) {\n            throw ex;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#TypeParameter#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(SimpleName)SimpleName)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Calls the  {@link Callable#call()} method of the callable to be invoked by theevent loop at the next reasonable opportunity.", "call_func_name": ["java.util.concurrent.FutureTask.<init>", "org.eclipse.swt.widgets.Display.getDefault", "org.eclipse.swt.widgets.Display.syncExec", "java.util.concurrent.FutureTask.get", "java.util.concurrent.ExecutionException.getCause", "org.autorefactor.util.UnhandledException.<init>"], "call_func_parameter": [["java.util.concurrent.Callable"], [""], ["java.lang.Runnable"], [""], [""], ["org.eclipse.jdt.core.dom.ASTNode", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "972", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/ChooseRefactoringsWizard.java", "methodName": "org.autorefactor.ui.ChooseRefactoringsWizard.ChooseRefactoringsWizard", "methodParameterType": "List<IJavaElement>#", "methodParameterName": "javaElements#", "methodBody": "public ChooseRefactoringsWizard(List<IJavaElement> javaElements) {\n        setNeedsProgressMonitor(true);\n        this.javaElements= javaElements;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Builds an instance of this class, with the provided java element.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "973", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorCleanUp.java", "methodName": "org.autorefactor.ui.AutoRefactorCleanUp.createFix", "methodParameterType": "CleanUpContext#", "methodParameterName": "context#", "methodBody": "public ICleanUpFix createFix(CleanUpContext context) throws CoreException {\n        CompilationUnit compilationUnit= context.getAST();\n        if (compilationUnit != null && fOptions.isEnabled(KEY)) {\n            return AutoRefactorFix.createCleanUp(compilationUnit, fOptions.isEnabled(KEY), fOptions);\n        }\n\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create the fix.", "call_func_name": ["org.eclipse.jdt.ui.cleanup.CleanUpContext.getAST", "org.eclipse.jdt.ui.cleanup.CleanUpOptions.isEnabled", "org.autorefactor.ui.AutoRefactorFix.createCleanUp"], "call_func_parameter": [[""], ["java.lang.String"], ["org.eclipse.jdt.core.dom.CompilationUnit", "boolean", "org.eclipse.jdt.ui.cleanup.CleanUpOptions"]], "passed_comments": [{"org.autorefactor.ui.AutoRefactorFix.createCleanUp": "Create the clean up."}]}, {"index": "974", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorCleanUp.java", "methodName": "org.autorefactor.ui.AutoRefactorCleanUp.getRequirements", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public CleanUpRequirements getRequirements() {\n        return new CleanUpRequirements(true, true, true, new HashMap<String, String>());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#BooleanLiteral#BooleanLiteral#BooleanLiteral#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the requirements.", "call_func_name": ["java.util.HashMap.<init>", "org.eclipse.jdt.ui.cleanup.CleanUpRequirements.<init>"], "call_func_parameter": [[""], ["boolean", "boolean", "boolean", "java.util.Map"]], "passed_comments": "/"}, {"index": "975", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorCleanUp.java", "methodName": "org.autorefactor.ui.AutoRefactorCleanUp.getStepDescriptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String[] getStepDescriptions() {\n        if (fOptions.isEnabled(KEY)) {\n            return new String[] { \"AutoRefactor (only 1 pass)\" }; //$NON-NLS-1$\n        } else {\n            return new String[0];\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#Dimension#ArrayType#StringLiteral#ArrayInitializer#ArrayCreation#ReturnStatement#Block#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(StringLiteral)StringLiteral)ArrayInitializer)ArrayCreation)ReturnStatement)Block(Block(ReturnStatement(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Get the step descriptions.", "call_func_name": ["org.eclipse.jdt.ui.cleanup.CleanUpOptions.isEnabled"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "976", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorCleanUp.java", "methodName": "org.autorefactor.ui.AutoRefactorCleanUp.setOptions", "methodParameterType": "CleanUpOptions#", "methodParameterName": "options#", "methodBody": "public void setOptions(CleanUpOptions options) {\n        Assert.isLegal(options != null);\n        Assert.isTrue(fOptions == null);\n        fOptions= options;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the options.", "call_func_name": ["org.eclipse.core.runtime.Assert.isLegal", "org.eclipse.core.runtime.Assert.isTrue"], "call_func_parameter": [["boolean"], ["boolean"]], "passed_comments": "/"}, {"index": "977", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorCleanUp.java", "methodName": "org.autorefactor.ui.AutoRefactorCleanUp.checkPreConditions", "methodParameterType": "IJavaProject#ICompilationUnit[]#IProgressMonitor#", "methodParameterName": "project#compilationUnits#monitor#", "methodBody": "public RefactoringStatus checkPreConditions(IJavaProject project, ICompilationUnit[] compilationUnits,\n            IProgressMonitor monitor) throws CoreException {\n        if (fOptions.isEnabled(KEY)) {\n            fStatus= new RefactoringStatus();\n        }\n\n        return new RefactoringStatus();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Check the pre-conditions.", "call_func_name": ["org.eclipse.jdt.ui.cleanup.CleanUpOptions.isEnabled", "org.eclipse.ltk.core.refactoring.RefactoringStatus.<init>"], "call_func_parameter": [["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "978", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/AutoRefactorCleanUp.java", "methodName": "org.autorefactor.ui.AutoRefactorCleanUp.checkPostConditions", "methodParameterType": "IProgressMonitor#", "methodParameterName": "monitor#", "methodBody": "public RefactoringStatus checkPostConditions(IProgressMonitor monitor) throws CoreException {\n        try {\n            if (fStatus == null || fStatus.isOK()) {\n                return new RefactoringStatus();\n            } else {\n                return fStatus;\n            }\n        } finally {\n            fStatus= null;\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#SimpleName#ReturnStatement#Block#IfStatement#Block#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Check the post-conditions.", "call_func_name": ["org.eclipse.ltk.core.refactoring.RefactoringStatus.isOK", "org.eclipse.ltk.core.refactoring.RefactoringStatus.<init>"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "979", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/ChooseRefactoringWizardPage.java", "methodName": "org.autorefactor.ui.ChooseRefactoringWizardPage.getSelectedRefactorings", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public List<RefactoringRule> getSelectedRefactorings() {\n        final List<RefactoringRule> results= new ArrayList<>();\n        for (Object o : tableViewer.getCheckedElements()) {\n            results.add((RefactoringRule) o);\n        }\n\n        return results;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the cleanups (selected by the user) to apply to the selected elements.", "call_func_name": ["java.util.ArrayList.<init>", "org.eclipse.jface.viewers.CheckboxTableViewer.getCheckedElements", "java.util.List.add"], "call_func_parameter": [[""], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "980", "file": "/root/repos/repos34/AutoRefactor/plugin.ui/src/main/java/org/autorefactor/ui/ChooseRefactoringWizardPage.java", "methodName": "org.autorefactor.ui.ChooseRefactoringWizardPage.createControl", "methodParameterType": "Composite#", "methodParameterName": "parent#", "methodBody": "public void createControl(Composite parent) {\n        parent.setLayout(new GridLayout());\n\n        createFilterText(parent);\n        createSelectAllCheckbox(parent);\n        createRefactoringsTable(parent);\n\n        // Required to avoid an error in the system\n        setControl(parent);\n        // Allows to click the \"Finish\" button\n        setPageComplete(true);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "create the control.", "call_func_name": ["org.eclipse.swt.layout.GridLayout.<init>", "org.eclipse.swt.widgets.Composite.setLayout", "org.autorefactor.ui.ChooseRefactoringWizardPage.createFilterText", "org.autorefactor.ui.ChooseRefactoringWizardPage.createSelectAllCheckbox", "org.autorefactor.ui.ChooseRefactoringWizardPage.createRefactoringsTable", "org.autorefactor.ui.ChooseRefactoringWizardPage.setControl", "org.autorefactor.ui.ChooseRefactoringWizardPage.setPageComplete"], "call_func_parameter": [[""], ["org.eclipse.swt.widgets.Layout"], ["org.eclipse.swt.widgets.Composite"], ["org.eclipse.swt.widgets.Composite"], ["org.eclipse.swt.widgets.Composite"], ["org.eclipse.swt.widgets.Control"], ["boolean"]], "passed_comments": "/"}]