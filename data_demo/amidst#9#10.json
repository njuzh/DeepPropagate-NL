[{"index": "0", "file": "/root/repos/repos14/amidst/src/main/java/amidst/threading/TaskQueue.java", "methodName": "amidst.threading.TaskQueue.processTasks", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean processTasks() {\n\t\tboolean result = false;\n\t\tRunnable task;\n\t\twhile ((task = tasks.poll()) != null) {\n\t\t\tresult = true;\n\t\t\ttask.run();\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Executes all tasks. Returns true, if at least one task was executed.", "call_func_name": ["java.util.concurrent.ConcurrentLinkedQueue.poll", "java.lang.Runnable.run"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/layer/LayerBuilder.java", "methodName": "amidst.fragment.layer.LayerBuilder.createConstructors", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private Iterable<FragmentConstructor> createConstructors() {\n\t\treturn Collections.unmodifiableList(\n\t\t\t\tArrays.asList(\n\t\t\t\t\t\tnew BiomeDataConstructor(Resolution.QUARTER),\n\t\t\t\t\t\tnew EndIslandsConstructor(),\n\t\t\t\t\t\tnew ImageConstructor(Resolution.QUARTER, LayerIds.BACKGROUND),\n\t\t\t\t\t\tnew ImageConstructor(Resolution.CHUNK, LayerIds.SLIME)));\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This also defines the construction order.", "call_func_name": ["amidst.fragment.constructor.BiomeDataConstructor.<init>", "amidst.fragment.constructor.EndIslandsConstructor.<init>", "amidst.fragment.constructor.ImageConstructor.<init>", "java.util.Arrays.asList", "java.util.Collections.unmodifiableList"], "call_func_parameter": [["amidst.mojangapi.world.coordinates.Resolution"], [""], ["amidst.mojangapi.world.coordinates.Resolution", "int"], ["java.lang.Object[]"], ["java.util.List"]], "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/layer/LayerBuilder.java", "methodName": "amidst.fragment.layer.LayerBuilder.createLoaders", "methodParameterType": "List<LayerDeclaration>#World#BiomeSelection#AmidstSettings#", "methodParameterName": "declarations#world#biomeSelection#settings#", "methodBody": "private Iterable<FragmentLoader> createLoaders(\n\t\t\tList<LayerDeclaration> declarations,\n\t\t\tWorld world,\n\t\t\tBiomeSelection biomeSelection,\n\t\t\tAmidstSettings settings) {\n\t\t// @formatter:off\n\t\treturn Collections.unmodifiableList(Arrays.asList(\n\t\t\t\tnew AlphaInitializer( declarations.get(LayerIds.ALPHA),           settings.fragmentFading),\n\t\t\t\tnew BiomeDataLoader(  declarations.get(LayerIds.BIOME_DATA),      world.getBiomeDataOracle()),\n\t\t\t\tnew EndIslandsLoader( declarations.get(LayerIds.END_ISLANDS),     world.getEndIslandOracle()),\n\t\t\t\tnew ImageLoader(\t  declarations.get(LayerIds.BACKGROUND),      Resolution.QUARTER, new BackgroundColorProvider(new BiomeColorProvider(biomeSelection, settings.biomeProfileSelection), new TheEndColorProvider())),\n\t\t\t\tnew ImageLoader(      declarations.get(LayerIds.SLIME),           Resolution.CHUNK,   new SlimeColorProvider(world.getSlimeChunkOracle())),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.SPAWN),           world.getSpawnProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.STRONGHOLD),      world.getStrongholdProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.PLAYER),          world.getPlayerProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.VILLAGE),         world.getVillageProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.TEMPLE),          world.getTempleProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.MINESHAFT),       world.getMineshaftProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.OCEAN_MONUMENT),  world.getOceanMonumentProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.WOODLAND_MANSION),world.getWoodlandMansionProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.OCEAN_FEATURES),  world.getOceanFeaturesProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.NETHER_FORTRESS), world.getNetherFortressProducer()),\n\t\t\t\tnew WorldIconLoader<>(declarations.get(LayerIds.END_CITY),        world.getEndCityProducer(), Fragment::getEndIslands)\n\t\t));\n\t\t// @formatter:on\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ClassInstanceCreation#SimpleName#SimpleType#ClassInstanceCreation#ClassInstanceCreation#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ExpressionMethodReference#ClassInstanceCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ClassInstanceCreation)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)ClassInstanceCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This also defines the loading and reloading order.", "call_func_name": ["java.util.List.get", "amidst.fragment.loader.AlphaInitializer.<init>", "amidst.mojangapi.world.World.getBiomeDataOracle", "amidst.fragment.loader.BiomeDataLoader.<init>", "amidst.mojangapi.world.World.getEndIslandOracle", "amidst.fragment.loader.EndIslandsLoader.<init>", "amidst.fragment.colorprovider.BiomeColorProvider.<init>", "amidst.fragment.colorprovider.TheEndColorProvider.<init>", "amidst.fragment.colorprovider.BackgroundColorProvider.<init>", "amidst.fragment.loader.ImageLoader.<init>", "amidst.mojangapi.world.World.getSlimeChunkOracle", "amidst.fragment.colorprovider.SlimeColorProvider.<init>", "amidst.mojangapi.world.World.getSpawnProducer", "amidst.fragment.loader.WorldIconLoader.<init>", "amidst.mojangapi.world.World.getStrongholdProducer", "amidst.mojangapi.world.World.getPlayerProducer", "amidst.mojangapi.world.World.getVillageProducer", "amidst.mojangapi.world.World.getTempleProducer", "amidst.mojangapi.world.World.getMineshaftProducer", "amidst.mojangapi.world.World.getOceanMonumentProducer", "amidst.mojangapi.world.World.getWoodlandMansionProducer", "amidst.mojangapi.world.World.getOceanFeaturesProducer", "amidst.mojangapi.world.World.getNetherFortressProducer", "amidst.mojangapi.world.World.getEndCityProducer", "java.util.function.Function.apply", "amidst.fragment.loader.WorldIconLoader.<init>", "java.util.Arrays.asList", "java.util.Collections.unmodifiableList"], "call_func_parameter": [["int"], ["amidst.fragment.layer.LayerDeclaration", "amidst.settings.Setting"], [""], ["amidst.fragment.layer.LayerDeclaration", "amidst.mojangapi.world.oracle.BiomeDataOracle"], [""], ["amidst.fragment.layer.LayerDeclaration", "amidst.mojangapi.world.oracle.EndIslandOracle"], ["amidst.gui.main.viewer.BiomeSelection", "amidst.settings.biomeprofile.BiomeProfileSelection"], [""], ["amidst.fragment.colorprovider.BiomeColorProvider", "amidst.fragment.colorprovider.TheEndColorProvider"], ["amidst.fragment.layer.LayerDeclaration", "amidst.mojangapi.world.coordinates.Resolution", "amidst.fragment.colorprovider.ColorProvider"], [""], ["amidst.mojangapi.world.oracle.SlimeChunkOracle"], [""], ["amidst.fragment.layer.LayerDeclaration", "amidst.mojangapi.world.icon.producer.WorldIconProducer"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], ["amidst.fragment.layer.LayerDeclaration", "amidst.mojangapi.world.icon.producer.WorldIconProducer", "java.util.function.Function"], ["java.lang.Object[]"], ["java.util.List"]], "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/layer/LayerBuilder.java", "methodName": "amidst.fragment.layer.LayerBuilder.createDrawers", "methodParameterType": "List<LayerDeclaration>#Zoom#WorldIconSelection#Graphics2DAccelerationCounter#", "methodParameterName": "declarations#zoom#worldIconSelection#accelerationCounter#", "methodBody": "private Iterable<FragmentDrawer> createDrawers(\n\t\t\tList<LayerDeclaration> declarations,\n\t\t\tZoom zoom,\n\t\t\tWorldIconSelection worldIconSelection,\n\t\t\tGraphics2DAccelerationCounter accelerationCounter) {\n\t\t// @formatter:off\n\t\treturn Collections.unmodifiableList(Arrays.asList(\n\t\t\t\tnew AlphaUpdater(   declarations.get(LayerIds.ALPHA)),\n\t\t\t\tnew ImageDrawer(    declarations.get(LayerIds.BACKGROUND),      Resolution.QUARTER, accelerationCounter),\n\t\t\t\tnew ImageDrawer(    declarations.get(LayerIds.SLIME),           Resolution.CHUNK,   accelerationCounter),\n\t\t\t\tnew GridDrawer(     declarations.get(LayerIds.GRID),            zoom),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.SPAWN),           zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.STRONGHOLD),      zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.PLAYER),          zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.VILLAGE),         zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.TEMPLE),          zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.MINESHAFT),       zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.OCEAN_MONUMENT),  zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.WOODLAND_MANSION),zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.OCEAN_FEATURES),  zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.NETHER_FORTRESS), zoom, worldIconSelection),\n\t\t\t\tnew WorldIconDrawer(declarations.get(LayerIds.END_CITY),        zoom, worldIconSelection)\n\t\t));\n\t\t// @formatter:on\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This also defines the rendering order.", "call_func_name": ["java.util.List.get", "amidst.fragment.drawer.AlphaUpdater.<init>", "amidst.fragment.drawer.ImageDrawer.<init>", "amidst.fragment.drawer.GridDrawer.<init>", "amidst.fragment.drawer.WorldIconDrawer.<init>", "java.util.Arrays.asList", "java.util.Collections.unmodifiableList"], "call_func_parameter": [["int"], ["amidst.fragment.layer.LayerDeclaration"], ["amidst.fragment.layer.LayerDeclaration", "amidst.mojangapi.world.coordinates.Resolution", "amidst.gui.main.viewer.Graphics2DAccelerationCounter"], ["amidst.fragment.layer.LayerDeclaration", "amidst.gui.main.viewer.Zoom"], ["amidst.fragment.layer.LayerDeclaration", "amidst.gui.main.viewer.Zoom", "amidst.gui.main.viewer.WorldIconSelection"], ["java.lang.Object[]"], ["java.util.List"]], "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/layer/LayerManager.java", "methodName": "amidst.fragment.layer.LayerManager.calculateIsEnabled", "methodParameterType": "int#Dimension#", "methodParameterName": "layerId#dimension#", "methodBody": "@CalledOnlyBy(AmidstThread.EDT)\n\tpublic boolean calculateIsEnabled(int layerId, Dimension dimension) {\n\t\treturn declarations.get(layerId).calculateIsEnabled(dimension);\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This should only be used by the layers menu.", "call_func_name": ["java.util.List.get", "amidst.fragment.layer.LayerDeclaration.calculateIsEnabled"], "call_func_parameter": [["int"], ["amidst.mojangapi.world.Dimension"]], "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/layer/LayerDeclaration.java", "methodName": "amidst.fragment.layer.LayerDeclaration.LayerDeclaration", "methodParameterType": "int#Dimension#boolean#boolean#Setting<Boolean>#", "methodParameterName": "layerId#dimension#drawUnloaded#isSupportedInCurrentVersion#isVisibleSetting#", "methodBody": "public LayerDeclaration(\n\t\t\tint layerId,\n\t\t\tDimension dimension,\n\t\t\tboolean drawUnloaded,\n\t\t\tboolean isSupportedInCurrentVersion,\n\t\t\tSetting<Boolean> isVisibleSetting) {\n\t\tthis.layerId = layerId;\n\t\tthis.dimension = dimension;\n\t\tthis.isDrawUnloaded = drawUnloaded;\n\t\tthis.isSupportedInCurrentVersion = isSupportedInCurrentVersion;\n\t\tthis.isVisibleSetting = isVisibleSetting;\n\t}", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param dimension Can be null to enable for all dimensions.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/layer/LayerDeclaration.java", "methodName": "amidst.fragment.layer.LayerDeclaration.update", "methodParameterType": "Dimension#", "methodParameterName": "dimension#", "methodBody": "@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER)\n\tpublic boolean update(Dimension dimension) {\n\t\tboolean isEnabled = calculateIsEnabled(dimension);\n\t\tboolean isVisible = isEnabled && isVisibleSetting.get();\n\t\tboolean reload = isVisible == true && this.isVisible == false;\n\t\tthis.isVisible = isVisible;\n\t\treturn reload;\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#InfixExpression#ThisExpression#SimpleName#FieldAccess#BooleanLiteral#InfixExpression#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)InfixExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(BooleanLiteral)BooleanLiteral)InfixExpression)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Updates the isVisible and isEnabled fields to the current setting values. Returns whether the layer becomes visible.", "call_func_name": ["amidst.fragment.layer.LayerDeclaration.calculateIsEnabled", "amidst.settings.Setting.get", "java.lang.Boolean.booleanValue"], "call_func_parameter": [["amidst.mojangapi.world.Dimension"], [""], [""]], "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/colorprovider/TheEndColorProvider.java", "methodName": "amidst.fragment.colorprovider.TheEndColorProvider.showRockyShores", "methodParameterType": "long#long#", "methodParameterName": "chunkX#chunkY#", "methodBody": "private boolean showRockyShores(long chunkX, long chunkY) {\n\t\treturn (chunkX * chunkX + chunkY * chunkY) > 4096;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if the chunk may contain miniature islands.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/colorprovider/TheEndColorProvider.java", "methodName": "amidst.fragment.colorprovider.TheEndColorProvider.getRockyShoresTextureAt", "methodParameterType": "int#int#", "methodParameterName": "textureX#textureY#", "methodBody": "private int getRockyShoresTextureAt(int textureX, int textureY) {\n\t\treturn TEXTURES.getRGB(textureX, textureY + TEXTURES_HEIGHT);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Unfortunately the \"rocky shore\" miniature islands are not deterministic from the world seed, like chorus plants they are decorations whose PRNG state depends on the order chunks are created/explored in. This makes me sad :( Let's use a symbolic texture, since we can't plot them properly.", "call_func_name": ["java.awt.image.BufferedImage.getRGB"], "call_func_parameter": [["int", "int"]], "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/FragmentGraphItem.java", "methodName": "amidst.fragment.FragmentGraphItem.adjustRowsAndColumns", "methodParameterType": "int#int#int#int#FragmentManager#", "methodParameterName": "newAbove#newBelow#newLeft#newRight#manager#", "methodBody": "@CalledOnlyBy(AmidstThread.EDT)\n\tpublic FragmentGraphItem adjustRowsAndColumns(\n\t\t\tint newAbove,\n\t\t\tint newBelow,\n\t\t\tint newLeft,\n\t\t\tint newRight,\n\t\t\tFragmentManager manager) {\n\t\tFragmentGraphItem firstColumn = getFirstColumn();\n\t\tFragmentGraphItem topLeft = firstColumn.getFirstRow();\n\t\ttopLeft = topLeft.createOrRemoveRowsAbove(manager, newAbove);\n\t\ttopLeft.getLastRow().createOrRemoveRowsBelow(manager, newBelow);\n\t\ttopLeft = topLeft.createOrRemoveColumnsLeft(manager, newLeft);\n\t\ttopLeft.getLastColumn().createOrRemoveColumnsRight(manager, newRight);\n\t\treturn topLeft;\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the new fragment in the top left corner, but never null.", "call_func_name": ["amidst.fragment.FragmentGraphItem.getFirstColumn", "amidst.fragment.FragmentGraphItem.getFirstRow", "amidst.fragment.FragmentGraphItem.createOrRemoveRowsAbove", "amidst.fragment.FragmentGraphItem.getLastRow", "amidst.fragment.FragmentGraphItem.createOrRemoveRowsBelow", "amidst.fragment.FragmentGraphItem.createOrRemoveColumnsLeft", "amidst.fragment.FragmentGraphItem.getLastColumn", "amidst.fragment.FragmentGraphItem.createOrRemoveColumnsRight"], "call_func_parameter": [[""], [""], ["amidst.fragment.FragmentManager", "int"], [""], ["amidst.fragment.FragmentManager", "int"], ["amidst.fragment.FragmentManager", "int"], [""], ["amidst.fragment.FragmentManager", "int"]], "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos14/amidst/src/main/java/amidst/fragment/FragmentQueueProcessor.java", "methodName": "amidst.fragment.FragmentQueueProcessor.processQueues", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CalledOnlyBy(AmidstThread.FRAGMENT_LOADER)\n\tpublic void processQueues() {\n\t\tDimension dimension = dimensionSetting.get();\n\t\tupdateLayerManager(dimension);\n\t\tprocessRecycleQueue();\n\t\tFragment fragment;\n\t\twhile ((fragment = loadingQueue.poll()) != null) {\n\t\t\tloadFragment(dimension, fragment);\n\t\t\tdimension = dimensionSetting.get();\n\t\t\tupdateLayerManager(dimension);\n\t\t\tprocessRecycleQueue();\n\t\t}\n\t\tlayerManager.clearInvalidatedLayers();\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ParenthesizedExpression#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(ParenthesizedExpression(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ParenthesizedExpression(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)WhileStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "It is important that the dimension setting is the same while a fragment is loaded by different fragment loaders. This is why the dimension setting is read by the fragment loader thread.", "call_func_name": ["amidst.settings.Setting.get", "amidst.fragment.FragmentQueueProcessor.updateLayerManager", "amidst.fragment.FragmentQueueProcessor.processRecycleQueue", "java.util.concurrent.ConcurrentLinkedQueue.poll", "amidst.fragment.FragmentQueueProcessor.loadFragment", "amidst.fragment.layer.LayerManager.clearInvalidatedLayers"], "call_func_parameter": [[""], ["amidst.mojangapi.world.Dimension"], [""], [""], ["amidst.mojangapi.world.Dimension", "amidst.fragment.Fragment"], [""]], "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos14/amidst/src/main/java/amidst/settings/biomeprofile/BiomeProfile.java", "methodName": "amidst.settings.biomeprofile.BiomeProfile.serializeColorMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private String serializeColorMap() {\n\t\tString output = \"\";\n\t\tfor (Map.Entry<String, BiomeColorJson> pairs : getSortedColorMapEntries()) {\n\t\t\toutput += \"[ \\\"\" + pairs.getKey() + \"\\\", { \";\n\t\t\toutput += \"\\\"r\\\":\" + pairs.getValue().getR() + \", \";\n\t\t\toutput += \"\\\"g\\\":\" + pairs.getValue().getG() + \", \";\n\t\t\toutput += \"\\\"b\\\":\" + pairs.getValue().getB() + \" } ],\\r\\n\";\n\t\t}\n\t\treturn output.substring(0, output.length() - 3);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#StringLiteral#InfixExpression#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This method uses the sorted color map, so the serialization will have a reproducible order.", "call_func_name": ["amidst.settings.biomeprofile.BiomeProfile.getSortedColorMapEntries", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "amidst.settings.biomeprofile.BiomeColorJson.getR", "java.lang.StringBuilder.append", "amidst.settings.biomeprofile.BiomeColorJson.getG", "amidst.settings.biomeprofile.BiomeColorJson.getB", "java.lang.String.length", "java.lang.String.substring"], "call_func_parameter": [[""], [""], [""], [""], [""], ["java.lang.String"], [""], [""], ["int"], [""], [""], [""], ["int", "int"]], "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/profileselect/ProfileSelectWindow.java", "methodName": "amidst.gui.profileselect.ProfileSelectWindow.getScrollPaneLayoutString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CalledOnlyBy(AmidstThread.EDT)\n\tprivate String getScrollPaneLayoutString() {\n\t\tint scrollBarWidth = (Integer) UIManager.get(\"ScrollBar.width\");\n\t\tint preferredWidth = ProfileComponent.PREFERRED_WIDTH + scrollBarWidth;\n\t\tint preferredHeight = ProfileComponent.PREFERRED_HEIGHT * HEIGHT_IN_PROFILE_COMPONENTS;\n\t\treturn \"grow, push, w :\" + preferredWidth + \":, h 80:\" + preferredHeight + \":\";\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The preferred width should be at least a scrollbar-width wider than the ProfileComponent's preferredSize width of 500 (so 520?). The preferred height should allow the dialog to fit easily on a 720p display, while being nicely divisible by ProfileComponent's height of 40 (so 520 again then?).", "call_func_name": ["javax.swing.UIManager.get", "java.lang.Integer.intValue", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [["java.lang.Object"], [""], [""], ["java.lang.String"], ["int"], [""]], "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/profileselect/ProfileComponent.java", "methodName": "amidst.gui.profileselect.ProfileComponent.initComponent", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CalledOnlyBy(AmidstThread.EDT)\n\tprotected void initComponent() {\n\t\tthis.component = new Component();\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "This cannot be put in the constructor, because that would cause a call to e.g. getProfileName by the drawing function before the derived class is constructed.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/main/UpdateInformationJson.java", "methodName": "amidst.gui.main.UpdateInformationJson.getMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getMessage() {\n\t\treturn message;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The message can be used to display additional information about the update.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/main/viewer/widget/SeedAndWorldTypeWidget.java", "methodName": "amidst.gui.main.viewer.widget.SeedAndWorldTypeWidget.getLineSeparationHeight", "methodParameterType": "FontMetrics#", "methodParameterName": "fontMetrics#", "methodBody": "@Override\n\tprotected int getLineSeparationHeight(FontMetrics fontMetrics) {\n\t\treturn (int) Math.round(super.getLineSeparationHeight(fontMetrics) * 1.2);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SuperMethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#CastExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SuperMethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperMethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)CastExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Add some extra line spacing because the seed and world type are separate items, rather than multi-line paragraph text.", "call_func_name": ["amidst.gui.main.viewer.widget.ImmutableTextWidget.getLineSeparationHeight", "java.lang.Math.round"], "call_func_parameter": [["java.awt.FontMetrics"], ["double"]], "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/main/viewer/widget/TextWidget.java", "methodName": "amidst.gui.main.viewer.widget.TextWidget.getLineSeparationHeight", "methodParameterType": "FontMetrics#", "methodParameterName": "fontMetrics#", "methodBody": "@CalledOnlyBy(AmidstThread.EDT)\n\tprotected int getLineSeparationHeight(FontMetrics fontMetrics) {\n\t\treturn fontMetrics.getHeight();\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Override this to adjust the spacing between lines of text", "call_func_name": ["java.awt.FontMetrics.getHeight"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/main/viewer/Graphics2DAccelerationCounter.java", "methodName": "amidst.gui.main.viewer.Graphics2DAccelerationCounter.log", "methodParameterType": "BufferedImage#", "methodParameterName": "image#", "methodBody": "@CalledOnlyBy(AmidstThread.EDT)\n\tpublic void log(BufferedImage image) {\n\t\tif (image.getCapabilities(GC).isAccelerated()) {\n\t\t\taccelerated++;\n\t\t}\n\t\ttotal++;\n\t\tif (total == UPDATE_PERCENTAGE_AFTER) {\n\t\t\tacceleratedPercentage = 100f * accelerated / total;\n\t\t\taccelerated = 0;\n\t\t\ttotal = 0;\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#NumberLiteral#SimpleName#InfixExpression#SimpleName#InfixExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Records that a graphics operation was performed, in this case with an image, so that 2D hardware acceleration metrics can be calculated", "call_func_name": ["java.awt.image.BufferedImage.getCapabilities", "java.awt.ImageCapabilities.isAccelerated"], "call_func_parameter": [["java.awt.GraphicsConfiguration"], [""]], "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/main/viewer/Graphics2DAccelerationCounter.java", "methodName": "amidst.gui.main.viewer.Graphics2DAccelerationCounter.getAcceleratedPercentage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CalledByAny\n\tpublic float getAcceleratedPercentage() {\n\t\treturn acceleratedPercentage;\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a value between 0 and 1, 0 being not accelerated, and 1 meaning all operations were accelerated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos14/amidst/src/main/java/amidst/gui/main/PerMainWindowInjector.java", "methodName": "amidst.gui.main.PerMainWindowInjector.getMenuBar", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@CalledOnlyBy(AmidstThread.EDT)\n\tprivate AmidstMenu getMenuBar() {\n\t\treturn this.menuBar;\n\t}", "AST": "Javadoc#SimpleName#SimpleName#SimpleName#QualifiedName#SingleMemberAnnotation#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SingleMemberAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This only exists to break the cyclic dependency between  {@link #menuBar}, {@link #actions} and {@link #worldSwitcher}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos14/amidst/src/main/java/amidst/Amidst.java", "methodName": "amidst.Amidst.enableGraphicsAcceleration", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static void enableGraphicsAcceleration() {\n\t\tenableOpenGLIfNecessary();\n\t\tforceGraphicsToVRAM();\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "WARNING: This method MUST be invoked before setLookAndFeel(). The sun.java2d.", "call_func_name": ["amidst.Amidst.enableOpenGLIfNecessary", "amidst.Amidst.forceGraphicsToVRAM"], "call_func_parameter": [[""], [""]], "passed_comments": [{"amidst.Amidst.enableOpenGLIfNecessary": "We only use OpenGL on OS X, because it caused lots of bugs on Windows and performance issues on Linux. Also, this is the behavior of Amidst v3.7. On Windows Direct3D is better supported and the default. Linux has accelerated images without activating OpenGL. The reason for this is still unknown to the developers of Amidst. https://github.com/toolbox4minecraft/amidst/pull/94"}]}, {"index": "21", "file": "/root/repos/repos14/amidst/src/main/java/amidst/Amidst.java", "methodName": "amidst.Amidst.enableOpenGLIfNecessary", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private static void enableOpenGLIfNecessary() {\n\t\tif (OperatingSystemDetector.isMac()) {\n\t\t\tAmidstLogger.info(\"Enabling OpenGL.\");\n\t\t\tSystem.setProperty(\"sun.java2d.opengl\", \"True\");\n\t\t} else {\n\t\t\tAmidstLogger.info(\"Not using OpenGL.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "We only use OpenGL on OS X, because it caused lots of bugs on Windows and performance issues on Linux. Also, this is the behavior of Amidst v3.7. On Windows Direct3D is better supported and the default. Linux has accelerated images without activating OpenGL. The reason for this is still unknown to the developers of Amidst. https://github.com/toolbox4minecraft/amidst/pull/94", "call_func_name": ["amidst.util.OperatingSystemDetector.isMac", "amidst.logging.AmidstLogger.info", "java.lang.System.setProperty"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/service/SaveDirectoryService.java", "methodName": "amidst.mojangapi.file.service.SaveDirectoryService.newSaveDirectory", "methodParameterType": "File#", "methodParameterName": "file#", "methodBody": "@NotNull\n\tpublic SaveDirectory newSaveDirectory(File file) throws FileNotFoundException {\n\t\tFile currentFile = file;\n\t\tSaveDirectory result = null;\n\t\tif (currentFile == null) {\n\t\t\t// error\n\t\t} else {\n\t\t\tresult = createValidSaveDirectory(currentFile);\n\t\t\tcurrentFile = currentFile.getParentFile();\n\t\t\tif (result != null) {\n\t\t\t\treturn result;\n\t\t\t} else if (currentFile == null) {\n\t\t\t\t// error\n\t\t\t} else {\n\t\t\t\tresult = createValidSaveDirectory(currentFile);\n\t\t\t\tcurrentFile = currentFile.getParentFile();\n\t\t\t\tif (result != null) {\n\t\t\t\t\treturn result;\n\t\t\t\t} else {\n\t\t\t\t\t// error\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthrow new FileNotFoundException(\"unable to load save directory: \" + file);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#SimpleName#NullLiteral#InfixExpression#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#Block#IfStatement#Block#IfStatement#IfStatement#Block#IfStatement#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block)Block)IfStatement)Block)IfStatement)IfStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "Returns a new valid instance of the class SaveDirectory. It tries to use the given file. If that is not valid it tires to use its parent file. If that is also not valid it will throw a FileNotFoundException.", "call_func_name": ["amidst.mojangapi.file.service.SaveDirectoryService.createValidSaveDirectory", "java.io.File.getParentFile", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.io.FileNotFoundException.<init>"], "call_func_parameter": [["java.io.File"], [""], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/service/SaveDirectoryService.java", "methodName": "amidst.mojangapi.file.service.SaveDirectoryService.tryReadSingleplayerPlayerNbt", "methodParameterType": "SaveDirectory#", "methodParameterName": "saveDirectory#", "methodBody": "@NotNull\n\tpublic Optional<PlayerNbt> tryReadSingleplayerPlayerNbt(SaveDirectory saveDirectory) {\n\t\tAmidstLogger.info(\"using player from level.dat\");\n\t\treturn tryReadCoordinatesFromLevelDat(saveDirectory).map(this::createLevelDatPlayerNbt);\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "We need to let the user decide if he wants to load the singleplayer player from the level.dat file or if he wants to load the multiplayer players. That is, because a singleplayer map will have the playerdata directory. It contains information about each player that ever played on the map. However, if the map is loaded as singleplayer map, minecraft will use the information that is stored in the level.dat file. It will also overwrite the file in the playerdata directory that belongs to the player that loaded the map in singleplayer mode. So, if we change the player location in the playerdata directory it will just be ignored if the map is used as singleplayer map.", "call_func_name": ["amidst.logging.AmidstLogger.info", "amidst.mojangapi.file.service.SaveDirectoryService.tryReadCoordinatesFromLevelDat", "java.util.function.Function.apply", "java.util.Optional.map"], "call_func_parameter": [["java.lang.String"], ["amidst.mojangapi.file.directory.SaveDirectory"], ["amidst.mojangapi.file.service.SaveDirectoryService"], ["java.util.function.Function"]], "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/service/SaveDirectoryService.java", "methodName": "amidst.mojangapi.file.service.SaveDirectoryService.tryReadMultiplayerPlayerNbts", "methodParameterType": "SaveDirectory#", "methodParameterName": "saveDirectory#", "methodBody": "@NotNull\n\tpublic List<PlayerNbt> tryReadMultiplayerPlayerNbts(SaveDirectory saveDirectory) {\n\t\tList<PlayerNbt> playerdataPlayers = listFiles(saveDirectory.getPlayerdata())\n\t\t\t\t.stream()\n\t\t\t\t.filter(File::isFile)\n\t\t\t\t.map(f -> createPlayerdataPlayerNbt(saveDirectory, f))\n\t\t\t\t.filter(Optional::isPresent)\n\t\t\t\t.map(Optional::get)\n\t\t\t\t.collect(Collectors.toList());\n\t\tif (!playerdataPlayers.isEmpty()) {\n\t\t\tAmidstLogger.info(\"using players from the playerdata directory\");\n\t\t\treturn playerdataPlayers;\n\t\t} else {\n\t\t\tList<PlayerNbt> playersPlayers = listFiles(saveDirectory.getPlayers())\n\t\t\t\t\t.stream()\n\t\t\t\t\t.filter(File::isFile)\n\t\t\t\t\t.map(f -> createPlayersPlayerNbt(saveDirectory, f))\n\t\t\t\t\t.filter(Optional::isPresent)\n\t\t\t\t\t.map(Optional::get)\n\t\t\t\t\t.collect(Collectors.toList());\n\t\t\tif (!playersPlayers.isEmpty()) {\n\t\t\t\tAmidstLogger.info(\"using players from the players directory\");\n\t\t\t\treturn playersPlayers;\n\t\t\t} else {\n\t\t\t\tAmidstLogger.info(\"no multiplayer players found\");\n\t\t\t\treturn Collections.emptyList();\n\t\t\t}\n\t\t}\n\t}", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Since version 1.7.6, minecraft stores players in the playerdata directory and uses the player uuid as filename.", "call_func_name": ["amidst.mojangapi.file.directory.SaveDirectory.getPlayerdata", "amidst.mojangapi.file.service.SaveDirectoryService.listFiles", "java.util.List.stream", "java.util.function.Predicate.test", "java.util.stream.Stream.filter", "java.util.function.Function.apply", "java.util.stream.Stream.map", "java.util.function.Function.apply", "java.util.stream.Collectors.toList", "java.util.stream.Stream.collect", "java.util.List.isEmpty", "amidst.logging.AmidstLogger.info", "amidst.mojangapi.file.directory.SaveDirectory.getPlayers", "java.util.Collections.emptyList"], "call_func_parameter": [[""], ["java.io.File"], [""], [""], ["java.util.function.Predicate"], ["amidst.mojangapi.file.service.SaveDirectoryService", "amidst.mojangapi.file.directory.SaveDirectory"], ["java.util.function.Function"], [""], [""], ["java.util.stream.Collector"], [""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/service/ClassLoaderService.java", "methodName": "amidst.mojangapi.file.service.ClassLoaderService.isLibraryActive", "methodParameterType": "String#String#List<LibraryRuleJson>#", "methodParameterName": "osName#osVersion#rules#", "methodBody": "private boolean isLibraryActive(String osName, String osVersion, List<LibraryRuleJson> rules) {\n\t\tif (rules.isEmpty()) {\n\t\t\treturn true;\n\t\t}\n\t\tboolean result = false;\n\t\tfor (LibraryRuleJson rule : rules) {\n\t\t\tif (isApplicable(osName, osVersion, rule)) {\n\t\t\t\tresult = isAllowed(rule);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Note, that multiple rules might be applicable. We take the last applicable rule. However, this might be wrong so we need to take the most specific rule? For now this works fine.", "call_func_name": ["java.util.List.isEmpty", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "amidst.mojangapi.file.service.ClassLoaderService.isApplicable", "amidst.mojangapi.file.service.ClassLoaderService.isAllowed"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String", "java.lang.String", "amidst.mojangapi.file.json.version.LibraryRuleJson"], ["amidst.mojangapi.file.json.version.LibraryRuleJson"]], "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/PlayerInformationCache.java", "methodName": "amidst.mojangapi.file.PlayerInformationCache.getCleanUUID", "methodParameterType": "String#", "methodParameterName": "uuid#", "methodBody": "private String getCleanUUID(String uuid) {\n\t\treturn uuid.replace(\"-\", \"\");\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The uuid in the filename contains dashes that are not allowed in the url.", "call_func_name": ["java.lang.String.replace"], "call_func_parameter": [["java.lang.CharSequence", "java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/MinecraftInstallation.java", "methodName": "amidst.mojangapi.file.MinecraftInstallation.tryGetLauncherProfileFromName", "methodParameterType": "String#", "methodParameterName": "profileName#", "methodBody": "public Optional<LauncherProfile> tryGetLauncherProfileFromName(String profileName) {\n        try {\n            VersionList versionList = VersionList.newLocalVersionList();\n            List<UnresolvedLauncherProfile> unresolvedProfiles = readLauncherProfiles();\n            for (UnresolvedLauncherProfile unresolvedProfile : unresolvedProfiles) {\n                LauncherProfile profile = unresolvedProfile.resolveToVanilla(versionList);\n                if (profile.getProfileName().equalsIgnoreCase(profileName)) {\n                    return Optional.of(profile);\n                }\n            }\n        } catch(FormatException | IOException e) {\n            AmidstLogger.error(e, \"error while reading launcher profiles\");\n        }\n\n        return Optional.empty();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Try to locate a local profile with a name that matches the given string. No remote profiles are supported. Any errors are ignored and will result in a non-match.", "call_func_name": ["amidst.mojangapi.file.VersionList.newLocalVersionList", "amidst.mojangapi.file.MinecraftInstallation.readLauncherProfiles", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "amidst.mojangapi.file.UnresolvedLauncherProfile.resolveToVanilla", "amidst.mojangapi.file.LauncherProfile.getProfileName", "java.lang.String.equalsIgnoreCase", "java.util.Optional.of", "amidst.logging.AmidstLogger.error", "java.util.Optional.empty"], "call_func_parameter": [[""], [""], [""], [""], [""], ["amidst.mojangapi.file.VersionList"], [""], ["java.lang.String"], ["java.lang.Object"], ["java.lang.Throwable", "java.lang.String"], [""]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/LauncherProfile.java", "methodName": "amidst.mojangapi.file.LauncherProfile.isVersionListedInProfile", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isVersionListedInProfile() {\n\t\treturn isVersionListedInProfile;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "True, iff the contained version was listed in the profile. Especially, this is false if a modded profiles was resolved via {@link UnresolvedLauncherProfile#resolveToVanilla(VersionList)}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/file/directory/DotMinecraftDirectory.java", "methodName": "amidst.mojangapi.file.directory.DotMinecraftDirectory.newCustom", "methodParameterType": "File#File#File#File#File#", "methodParameterName": "root#libraries#saves#versions#launcherProfilesJson#", "methodBody": "public static DotMinecraftDirectory newCustom(\n\t\t\tFile root,\n\t\t\tFile libraries,\n\t\t\tFile saves,\n\t\t\tFile versions,\n\t\t\tFile launcherProfilesJson) {\n\t\tObjects.requireNonNull(root);\n\t\treturn new DotMinecraftDirectory(\n\t\t\t\troot,\n\t\t\t\tlibraries != null ? libraries : new File(root, \"libraries\"),\n\t\t\t\tsaves != null ? saves : new File(root, \"saves\"),\n\t\t\t\tversions != null ? versions : new File(root, \"versions\"),\n\t\t\t\tlauncherProfilesJson != null ? launcherProfilesJson : new File(root, \"launcher_profiles.json\"));\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ConditionalExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ConditionalExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ConditionalExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#StringLiteral#ClassInstanceCreation#ConditionalExpression#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ConditionalExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ConditionalExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ConditionalExpression(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(StringLiteral)StringLiteral)ClassInstanceCreation)ConditionalExpression)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Allows to customize all parts of the .minecraft directory, mainly for testing and the dev tools. Pass null to use default values.", "call_func_name": ["java.util.Objects.requireNonNull", "java.io.File.<init>", "amidst.mojangapi.file.directory.DotMinecraftDirectory.<init>"], "call_func_parameter": [["java.lang.Object"], ["java.io.File", "java.lang.String"], ["java.io.File", "java.io.File", "java.io.File", "java.io.File", "java.io.File"]], "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/WorldBuilder.java", "methodName": "amidst.mojangapi.world.WorldBuilder.createSilentPlayerless", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static WorldBuilder createSilentPlayerless() {\n\t\treturn new WorldBuilder(\n\t\t\t\tnew ImmutablePlayerInformationProvider(PlayerInformation.theSingleplayerPlayer()),\n\t\t\t\tSeedHistoryLogger.createDisabled());\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new WorldBuilder that does not log any seeds and that provides the singleplayer player information for each requested player.", "call_func_name": ["amidst.mojangapi.world.player.PlayerInformation.theSingleplayerPlayer", "amidst.mojangapi.file.ImmutablePlayerInformationProvider.<init>", "amidst.mojangapi.world.SeedHistoryLogger.createDisabled", "amidst.mojangapi.world.WorldBuilder.<init>"], "call_func_parameter": [[""], ["amidst.mojangapi.world.player.PlayerInformation"], [""], ["amidst.mojangapi.file.PlayerInformationProvider", "amidst.mojangapi.world.SeedHistoryLogger"]], "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/producer/CachedWorldIconProducer.java", "methodName": "amidst.mojangapi.world.icon.producer.CachedWorldIconProducer.getCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private List<WorldIcon> getCache() {\n\t\tList<WorldIcon> result = cache;\n\t\tif (result == null) {\n\t\t\tsynchronized (cacheLock) {\n\t\t\t\tif (cache == null) {\n\t\t\t\t\tcache = createCache();\n\t\t\t\t}\n\t\t\t\tresult = cache;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SynchronizedStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)SynchronizedStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the list of WorldIcons. Returns the cache and creates it, if necessary. This will never return null. This also ensures that createCache is only called by one thread at a time.", "call_func_name": ["amidst.mojangapi.world.icon.producer.CachedWorldIconProducer.createCache"], "call_func_parameter": [[""]], "passed_comments": [{"amidst.mojangapi.world.icon.producer.CachedWorldIconProducer.createCache": "Creates the list of WorldIcons. This will never return null."}]}, {"index": "32", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/producer/CachedWorldIconProducer.java", "methodName": "amidst.mojangapi.world.icon.producer.CachedWorldIconProducer.createCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private List<WorldIcon> createCache() {\n\t\tList<WorldIcon> result = doCreateCache();\n\t\tif (result == null) {\n\t\t\treturn Collections.emptyList();\n\t\t} else {\n\t\t\treturn Collections.unmodifiableList(result);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Creates the list of WorldIcons. This will never return null.", "call_func_name": ["amidst.mojangapi.world.icon.producer.CachedWorldIconProducer.doCreateCache", "java.util.Collections.emptyList", "java.util.Collections.unmodifiableList"], "call_func_parameter": [[""], [""], ["java.util.List"]], "passed_comments": [{"amidst.mojangapi.world.icon.producer.CachedWorldIconProducer.doCreateCache": "This actually create the cache. This can return null. This will only be called by one thread at a time."}]}, {"index": "33", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/producer/CachedWorldIconProducer.java", "methodName": "amidst.mojangapi.world.icon.producer.CachedWorldIconProducer.doCreateCache", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract List<WorldIcon> doCreateCache();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "This actually create the cache. This can return null. This will only be called by one thread at a time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/WorldIconImage.java", "methodName": "amidst.mojangapi.world.icon.WorldIconImage.fromPixelTransparency", "methodParameterType": "BufferedImage#", "methodParameterName": "image#", "methodBody": "public static WorldIconImage fromPixelTransparency(BufferedImage image) {\n\t\tint imageMarginTop = findFirstSolidPixelFromTop(image);\n\t\tint imageMarginBottom = findFirstSolidPixelFromBottom(image);\n\t\tint frameHeight = Math.max(0, image.getHeight() - imageMarginTop - imageMarginBottom);\n\t\treturn new WorldIconImage(image, 0, imageMarginTop, image.getWidth(), frameHeight);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NumberLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Use pixel transparency along the left edge of the icon to automatically determine the vertical frame position. Assumes the image has no horizontal out of frame effects. If you want transparency on the left side of the image without adjusting its frame, or if you want to control where the frame starts, use a pixel that is mostly transparent. (Spawn.png and Witch.png do this)", "call_func_name": ["amidst.mojangapi.world.icon.WorldIconImage.findFirstSolidPixelFromTop", "amidst.mojangapi.world.icon.WorldIconImage.findFirstSolidPixelFromBottom", "java.awt.image.BufferedImage.getHeight", "java.lang.Math.max", "java.awt.image.BufferedImage.getWidth", "amidst.mojangapi.world.icon.WorldIconImage.<init>"], "call_func_parameter": [["java.awt.image.BufferedImage"], ["java.awt.image.BufferedImage"], [""], ["int", "int"], [""], ["java.awt.image.BufferedImage", "int", "int", "int", "int"]], "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/WorldIconImage.java", "methodName": "amidst.mojangapi.world.icon.WorldIconImage.getFrameOffsetX", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getFrameOffsetX() {\n\t\treturn frameOffsetX;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns 0 if nothing is extending left or right of the frame.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/WorldIconImage.java", "methodName": "amidst.mojangapi.world.icon.WorldIconImage.getFrameOffsetY", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getFrameOffsetY() {\n\t\treturn frameOffsetY;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns 0 if nothing is extending above or below the frame.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/WorldIconImage.java", "methodName": "amidst.mojangapi.world.icon.WorldIconImage.getFrameWidth", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getFrameWidth() {\n\t\treturn frameWidth;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the width of the icon \"frame\", ignoring any parts of the icon which might extend beyond the icon's border for an \"Out of Frame\" visual effect. Returns the image width if nothing is extending left or right of the frame.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/WorldIconImage.java", "methodName": "amidst.mojangapi.world.icon.WorldIconImage.getFrameHeight", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getFrameHeight() {\n\t\treturn frameHeight;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the height of the icon \"frame\", ignoring any parts of the icon which might extend beyond the icon's border for an \"Out of Frame\" visual effect. Returns the image height if nothing is extending above or below the frame.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/icon/type/EndCityWorldIconTypeProvider.java", "methodName": "amidst.mojangapi.world.icon.type.EndCityWorldIconTypeProvider.hasSuitableIslandFoundation", "methodParameterType": "int#int#List<EndIsland>#", "methodParameterName": "chunkX#chunkY#endIslands#", "methodBody": "private DefaultWorldIconTypes hasSuitableIslandFoundation(int chunkX, int chunkY, List<EndIsland> endIslands) {\n\t\tDefaultWorldIconTypes result = null;\n\t\tfor (EndIsland island : endIslands) {\n\t\t\tfloat influence = island.influenceAtChunk(chunkX, chunkY);\n\t\t\tif (influence >= REQUIRED_INFLUENCE) {\n\t\t\t\treturn DefaultWorldIconTypes.END_CITY;\n\t\t\t} else if (influence >= 0) {\n\t\t\t\tresult = DefaultWorldIconTypes.POSSIBLE_END_CITY;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the influence is greater or equal to zero, Minecraft WILL attempt to build an End City, however if the ground at any of the corners of the end city is below height 60 then the End City will be aborted. TODO: Use Amidst's ability to hook into the minecraft .jar file to get Minecraft to build just this single chunk so we can tell for certain whether an End City builds here. (If that's feasible) In the meantime, fall back on the requiredInfluence heuristic", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "amidst.mojangapi.world.oracle.EndIsland.influenceAtChunk"], "call_func_parameter": [[""], [""], [""], ["int", "int"]], "passed_comments": [{"amidst.mojangapi.world.oracle.EndIsland.influenceAtChunk": "A version of influenceAt() that more exactly adheres to Minecraft's algorithm, for use in testing for End Cities."}]}, {"index": "40", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIsland.java", "methodName": "amidst.mojangapi.world.oracle.EndIsland.influenceAtBlock", "methodParameterType": "int#int#", "methodParameterName": "x#y#", "methodBody": "public float influenceAtBlock(int x, int y) {\n\t\t// Add 8 blocks to both axis because all the Minecraft calculations are\n\t\t// done using chunk coordinates and are converted as being the center of\n\t\t// the chunk whenever translated to block coordinates, whereas Amidst\n\t\t// treats chunk coords as blockCoordinates >> 4.\n\t\t// This function also does a floating point divide by 16 instead of\n\t\t// shifting by 4 in order to maintain sub-chunk accuracy with x & y.\n\t\tfloat chunkX = (x + 8) / 16.0f;\n\t\tfloat chunkY = (y + 8) / 16.0f;\n\t\tfloat adjustedX = (this.chunkX - chunkX) * 2 + X_ADJUSTMENT;\n\t\tfloat adjustedY = (this.chunkY - chunkY) * 2 + Y_ADJUSTMENT;\n\t\treturn getResult(adjustedX * adjustedX + adjustedY * adjustedY);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#ThisExpression#SimpleName#FieldAccess#SimpleName#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retuns a value between 80 and -100 which indicates this island's influence at the block coordindates given. A non-negative value indicates there will be solid ground, while a negative value indicates the rocky-island-shore, which might be solid ground (but that becomes less likely the lower the value).", "call_func_name": ["amidst.mojangapi.world.oracle.EndIsland.getResult"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIsland.java", "methodName": "amidst.mojangapi.world.oracle.EndIsland.influenceAtChunk", "methodParameterType": "int#int#", "methodParameterName": "chunkX#chunkY#", "methodBody": "public float influenceAtChunk(int chunkX, int chunkY) {\n\t\tint adjustedX = (chunkX - this.chunkX) * 2 + X_ADJUSTMENT;\n\t\tint adjustedY = (chunkY - this.chunkY) * 2 + Y_ADJUSTMENT;\n\t\treturn getResult(adjustedX * adjustedX + adjustedY * adjustedY);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A version of influenceAt() that more exactly adheres to Minecraft's algorithm, for use in testing for End Cities.", "call_func_name": ["amidst.mojangapi.world.oracle.EndIsland.getResult"], "call_func_parameter": [["double"]], "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/SlimeChunkOracle.java", "methodName": "amidst.mojangapi.world.oracle.SlimeChunkOracle.getSeed", "methodParameterType": "int#int#", "methodParameterName": "chunkX#chunkY#", "methodBody": "private long getSeed(int chunkX, int chunkY) {\n\t\treturn seed + chunkX * chunkX * 0x4c1906 + chunkX * 0x5ac0db + chunkY * chunkY * 0x4307a7L + chunkY * 0x5f24f\n\t\t\t\t^ 0x3ad8025f;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Make sure this uses integers for the parameters chunkX and chunkY and long for the seed. This ensure the overflow works as in Minecraft.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.createNoiseFunction", "methodParameterType": "long#", "methodParameterName": "seed#", "methodBody": "private static SimplexNoise createNoiseFunction(long seed) {\n\t\tRandom random = new Random(seed);\n\t\tfakePerlin3dOctavesConstructor(random, 16);\n\t\tfakePerlin3dOctavesConstructor(random, 16);\n\t\tfakePerlin3dOctavesConstructor(random, 8);\n\t\tfakePerlin3dOctavesConstructor(random, 10);\n\t\tfakePerlin3dOctavesConstructor(random, 16);\n\t\treturn new SimplexNoise(random);\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the noise function using the current seed.", "call_func_name": ["java.util.Random.<init>", "amidst.mojangapi.world.oracle.EndIslandOracle.fakePerlin3dOctavesConstructor", "amidst.mojangapi.world.oracle.SimplexNoise.<init>"], "call_func_parameter": [["long"], ["java.util.Random", "int"], ["java.util.Random"]], "passed_comments": [{"amidst.mojangapi.world.oracle.EndIslandOracle.fakePerlin3dOctavesConstructor": "Mimics the side-effects to the random number generator caused by constructing a Perlin3dOctaves instance."}]}, {"index": "44", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.fakePerlin3dOctavesConstructor", "methodParameterType": "Random#int#", "methodParameterName": "random#octaveCount#", "methodBody": "private static void fakePerlin3dOctavesConstructor(Random random, int octaveCount) {\n\t\tfor (int i = 0; i < octaveCount; i++) {\n\t\t\tfakePerlin3dConstructor(random);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Mimics the side-effects to the random number generator caused by constructing a Perlin3dOctaves instance.", "call_func_name": ["amidst.mojangapi.world.oracle.EndIslandOracle.fakePerlin3dConstructor"], "call_func_parameter": [["java.util.Random"]], "passed_comments": [{"amidst.mojangapi.world.oracle.EndIslandOracle.fakePerlin3dConstructor": "Mimics the side-effects to the random number generator caused by constructing a Perlin3d instance."}]}, {"index": "45", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.fakePerlin3dConstructor", "methodParameterType": "Random#", "methodParameterName": "random#", "methodBody": "private static void fakePerlin3dConstructor(Random random) {\n\t\trandom.nextDouble();\n\t\trandom.nextDouble();\n\t\trandom.nextDouble();\n\t\tfor (int i = 0; i < 256; i++) {\n\t\t\trandom.nextInt(256 - i);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NumberLiteral#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleName#NumberLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#ForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(NumberLiteral)NumberLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)ForStatement)Block)MethodDeclaration", "methodDoc": "Mimics the side-effects to the random number generator caused by constructing a Perlin3d instance.", "call_func_name": ["java.util.Random.nextDouble", "java.util.Random.nextInt"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.findSurroundingIslands", "methodParameterType": "int#int#int#int#", "methodParameterName": "chunkX#chunkY#chunksPerFragmentX#chunksPerFragmentY#", "methodBody": "private List<EndIsland> findSurroundingIslands(\n\t\t\tint chunkX,\n\t\t\tint chunkY,\n\t\t\tint chunksPerFragmentX,\n\t\t\tint chunksPerFragmentY) {\n\t\tList<EndIsland> result = new LinkedList<>();\n\t\tfor (int y = -SURROUNDING_CHUNKS; y <= chunksPerFragmentY + SURROUNDING_CHUNKS; y++) {\n\t\t\tfor (int x = -SURROUNDING_CHUNKS; x <= chunksPerFragmentX + SURROUNDING_CHUNKS; x++) {\n\t\t\t\tEndIsland island = tryCreateEndIsland(chunkX + x, chunkY + y);\n\t\t\t\tif (island != null) {\n\t\t\t\t\tresult.add(island);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#PrefixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#PostfixExpression#PrimitiveType#SimpleName#SimpleName#PrefixExpression#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#SimpleName#InfixExpression#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#ForStatement#Block#ForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(PrefixExpression(SimpleName)SimpleName)PrefixExpression)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)ForStatement)Block)ForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns a list of all islands that might be touching a chunk-area.", "call_func_name": ["java.util.LinkedList.<init>", "amidst.mojangapi.world.oracle.EndIslandOracle.tryCreateEndIsland", "java.util.List.add"], "call_func_parameter": [[""], ["int", "int"], ["java.lang.Object"]], "passed_comments": [{"amidst.mojangapi.world.oracle.EndIslandOracle.tryCreateEndIsland": "Returns an EndIsland if one has 'grown out' from the chunk, otherwise null"}]}, {"index": "47", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.tryCreateEndIsland", "methodParameterType": "int#int#", "methodParameterName": "chunkX#chunkY#", "methodBody": "private EndIsland tryCreateEndIsland(int chunkX, int chunkY) {\n\t\tif (chunkX == 0 && chunkY == 0) {\n\t\t\treturn createMainEndIsland(chunkX, chunkY);\n\t\t} else if (chunkX * chunkX + chunkY * chunkY > 4096) {\n\t\t\treturn tryCreateEndIslandInOuterLands(chunkX, chunkY);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns an EndIsland if one has 'grown out' from the chunk, otherwise null", "call_func_name": ["amidst.mojangapi.world.oracle.EndIslandOracle.createMainEndIsland", "amidst.mojangapi.world.oracle.EndIslandOracle.tryCreateEndIslandInOuterLands"], "call_func_parameter": [["int", "int"], ["int", "int"]], "passed_comments": [{"amidst.mojangapi.world.oracle.EndIslandOracle.createMainEndIsland": "The main island grows from the origin, with a hard-coded erosion factor of 8"}, {"amidst.mojangapi.world.oracle.EndIslandOracle.tryCreateEndIslandInOuterLands": "The chunk is in the outer-islands band (1024 blocks from the origin)"}]}, {"index": "48", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.createMainEndIsland", "methodParameterType": "int#int#", "methodParameterName": "chunkX#chunkY#", "methodBody": "private EndIsland createMainEndIsland(int chunkX, int chunkY) {\n\t\treturn new EndIsland(chunkX, chunkY, 8.0f);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The main island grows from the origin, with a hard-coded erosion factor of 8", "call_func_name": ["amidst.mojangapi.world.oracle.EndIsland.<init>"], "call_func_parameter": [["int", "int", "float"]], "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.tryCreateEndIslandInOuterLands", "methodParameterType": "int#int#", "methodParameterName": "chunkX#chunkY#", "methodBody": "// TODO: check for threading, do we need synchonized or is the SimplexNoise\n\t// class thread safe?\n\tprivate synchronized EndIsland tryCreateEndIslandInOuterLands(int chunkX, int chunkY) {\n\t\tif (noiseFunction.noise(chunkX, chunkY) < ISLAND_DENSITY_THRESHOLD) {\n\t\t\treturn new EndIsland(chunkX, chunkY, getErosionFactor(chunkX, chunkY));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#NullLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "The chunk is in the outer-islands band (1024 blocks from the origin)", "call_func_name": ["amidst.mojangapi.world.oracle.SimplexNoise.noise", "amidst.mojangapi.world.oracle.EndIslandOracle.getErosionFactor", "amidst.mojangapi.world.oracle.EndIsland.<init>"], "call_func_parameter": [["double", "double"], ["int", "int"], ["int", "int", "float"]], "passed_comments": [{"amidst.mojangapi.world.oracle.EndIslandOracle.getErosionFactor": "An island (or part of an island) grows out from this chunk, with an erosion factor between 9 and 21 (i.e. they will be smaller than the main island)."}]}, {"index": "50", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/EndIslandOracle.java", "methodName": "amidst.mojangapi.world.oracle.EndIslandOracle.getErosionFactor", "methodParameterType": "int#int#", "methodParameterName": "chunkX#chunkY#", "methodBody": "private int getErosionFactor(int chunkX, int chunkY) {\n\t\treturn (Math.abs(chunkX) * 3439 + Math.abs(chunkY) * 147) % 13 + 9;\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(InfixExpression(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "An island (or part of an island) grows out from this chunk, with an erosion factor between 9 and 21 (i.e. they will be smaller than the main island).", "call_func_name": ["java.lang.Math.abs"], "call_func_parameter": [["int"]], "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/oracle/BiomeDataOracle.java", "methodName": "amidst.mojangapi.world.oracle.BiomeDataOracle.getBiomeAt", "methodParameterType": "int#int#", "methodParameterName": "x#y#", "methodBody": "private Biome getBiomeAt(int x, int y) throws UnknownBiomeIndexException, MinecraftInterfaceException {\n\t\tint[] biomeData = getFullResolutionBiomeData(x, y, 1, 1);\n\t\treturn Biome.getByIndex(biomeData[0]);\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#ArrayAccess#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the biome located at the block-coordinates. This is not a fast routine, it was added for rare things like accurately testing structures. (uses the 1:1 scale biome-map)", "call_func_name": ["amidst.mojangapi.world.oracle.BiomeDataOracle.getFullResolutionBiomeData", "amidst.mojangapi.world.biome.Biome.getByIndex"], "call_func_parameter": [["int", "int", "int", "int"], ["int"]], "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/World.java", "methodName": "amidst.mojangapi.world.World.dispose", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void dispose() {\n\t\tonDisposeWorld.accept(this);\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Unlocks the RunningLauncherProfile to allow the creation of another world. However, this does not actually prevent the usage of this world. If you keep using it, something will break.", "call_func_name": ["java.util.function.Consumer.accept"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/filter/WorldFilter.java", "methodName": "amidst.mojangapi.world.filter.WorldFilter.ensureIsMultipleOfFragmentSize", "methodParameterType": "long#", "methodParameterName": "worldFilterSize#", "methodBody": "private void ensureIsMultipleOfFragmentSize(long worldFilterSize) {\n\t\tif (worldFilterSize % Fragment.SIZE != 0) {\n\t\t\tthrow new IllegalArgumentException(\"World filter size must be a multiple of \" + Fragment.SIZE);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#QualifiedName#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Structure filters check spaces in fragment size, so filter distance not a multiple of fragment size will include more area in the filter than expected", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], ["int"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/world/player/Player.java", "methodName": "amidst.mojangapi.world.player.Player.trySaveLocation", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public synchronized boolean trySaveLocation() {\n\t\tPlayerCoordinates currentCoordinates = this.currentCoordinates;\n\t\tif (savedCoordinates != currentCoordinates) {\n\t\t\tif (saveGamePlayer.tryBackupAndWritePlayerCoordinates(currentCoordinates)) {\n\t\t\t\tsavedCoordinates = currentCoordinates;\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tAmidstLogger.warn(\"error while writing player location for player: {}\", getPlayerName());\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Returns true if the player was not moved or the new location was successfully saved.", "call_func_name": ["amidst.mojangapi.file.SaveGamePlayer.tryBackupAndWritePlayerCoordinates", "amidst.mojangapi.world.player.Player.getPlayerName", "amidst.logging.AmidstLogger.warn"], "call_func_parameter": [["amidst.mojangapi.world.player.PlayerCoordinates"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/minecraftinterface/legacy/LegacyMinecraftInterface.java", "methodName": "amidst.mojangapi.minecraftinterface.legacy.LegacyMinecraftInterface.initializeBlock", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void initializeBlock() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException {\n\t\tif (blockInitClass != null) {\n\t\t\tblockInitClass.callStaticMethod(LegacySymbolicNames.METHOD_BLOCK_INIT_INITIALIZE);\n\t\t}\n\t}", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Minecraft 1.8 and higher require block initialization to be called before creating a biome generator.", "call_func_name": ["amidst.clazz.symbolic.SymbolicClass.callStaticMethod"], "call_func_parameter": [["java.lang.String", "java.lang.Object[]"]], "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/minecraftinterface/MinecraftInterface.java", "methodName": "amidst.mojangapi.minecraftinterface.MinecraftInterface.getBiomeData", "methodParameterType": "int#int#int#int#boolean#", "methodParameterName": "x#y#width#height#useQuarterResolution#", "methodBody": "public int[] getBiomeData(int x, int y, int width, int height, boolean useQuarterResolution)\n\t\t\tthrows MinecraftInterfaceException;", "AST": "Javadoc#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param useQuarterResolution Minecraft calculates biomes atquarter-resolution, then noisily interpolates the biome-map up to 1:1 resolution when needed, set useQuarterResolutionMap to true to read from the quarter-resolution map, or false to read values that have been interpolated up to full resolution. When useQuarterResolution is true, the x, y, width, and height paramaters must all correspond to a quarter of the Minecraft block coordinates/sizes you wish to obtain the biome data for. Amidst displays the quarter-resolution biome map, however full resolution is required to determine the position and nature of structures, as the noisy interpolation can change which biome a structure is located in (if the structure is located on a biome boundary).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/RunningLauncherProfile.java", "methodName": "amidst.mojangapi.RunningLauncherProfile.createWorld", "methodParameterType": "WorldOptions#", "methodParameterName": "worldOptions#", "methodBody": "public synchronized World createWorld(WorldOptions worldOptions)\n\t\t\tthrows IllegalStateException,\n\t\t\tMinecraftInterfaceException {\n\t\tif (currentWorld == null) {\n\t\t\tcurrentWorld = worldBuilder.from(minecraftInterface, this::unlock, worldOptions);\n\t\t\treturn currentWorld;\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Each minecraft interface can only handle one world at a time. Dispose the previous world before creating a new one.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Due to the limitation of the minecraft interface, you can only work with one world at a time. Creating a new world will break all previously created world objects.", "call_func_name": ["java.util.function.Consumer.accept", "amidst.mojangapi.world.WorldBuilder.from", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [["amidst.mojangapi.RunningLauncherProfile"], ["amidst.mojangapi.minecraftinterface.MinecraftInterface", "java.util.function.Consumer", "amidst.mojangapi.world.WorldOptions"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos14/amidst/src/main/java/amidst/mojangapi/RunningLauncherProfile.java", "methodName": "amidst.mojangapi.RunningLauncherProfile.createWorldFromSaveGame", "methodParameterType": "SaveGame#", "methodParameterName": "saveGame#", "methodBody": "public synchronized World createWorldFromSaveGame(SaveGame saveGame)\n\t\t\tthrows IllegalStateException,\n\t\t\tIOException,\n\t\t\tMinecraftInterfaceException {\n\t\tif (currentWorld == null) {\n\t\t\tcurrentWorld = worldBuilder.fromSaveGame(minecraftInterface, this::unlock, saveGame);\n\t\t\treturn currentWorld;\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Each minecraft interface can only handle one world at a time. Dispose the previous world before creating a new one.\");\n\t\t}\n\t}", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#ExpressionMethodReference#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(ThisExpression)ThisExpression(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Due to the limitation of the minecraft interface, you can only work with one world at a time. Creating a new world will break all previously created world objects.", "call_func_name": ["java.util.function.Consumer.accept", "amidst.mojangapi.world.WorldBuilder.fromSaveGame", "java.lang.IllegalStateException.<init>"], "call_func_parameter": [["amidst.mojangapi.RunningLauncherProfile"], ["amidst.mojangapi.minecraftinterface.MinecraftInterface", "java.util.function.Consumer", "amidst.mojangapi.file.SaveGame"], ["java.lang.String"]], "passed_comments": "/"}]