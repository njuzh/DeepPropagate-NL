[{"index": "0", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/DataStore.java", "methodName": "com.yahoo.athenz.zts.store.DataStore.rfcEllipticCurveName", "methodParameterType": "String#", "methodParameterName": "curveName#", "methodBody": "String rfcEllipticCurveName(final String curveName) {\n\n        if (curveName == null) {\n            return null;\n        }\n\n        String rfcCurveName;\n        switch (curveName) {\n            case \"prime256v1\":\n            case \"secp256r1\":\n                rfcCurveName = \"P-256\";\n                break;\n            case \"secp384r1\":\n                rfcCurveName = \"P-384\";\n                break;\n            case \"secp521r1\":\n                rfcCurveName = \"P-521\";\n                break;\n            default:\n                // if we have no defined rfc curve name\n                // then we'll just return the value as is\n                rfcCurveName = curveName;\n        }\n\n        return rfcCurveName;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#SwitchCase#StringLiteral#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#StringLiteral#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#StringLiteral#SwitchCase#SimpleName#StringLiteral#Assignment#ExpressionStatement#BreakStatement#SwitchCase#SimpleName#SimpleName#Assignment#ExpressionStatement#SwitchStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(SwitchStatement(SimpleName)SimpleName(SwitchCase(StringLiteral)StringLiteral)SwitchCase(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(StringLiteral)StringLiteral)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)SwitchStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Mapping from curve names used by the crypto libraries to RFC defined values. The valid values for JWKs are defined https://tools.ietf.org/html/rfc7518 and the mapping between alias curve names is taken from https://tools.ietf.org/html/rfc4492 secp256r1   |  prime256v1   |   NIST P-256 secp384r1   |               |   NIST P-384 secp521r1   |               |   NIST P-521", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "1", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/DataStore.java", "methodName": "com.yahoo.athenz.zts.store.DataStore.processDomainUpdates", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean processDomainUpdates() {\n\n        StringBuilder lastModTimestamp = new StringBuilder(128);\n        SignedDomains signedDomains = changeLogStore.getUpdatedSignedDomains(lastModTimestamp);\n        \n        /* if our data back was null and the last mod timestamp\n         * is also empty then we had a failure */\n        \n        if (signedDomains == null && lastModTimestamp.length() == 0) {\n            return false;\n        }\n        \n        /* process all of our received updated domains */\n        \n        boolean result = processSignedDomains(signedDomains);\n        if (result) {\n            changeLogStore.setLastModificationTimestamp(lastModTimestamp.toString());\n        }\n        \n        return result;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Poll for new domains and updated domains from the ChangeLogStore (ZMS).  Called by  {@code DataUpdater.run()} thread. Deletes are handled separately in {@code processDomainDeletes()}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "2", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.getSignedDomain", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "SignedDomain getSignedDomain(String domainName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Gets the associated domain data for the key", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "3", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.removeLocalDomain", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "void removeLocalDomain(String domainName);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Remove the local domain record from the changelog store", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.saveLocalDomain", "methodParameterType": "String#SignedDomain#", "methodParameterName": "domainName#signedDomain#", "methodBody": "void saveLocalDomain(String domainName, SignedDomain signedDomain);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Save the local domain record from the changelog store", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "5", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.getLocalDomainList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<String> getLocalDomainList();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the names of all domain stored in local repository", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.getServerDomainList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Set<String> getServerDomainList();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Returns the list of all domains configured on server", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "7", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.getUpdatedSignedDomains", "methodParameterType": "StringBuilder#", "methodParameterName": "lastModTimeBuffer#", "methodBody": "SignedDomains getUpdatedSignedDomains(StringBuilder lastModTimeBuffer);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the list of domains modified since the last call", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.setLastModificationTimestamp", "methodParameterType": "String#", "methodParameterName": "lastModTime#", "methodBody": "void setLastModificationTimestamp(String lastModTime);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Notifies the store to update its changelog last modification timestamp. If the value is null then it notifies the stores to reset its changelog and during next retrieveDomainUpdates call to return set of all domains available in ZMS", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "9", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStore.supportsFullRefresh", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "boolean supportsFullRefresh();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "The change log store supports getting a full refresh from ZMS Server directly", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "10", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/ChangeLogStoreFactory.java", "methodName": "com.yahoo.athenz.zts.store.ChangeLogStoreFactory.create", "methodParameterType": "String#PrivateKey#String#CloudStore#", "methodParameterName": "ztsHomeDir#privateKey#privateKeyId#cloudStore#", "methodBody": "ChangeLogStore create(String ztsHomeDir, PrivateKey privateKey,\n                          String privateKeyId, CloudStore cloudStore);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create and return a new ChangeLogStore instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/store/impl/S3ChangeLogStore.java", "methodName": "com.yahoo.athenz.zts.store.impl.S3ChangeLogStore.listObjects", "methodParameterType": "AmazonS3#Collection<String>#long#", "methodParameterName": "s3#domains#modTime#", "methodBody": "void listObjects(AmazonS3 s3, Collection<String> domains, long modTime) {\n        \n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"listObjects: Retrieving domains from {} with mod time > {}\",\n                    s3BucketName, modTime);\n        }\n        \n        ObjectListing objectListing = s3.listObjects(new ListObjectsRequest()\n                .withBucketName(s3BucketName));\n        \n        String objectName;\n        while (objectListing != null) {\n            \n            // process each entry in our result set and add the domain\n            // name to our return list\n\n            final List<S3ObjectSummary> objectSummaries = objectListing.getObjectSummaries();\n            boolean listTruncated = objectListing.isTruncated();\n            \n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"listObjects: retrieved {} objects, more objects available - {}\",\n                        objectSummaries.size(), listTruncated);\n            }\n            \n            for (S3ObjectSummary objectSummary : objectSummaries) {\n                \n                // if mod time is specified then make sure we automatically skip\n                // any domains older than the specified value\n                \n                if (modTime > 0 && objectSummary.getLastModified().getTime() <= modTime) {\n                    continue;\n                }\n                \n                // for now skip any folders/objects that start with '.'\n                \n                objectName = objectSummary.getKey();\n                if (objectName.charAt(0) == '.') {\n                    continue;\n                }\n                domains.add(objectName);\n            }\n            \n            // check if the object listing is truncated or not (break out in this case)\n            // technically we can skip this call and just call listNextBatchOfResults\n            // since that returns null if the object listing is not truncated but \n            // this direct check here makes the logic easier to follow\n            \n            if (!listTruncated) {\n                break;\n            }\n            \n            objectListing = s3.listNextBatchOfObjects(objectListing);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#InfixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#CharacterLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#PrefixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement)Block)MethodDeclaration", "methodDoc": "list the objects in the zts bucket. If the mod time is specified as 0 then we want to list all objects otherwise, we only list objects that are newer than the specified timestamp", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "12", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreConnection.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreConnection.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void close();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Close the connection to the certificate record store", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreConnection.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreConnection.setOperationTimeout", "methodParameterType": "int#", "methodParameterName": "opTimeout#", "methodBody": "void setOperationTimeout(int opTimeout);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the timeout for the certificate record store operation", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreConnection.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreConnection.getX509CertRecord", "methodParameterType": "String#String#String#", "methodParameterName": "provider#instanceId#service#", "methodBody": "X509CertRecord getX509CertRecord(String provider, String instanceId, String service);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Retrieve the certificate record for the given instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreConnection.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreConnection.updateX509CertRecord", "methodParameterType": "X509CertRecord#", "methodParameterName": "certRecord#", "methodBody": "boolean updateX509CertRecord(X509CertRecord certRecord);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Update the specified certificate record in the store", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreConnection.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreConnection.insertX509CertRecord", "methodParameterType": "X509CertRecord#", "methodParameterName": "certRecord#", "methodBody": "boolean insertX509CertRecord(X509CertRecord certRecord);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Insert a new certificate record in the store", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreConnection.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreConnection.deleteX509CertRecord", "methodParameterType": "String#String#String#", "methodParameterName": "provider#instanceId#service#", "methodBody": "boolean deleteX509CertRecord(String provider, String instanceId, String service);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Delete the certificate record for the given instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreConnection.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreConnection.deleteExpiredX509CertRecords", "methodParameterType": "int#", "methodParameterName": "expiryTimeMins#", "methodBody": "int deleteExpiredX509CertRecords(int expiryTimeMins);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Delete all expired x509 certificate records. A certificate is considered expired if it hasn't been updated within the specified number of minutes", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStore.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStore.getConnection", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "CertRecordStoreConnection getConnection();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get a new connection to the certificate record store. In case of failure, a ResourceException is thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStore.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStore.setOperationTimeout", "methodParameterType": "int#", "methodParameterName": "opTimeout#", "methodBody": "void setOperationTimeout(int opTimeout);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the operation timeout in seconds", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStore.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStore.clearConnections", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void clearConnections();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clear all connections to the cert record store", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStore.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStore.log", "methodParameterType": "Principal#String#String#String#X509Certificate#", "methodParameterName": "principal#ip#provider#instanceId#x509Cert#", "methodBody": "void log(final Principal principal, final String ip, final String provider,\n             final String instanceId, final X509Certificate x509Cert);", "AST": "Javadoc#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Log the certificate details. This method will be called for all certificates issued by ZTS Server regardless or not it is checked against cert record details.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/crypki/AbstractHttpCertSigner.java", "methodName": "com.yahoo.athenz.zts.cert.impl.crypki.AbstractHttpCertSigner.getX509CertUri", "methodParameterType": "String#", "methodParameterName": "serverBaseUri#", "methodBody": "public abstract String getX509CertUri(String serverBaseUri);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return x.509 certificate uri based on server uri", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/crypki/AbstractHttpCertSigner.java", "methodName": "com.yahoo.athenz.zts.cert.impl.crypki.AbstractHttpCertSigner.getX509CertSigningRequest", "methodParameterType": "String#String#int#", "methodParameterName": "csr#keyUsage#expireMins#", "methodBody": "public abstract Object getX509CertSigningRequest(String csr, String keyUsage, int expireMins);", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return object based on given csr, usage and expiry", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/crypki/AbstractHttpCertSigner.java", "methodName": "com.yahoo.athenz.zts.cert.impl.crypki.AbstractHttpCertSigner.parseResponse", "methodParameterType": "InputStream#", "methodParameterName": "response#", "methodBody": "public abstract String parseResponse(InputStream response) throws IOException;", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Parse the response from certificate sisnger", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/crypki/AbstractHttpCertSigner.java", "methodName": "com.yahoo.athenz.zts.cert.impl.crypki.AbstractHttpCertSigner.createConnectionPooling", "methodParameterType": "SSLContext#", "methodParameterName": "sslContext#", "methodBody": "PoolingHttpClientConnectionManager createConnectionPooling(SSLContext sslContext) {\n\n        SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(sslContext);\n        Registry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory>create().register(\"https\", sslsf).build();\n        PoolingHttpClientConnectionManager poolingHttpClientConnectionManager = new PoolingHttpClientConnectionManager(registry);\n        \n        //route is host + port.  Since we have only one, set the max and the route the same\n\n        poolingHttpClientConnectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_POOL_PER_ROUTE);\n        poolingHttpClientConnectionManager.setMaxTotal(DEFAULT_MAX_POOL_TOTAL);\n        return poolingHttpClientConnectionManager;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a http client connection manager based on given ssl context", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/crypki/AbstractHttpCertSigner.java", "methodName": "com.yahoo.athenz.zts.cert.impl.crypki.AbstractHttpCertSigner.createHttpClient", "methodParameterType": "int#int#SSLContext#PoolingHttpClientConnectionManager#", "methodParameterName": "connectionTimeoutSec#readTimeoutSec#sslContext#poolingHttpClientConnectionManager#", "methodBody": "CloseableHttpClient createHttpClient(int connectionTimeoutSec, int readTimeoutSec, SSLContext sslContext, PoolingHttpClientConnectionManager poolingHttpClientConnectionManager) {\n        \n        //apache http client expects in milliseconds\n        RequestConfig config = RequestConfig.custom()\n                .setConnectTimeout((int) TimeUnit.MILLISECONDS.convert(connectionTimeoutSec, TimeUnit.SECONDS))\n                .setSocketTimeout((int) TimeUnit.MILLISECONDS.convert(readTimeoutSec, TimeUnit.SECONDS))\n                .setRedirectsEnabled(false)\n                .build();\n        return HttpClients.custom()\n                .setConnectionManager(poolingHttpClientConnectionManager)\n                .setDefaultRequestConfig(config)\n                .setSSLContext(sslContext)\n                .build();\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#MethodInvocation#SimpleName#PrimitiveType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)MethodInvocation(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create an http client based on given configuration settings", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/impl/crypki/AbstractHttpCertSigner.java", "methodName": "com.yahoo.athenz.zts.cert.impl.crypki.AbstractHttpCertSigner.processHttpResponse", "methodParameterType": "HttpUriRequest#int#", "methodParameterName": "request#expectedStatusCode#", "methodBody": "String processHttpResponse(HttpUriRequest request, int expectedStatusCode) throws ClientProtocolException, IOException {\n\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"connManager stats before: {}\" , this.connManager.getTotalStats().toString());\n        }\n        CloseableHttpResponse response = httpClient.execute(request);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"connManager stats after: {}\" , this.connManager.getTotalStats().toString());\n        }\n        // check for status code first\n        int statusCode = response.getStatusLine().getStatusCode();\n        if (statusCode != expectedStatusCode) {\n            LOGGER.error(\"unable to fetch requested uri '{}' status: {}\", x509CertUri, statusCode);\n            // Close an inputstream so that connections can go back to the pool.\n            if (response.getEntity().getContent() != null) {\n                response.getEntity().getContent().close();\n            }\n            return null;\n        }\n        // check for content\n        try (InputStream data = response.getEntity().getContent()) {\n            if (data == null) {\n                LOGGER.error(\"received empty response from uri '{}', status:  {}\", x509CertUri, statusCode);\n                return null;\n            }\n            return parseResponse(data);\n        }\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#ThisExpression#SimpleName#FieldAccess#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Process http response from crypki server", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509CertRequest.java", "methodName": "com.yahoo.athenz.zts.cert.X509CertRequest.validateDnsNames", "methodParameterType": "String#String#String#DataCache#String#String#List<String>#HostnameResolver#", "methodParameterName": "domainName#serviceName#provider#athenzSysDomainCache#serviceDnsSuffix#instanceHostname#instanceHostCnames#hostnameResolver#", "methodBody": "public boolean validateDnsNames(final String domainName, final String serviceName, final String provider,\n            final DataCache athenzSysDomainCache, final String serviceDnsSuffix, final String instanceHostname,\n            final List<String> instanceHostCnames, HostnameResolver hostnameResolver) {\n\n        // if the CSR has no dns names then we have nothing to check\n\n        if (dnsNames.isEmpty()) {\n            return true;\n        }\n\n        // if we're given an instance host and cname fields then we're going to validate\n        // to make sure it's correct for the given request. Any invalid host/cname field\n        // value will cause the request to be rejected\n\n        if (!validateInstanceHostname(provider, athenzSysDomainCache, instanceHostname, hostnameResolver)) {\n            return false;\n        }\n\n        if (!validateInstanceCnames(provider, athenzSysDomainCache, instanceHostname,\n                instanceHostCnames, hostnameResolver)) {\n            return false;\n        }\n\n        // make sure our provider dns list is empty\n\n        providerDnsNames.clear();\n\n        // verify that our dns name suffixes match before returning success\n        // if we have a match with our provider dns suffix then we're going\n        // to keep track of those entries in a separate list so we can\n        // send them to the provider for verification (provider does not\n        // have knowledge about the additional service dns domain entries\n        // so it doesn't need to get those). We also support the case of\n        // wildcard based on the service name in the format of:\n        // *.<service>.<domain-with-dashes>.<provider-dns-suffix>\n        // so we'll generate and pass the prefix to the function to verify\n        // and automatically skip those from sending to the provider\n\n        final String wildCardPrefix = \"*.\" + serviceName + \".\" + domainName.replace('.', '-') + \".\";\n        final String serviceDnsSuffixCheck = (serviceDnsSuffix != null) ? \".\" + serviceDnsSuffix : null;\n\n        final List<String> providerDnsSuffixList = athenzSysDomainCache.getProviderDnsSuffixList(provider);\n\n        for (String dnsName : dnsNames) {\n            if (!dnsSuffixCheck(dnsName, providerDnsSuffixList, serviceDnsSuffixCheck, wildCardPrefix,\n                    instanceHostname, instanceHostCnames)) {\n                return false;\n            }\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#StringLiteral#SimpleName#InfixExpression#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Verifies that the CSR contains dnsName entries that have one of the following provided dns suffixes.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509CertRequest.java", "methodName": "com.yahoo.athenz.zts.cert.X509CertRequest.validateDnsNames", "methodParameterType": "X509Certificate#", "methodParameterName": "cert#", "methodBody": "public boolean validateDnsNames(X509Certificate cert) {\n\n        List<String> certDnsNames = Crypto.extractX509CertDnsNames(cert);\n        if (certDnsNames.size() != dnsNames.size()) {\n            LOGGER.error(\"compareDnsNames - Mismatch of dnsNames in certificate ({}: {}) and CSR ({}: {})\",\n                    certDnsNames.size(), String.join(\", \", certDnsNames),\n                    dnsNames.size(), String.join(\", \", dnsNames));\n            return false;\n        }\n        \n        for (String dnsName : dnsNames) {\n            if (!certDnsNames.contains(dnsName)) {\n                LOGGER.error(\"compareDnsNames - Unknown dnsName in csr {}, csr-set ({}), certificate-set ({})\",\n                        dnsName, String.join(\", \", dnsNames), String.join(\", \", certDnsNames));\n                return false;\n            }\n        }\n        \n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compare dns Names specified in this CSR and given X509 Certificate to make sure they match.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/X509CertRequest.java", "methodName": "com.yahoo.athenz.zts.cert.X509CertRequest.validateInstanceId", "methodParameterType": "String#X509Certificate#", "methodParameterName": "reqInstanceId#cert#", "methodBody": "public boolean validateInstanceId(final String reqInstanceId, X509Certificate cert) {\n\n        // if specified, we must make sure it matches to the given value\n\n        if (!instanceId.equals(reqInstanceId)) {\n            LOGGER.error(\"Instanceid mismatch  csr: {}, uri: {}\", instanceId, reqInstanceId);\n            return false;\n        }\n\n        final String certInstanceId = X509CertUtils.extractRequestInstanceId(cert);\n        if (!instanceId.equals(certInstanceId)) {\n            LOGGER.error(\"Instanceid mismatch  csr: {}, cert: {}\", instanceId, certInstanceId);\n            return false;\n        }\n\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Compare instance id specified in this CSR and given X509 Certificate to make sure they match.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cert/CertRecordStoreFactory.java", "methodName": "com.yahoo.athenz.zts.cert.CertRecordStoreFactory.create", "methodParameterType": "PrivateKeyStore#", "methodParameterName": "pkeyStore#", "methodBody": "CertRecordStore create(PrivateKeyStore pkeyStore);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create and return a new CertRecordStore instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.processRoleMembers", "methodParameterType": "String#List<RoleMember>#", "methodParameterName": "roleName#members#", "methodBody": "void processRoleMembers(String roleName, List<RoleMember> members) {\n        \n        // early out\n        \n        if (members == null) {\n            return;\n        }\n        \n        // memberRoleCache: add members\n\n        long currentTime = System.currentTimeMillis();\n        for (RoleMember member : members) {\n            \n            // if the role member is already expired then there\n            // is no point to add it to the cache\n            \n            long expiration = member.getExpiration() == null ? 0 : member.getExpiration().millis();\n            if (expiration != 0 && expiration < currentTime) {\n                continue;\n            }\n            \n            // we're going to process 3 types of members\n            // * - all members have access to these roles\n            // <prefix>* - members with the key name prefix\n            // <member> - regular members\n            \n            final String memberName = member.getMemberName();\n            if (memberName.equals(\"*\")) {\n                memberAllRoleCache.add(new MemberRole(roleName, expiration));\n            } else if (memberName.endsWith(\"*\")) {\n                final String keyName = memberName.substring(0, memberName.length() - 1);\n                if (!memberPrefixRoleCache.containsKey(keyName)) {\n                    memberPrefixRoleCache.put(keyName, new HashSet<>());\n                }\n                final Set<MemberRole> rolesForMember = memberPrefixRoleCache.get(keyName);\n                rolesForMember.add(new MemberRole(roleName, expiration));\n            } else {\n                if (!memberRoleCache.containsKey(memberName)) {\n                    memberRoleCache.put(memberName, new HashSet<>());\n                }\n                final Set<MemberRole> rolesForMember = memberRoleCache.get(memberName);\n                rolesForMember.add(new MemberRole(roleName, expiration));\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#NumberLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#InfixExpression#InfixExpression#ContinueStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#StringLiteral#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(NumberLiteral)NumberLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Update  {@code memberRoleCache}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.getMemberRoleSet", "methodParameterType": "String#", "methodParameterName": "member#", "methodBody": "public Set<MemberRole> getMemberRoleSet(final String member) {\n        return memberRoleCache.get(member);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return roles belonging to a member", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.getProviderDnsSuffixList", "methodParameterType": "String#", "methodParameterName": "provider#", "methodBody": "public List<String> getProviderDnsSuffixList(final String provider) {\n        return providerDnsSuffixCache.get(provider);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns dns suffix list authorized for a provider", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.getProviderHostnameAllowedSuffixList", "methodParameterType": "String#", "methodParameterName": "provider#", "methodBody": "public List<String> getProviderHostnameAllowedSuffixList(final String provider) {\n        return providerHostnameAllowedSuffixCache.get(provider);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns allowed hostname suffix list authorized for a provider", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.getProviderHostnameDeniedSuffixList", "methodParameterType": "String#", "methodParameterName": "provider#", "methodBody": "public List<String> getProviderHostnameDeniedSuffixList(final String provider) {\n        return providerHostnameDeniedSuffixCache.get(provider);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns denied hostname suffix list authorized for a provider", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.getAllMemberRoleSet", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Set<MemberRole> getAllMemberRoleSet() {\n        return memberAllRoleCache;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return roles configured for all access", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.getPrefixMemberRoleSetMap", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Map<String, Set<MemberRole>> getPrefixMemberRoleSetMap() {\n        return memberPrefixRoleCache;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return roles configured for wildcard access", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos24/athenz/servers/zts/src/main/java/com/yahoo/athenz/zts/cache/DataCache.java", "methodName": "com.yahoo.athenz.zts.cache.DataCache.getMemberCount", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public int getMemberCount() {\n        return memberRoleCache.size();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the number of members in the cache", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/store/jdbc/JDBCObjectStore.java", "methodName": "com.yahoo.athenz.zms.store.jdbc.JDBCObjectStore.clearConnections", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void clearConnections() {\n        rwSrc.clearPoolConnections();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Clear all connections to the object store. This is called when the server tries to write some object to the database yet database reports that it's not in write-only mode thus indicating it failed over to another master. So we need to clear all our connections and start new ones.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/store/ObjectStore.java", "methodName": "com.yahoo.athenz.zms.store.ObjectStore.getConnection", "methodParameterType": "boolean#boolean#", "methodParameterName": "autoCommit#readWrite#", "methodBody": "ObjectStoreConnection getConnection(boolean autoCommit, boolean readWrite);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Get a new connection from the object store with the specified auto commit state and read-only/write mode", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "43", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/store/ObjectStore.java", "methodName": "com.yahoo.athenz.zms.store.ObjectStore.setOperationTimeout", "methodParameterType": "int#", "methodParameterName": "opTimeout#", "methodBody": "void setOperationTimeout(int opTimeout);", "AST": "Javadoc#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set the operation timeout for all requests", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/store/ObjectStore.java", "methodName": "com.yahoo.athenz.zms.store.ObjectStore.clearConnections", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void clearConnections();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clear all connections to the object store. This is called when the server tries to write some object to the object store yet the store reports that it's not in write-only mode thus indicating it failed over to another master. So we need to clear all our connections and start new ones.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/store/ObjectStoreFactory.java", "methodName": "com.yahoo.athenz.zms.store.ObjectStoreFactory.create", "methodParameterType": "PrivateKeyStore#", "methodParameterName": "pkeyStore#", "methodBody": "ObjectStore create(PrivateKeyStore pkeyStore);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Create and return a new ObjectStore instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "methodName": "com.yahoo.athenz.zms.ZMSImpl.schema", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Schema schema() {\n        return schema;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the ZMS Schema object, describing its API and types.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "47", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "methodName": "com.yahoo.athenz.zms.ZMSImpl.processListRequest", "methodParameterType": "String#AthenzObject#Integer#String#List<String>#", "methodParameterName": "domainName#objType#limit#skip#names#", "methodBody": "String processListRequest(String domainName, AthenzObject objType, Integer limit,\n            String skip, List<String> names) {\n        \n        switch (objType) {\n            case ROLE:\n                names.addAll(dbService.listRoles(domainName));\n                break;\n            case POLICY:\n                names.addAll(dbService.listPolicies(domainName));\n                break;\n            case SERVICE_IDENTITY:\n                names.addAll(dbService.listServiceIdentities(domainName));\n                break;\n            default:\n                return null;\n        }\n        \n        int count = names.size();\n        if (skip != null) {\n            for (int i = 0; i < count; i++) {\n                String name = names.get(i);\n                if (skip.equals(name)) {\n                    names.subList(0, i + 1).clear();\n                    count = names.size();\n                    break;\n                }\n            }\n        }\n        \n        String next = null;\n        if (hasExceededListLimit(limit, count)) {\n            names.subList(limit, count).clear();\n            next = names.get(limit - 1);\n        }\n        \n        return next;\n    }", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SimpleName#SwitchCase#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#BreakStatement#SwitchCase#NullLiteral#ReturnStatement#SwitchStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#PostfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#ForStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SwitchStatement(SimpleName)SimpleName(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase(SimpleName)SimpleName)SwitchCase(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(BreakStatement)BreakStatement(SwitchCase)SwitchCase(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)SwitchStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(PostfixExpression(SimpleName)SimpleName)PostfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)ForStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "process the list request for the given object type - e.g. role, policy, etc if the limit is specified and we have reached that limit then return the name of the object that should be set at the next item for the subsequent list operation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "methodName": "com.yahoo.athenz.zms.ZMSImpl.putProviderResourceGroupRoles", "methodParameterType": "ResourceContext#String#String#String#String#String#ProviderResourceGroupRoles#", "methodParameterName": "ctx#tenantDomain#provSvcDomain#provSvcName#resourceGroup#auditRef#detail#", "methodBody": "@Override\n    public ProviderResourceGroupRoles putProviderResourceGroupRoles(ResourceContext ctx, String tenantDomain,\n             String provSvcDomain, String provSvcName, String resourceGroup, String auditRef,\n             ProviderResourceGroupRoles detail) {\n\n        final String caller = \"putproviderresourcegrouproles\";\n        metric.increment(ZMSConsts.HTTP_PUT);\n        logPrincipal(ctx);\n\n        if (readOnlyMode) {\n            throw ZMSUtils.requestError(SERVER_READ_ONLY_MESSAGE, caller);\n        }\n\n        validateRequest(ctx.request(), caller);\n\n        validate(provSvcDomain, TYPE_DOMAIN_NAME, caller);\n        validate(provSvcName, TYPE_SIMPLE_NAME, caller); //not including the domain, this is the domain's service\n        validate(tenantDomain, TYPE_DOMAIN_NAME, caller);\n        validate(detail, TYPE_PROVIDER_RESOURCE_GROUP_ROLES, caller);\n        validate(resourceGroup, TYPE_COMPOUND_NAME, caller);\n\n        // for consistent handling of all requests, we're going to convert\n        // all incoming object values into lower case (e.g. domain, role,\n        // policy, service, etc name)\n        \n        provSvcDomain = provSvcDomain.toLowerCase();\n        provSvcName = provSvcName.toLowerCase();\n        tenantDomain = tenantDomain.toLowerCase();\n        resourceGroup = resourceGroup.toLowerCase();\n        AthenzObject.PROVIDER_RESOURCE_GROUP_ROLES.convertToLowerCase(detail);\n\n        // we can't have the provider and tenant be in the same domain\n        // as we don't allow delegation of roles onto themselves\n\n        if (provSvcDomain.equals(tenantDomain)) {\n            throw ZMSUtils.requestError(\"Provider and tenant domains cannot be the same\", caller);\n        }\n\n        // validate our detail object against uri components\n\n        if (!validateProviderResourceGroupRolesObject(detail, provSvcDomain, provSvcName, tenantDomain,\n                resourceGroup)) {\n            throw ZMSUtils.requestError(\"Invalid provider resource group role object\", caller);\n        }\n\n        final String principalDomain = getPrincipalDomain(ctx);\n        metric.increment(ZMSConsts.HTTP_REQUEST, provSvcDomain, principalDomain);\n        metric.increment(caller, provSvcDomain, principalDomain);\n        Object timerMetric = metric.startTiming(\"putproviderresourcegrouproles_timing\", provSvcDomain, principalDomain);\n        \n        // verify that request is properly authenticated for this request\n        \n        verifyAuthorizedServiceOperation(((RsrcCtxWrapper) ctx).principal().getAuthorizedService(), caller);\n        \n        if (LOG.isInfoEnabled()) {\n            LOG.info(\"putProviderResourceGroupRoles: domain=\" + provSvcDomain + \", service=\" +\n                provSvcName + \", tenant-domain=\" + tenantDomain + \", resource-group=\" + resourceGroup +\n                \", detail=\" + detail);\n        }\n        \n        // set up our tenant admin policy so provider can check admin's access\n        \n        dbService.setupTenantAdminPolicy(tenantDomain, provSvcDomain, provSvcName, auditRef, caller);\n        \n        // now we're going to setup our roles\n        \n        List<TenantRoleAction> roleActions = detail.getRoles();\n        List<String> roles = new ArrayList<>();\n        for (TenantRoleAction roleAction : roleActions) {\n            roles.add(roleAction.getRole());\n        }\n        \n        // we're going to create a separate role for each one of tenant roles returned\n        // based on its action and set the caller as a member in each role\n        \n        dbService.executePutProviderRoles(ctx, tenantDomain, provSvcDomain, provSvcName, resourceGroup,\n            roles, auditRef, caller);\n        \n        // at this point the tenant side is complete. If the token was a chained\n        // token signed by the provider service then we're going to process the\n        // provider side as well thus complete the tenancy on-boarding process\n        \n        String authorizedService = ((RsrcCtxWrapper) ctx).principal().getAuthorizedService();\n        if (isAuthorizedProviderService(authorizedService, provSvcDomain, provSvcName)) {\n\n            // first we need to setup the admin roles in case this\n            // happens to be the first resource group\n\n            setupTenantAdminPolicyInProvider(ctx, provSvcDomain, provSvcName, tenantDomain,\n                    auditRef, caller);\n\n            // now onboard the requested resource group\n\n            dbService.executePutTenantRoles(ctx, provSvcDomain, provSvcName, tenantDomain,\n                    resourceGroup, roleActions, auditRef, caller);\n        }\n\n        metric.stopTiming(timerMetric, provSvcDomain, principalDomain);\n        return detail;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(SimpleName)SimpleName(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "This sets up the assume roles in the tenant. If the tenants admin user token has been authorized by the provider, the providers domain will be updated as well, thus completing the tenancy on-boarding in a single step.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "methodName": "com.yahoo.athenz.zms.ZMSImpl.getPublicKey", "methodParameterType": "String#String#String#", "methodParameterName": "domain#service#keyId#", "methodBody": "@Override\n    public String getPublicKey(String domain, String service, String keyId) {\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getPublicKey: service=\" + domain + \".\" + service + \" key-id=\" + keyId);\n        }\n        \n        if (service == null || keyId == null) {\n            return null;\n        }\n        \n        // for consistent handling of all requests, we're going to convert\n        // all incoming object values into lower case (e.g. domain, role,\n        // policy, service, etc name)\n        \n        domain = domain.toLowerCase();\n        service = service.toLowerCase();\n        keyId = keyId.toLowerCase();\n        \n        // special handling for service sys.auth.zms which is ourselves\n        // so we'll just lookup our key in our map\n\n        String pubKey = null;\n        if (isZMSService(domain, service)) {\n            pubKey = serverPublicKeyMap.get(keyId);\n        }\n        \n        // if it's not the ZMS Server public key then lookup the \n        // public key from ZMS data\n        \n        if (pubKey == null) {\n            try {\n                PublicKeyEntry keyEntry = dbService.getServicePublicKeyEntry(domain, service, keyId, true);\n                if (keyEntry != null) {\n                    pubKey = keyEntry.getKey();\n                }\n            } catch (ResourceException ex) {\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"getPublicKey: unable to get public key: \" + ex.getMessage());\n                }\n                return null;\n            }\n        }\n\n        if (pubKey == null) {\n            if (LOG.isWarnEnabled()) {\n                LOG.warn(\"getPublicKey: service=\" + domain + \".\" + service + \" has no public key registered\");\n            }\n            return null;\n        }\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"getPublicKey: service public key: \" + pubKey);\n        }\n        \n        return Crypto.ybase64DecodeString(pubKey);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "implements KeyStore getPublicKey", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/ZMSImpl.java", "methodName": "com.yahoo.athenz.zms.ZMSImpl.verifyAuthorizedServiceOperation", "methodParameterType": "String#String#String#String#", "methodParameterName": "authorizedService#operationName#opItemType#opItemVal#", "methodBody": "void verifyAuthorizedServiceOperation(String authorizedService, String operationName,\n            String opItemType, String opItemVal) {\n        \n        // only process this request if we have an authorized service specified\n        \n        if (authorizedService == null) {\n            return;\n        }\n        \n        // lookup the authorized services struct and see if we have the\n        // service specified in the allowed list\n        \n        AuthorizedService authzService = serverAuthorizedServices.get(authorizedService);\n        if (authzService == null) {\n            throw ZMSUtils.forbiddenError(\"Unauthorized Service \" + authorizedService,\n                    operationName);\n        }\n        \n        // if the list is empty then we do not allow any operations\n        \n        ArrayList<AllowedOperation> ops = authzService.getAllowedOperations();\n        if (ops == null || ops.isEmpty()) {\n            throw ZMSUtils.forbiddenError(\"Unauthorized Operation (\" + operationName\n                    + \") for Service \" + authorizedService, operationName);\n        }\n        \n        // otherwise make sure the operation is allowed for this service\n        \n        boolean opAllowed = false;\n        for (AllowedOperation op : ops) {\n            if (!op.getName().equalsIgnoreCase(operationName)) {\n                continue;\n            }\n            \n            opAllowed = op.isOperationAllowedOn(opItemType, opItemVal);\n            break;\n        }\n        \n        if (!opAllowed) {\n            throw ZMSUtils.forbiddenError(\"Unauthorized Operation (\" + operationName\n                    + \") for Service \" + authorizedService\n                    + (opItemType != null && !opItemType.isEmpty() ? \" on opItemKey \" + opItemType + \" and opItemVal \" + opItemVal : \"\"),\n                    operationName);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#BreakStatement#Block#EnhancedForStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#StringLiteral#ConditionalExpression#ParenthesizedExpression#InfixExpression#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)EnhancedForStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(ParenthesizedExpression(ConditionalExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(StringLiteral)StringLiteral)ConditionalExpression)ParenthesizedExpression)InfixExpression(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "If opItemType and value are not defined in the authorized_services JSON file, you can simply pass NULL for these two values.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/utils/ZMSUtils.java", "methodName": "com.yahoo.athenz.zms.utils.ZMSUtils.getAuditLogMsgBuilder", "methodParameterType": "ResourceContext#AuditLogger#String#String#String#String#", "methodParameterName": "ctx#auditLogger#domainName#auditRef#caller#method#", "methodBody": "public static AuditLogMsgBuilder getAuditLogMsgBuilder(ResourceContext ctx,\n            AuditLogger auditLogger, String domainName, String auditRef, String caller,\n            String method) {\n        \n        AuditLogMsgBuilder msgBldr = auditLogger.getMsgBuilder();\n\n        // get the where - which means where this server is running\n        \n        msgBldr.where(ZMSImpl.serverHostName);\n        msgBldr.whatDomain(domainName).why(auditRef).whatApi(caller).whatMethod(method);\n\n        // get the 'who' and set it\n        \n        if (ctx != null) {\n            Principal princ = ((RsrcCtxWrapper) ctx).principal();\n            if (princ != null) {\n                String fullName = princ.getFullName();\n                String unsignedCreds = princ.getUnsignedCredentials();\n                if (unsignedCreds == null) {\n                    StringBuilder sb = new StringBuilder();\n                    sb.append(\"who-name=\").append(princ.getName());\n                    sb.append(\",who-domain=\").append(princ.getDomain());\n                    sb.append(\",who-fullname=\").append(fullName);\n                    List<String> roles = princ.getRoles();\n                    if (roles != null && roles.size() > 0) {\n                        sb.append(\",who-roles=\").append(roles.toString());\n                    }\n                    unsignedCreds = sb.toString();\n                }\n                msgBldr.who(unsignedCreds);\n                msgBldr.whoFullName(fullName);\n            }\n\n            // get the client IP\n            \n            msgBldr.clientIp(ServletRequestUtil.getRemoteAddress(ctx.request()));\n        }\n\n        return msgBldr;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Setup a new AuditLogMsgBuilder object with common values.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "methodName": "com.yahoo.athenz.zms.DBService.checkDomainAuditEnabled", "methodParameterType": "ObjectStoreConnection#String#String#String#String#int#", "methodParameterName": "con#domainName#auditRef#caller#principal#objectType#", "methodBody": "void checkDomainAuditEnabled(ObjectStoreConnection con, final String domainName,\n            final String auditRef, final String caller, final String principal, int objectType) {\n\n        // before retrieving the domain details make sure we are\n        // configured to enforce audit reference field on the given\n        // object type\n\n        if (!auditRefSet.get(objectType)) {\n            return;\n        }\n\n        Domain domain = con.getDomain(domainName);\n        if (domain == null) {\n            con.rollbackChanges();\n            throw ZMSUtils.notFoundError(caller + \": Unknown domain: \" + domainName, caller);\n        }\n\n        auditReferenceCheck(con, domain, auditRef, caller, principal);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If the domain has audit enabled, and user did not provide the auditRef, an exception will be thrown", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos24/athenz/servers/zms/src/main/java/com/yahoo/athenz/zms/DBService.java", "methodName": "com.yahoo.athenz.zms.DBService.checkRoleAuditEnabled", "methodParameterType": "ObjectStoreConnection#Role#String#String#String#", "methodParameterName": "con#role#auditRef#caller#principal#", "methodBody": "void checkRoleAuditEnabled(ObjectStoreConnection con, Role role, final String auditRef,\n            final String caller, final String principal) {\n\n        if (role.getAuditEnabled() == Boolean.TRUE) {\n            if (auditRef == null || auditRef.length() == 0) {\n                con.rollbackChanges();\n                throw ZMSUtils.requestError(caller + \": Audit reference required for role: \" + role.getName(), caller);\n            }\n\n            if (auditReferenceValidator != null && !auditReferenceValidator.validateReference(auditRef, principal, caller)) {\n                con.rollbackChanges();\n                throw ZMSUtils.requestError(caller + \": Audit reference validation failed for role: \" + role.getName() +\n                        \", auditRef: \" + auditRef, caller);\n            }\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ThrowStatement#Block#IfStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block)IfStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "If the role has audit enabled, and user did not provide the auditRef, an exception will be thrown.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos24/athenz/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/InstanceProviderClient.java", "methodName": "com.yahoo.athenz.instance.provider.InstanceProviderClient.responseText", "methodParameterType": "Response#", "methodParameterName": "response#", "methodBody": "private String responseText(final Response response) {\n        String data = null;\n        try {\n            data = response.readEntity(String.class);\n        } catch (Exception ignored) {\n        }\n        if (data == null) {\n            return \"N/A\";\n        }\n        return data.replace('\\n', ' ');\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#StringLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(StringLiteral)StringLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If we're given any response in our rejected provider confirmation or refresh request, we're going to include that as part of the resource exception text so it can be logged. If there is no response or any exception while trying to read the response, we'll just return N/A as the response text.", "call_func_name": ["javax.ws.rs.core.Response.readEntity", "java.lang.String.replace"], "call_func_parameter": [["java.lang.Class"], ["char", "char"]], "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos24/athenz/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/InstanceProvider.java", "methodName": "com.yahoo.athenz.instance.provider.InstanceProvider.getProviderScheme", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default Scheme getProviderScheme() {\n        return Scheme.UNKNOWN;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get Provider scheme. Currently supported schemes are HTTP or CLASS. By default we'll return UNKNOWN.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos24/athenz/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/InstanceProvider.java", "methodName": "com.yahoo.athenz.instance.provider.InstanceProvider.initialize", "methodParameterType": "String#String#SSLContext#KeyStore#", "methodParameterName": "provider#endpoint#sslContext#keyStore#", "methodBody": "void initialize(String provider, String endpoint, SSLContext sslContext, KeyStore keyStore);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Set provider details and initialize the provider object", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos24/athenz/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/InstanceProvider.java", "methodName": "com.yahoo.athenz.instance.provider.InstanceProvider.confirmInstance", "methodParameterType": "InstanceConfirmation#", "methodParameterName": "confirmation#", "methodBody": "InstanceConfirmation confirmInstance(InstanceConfirmation confirmation);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Contact the Instance provider and confirm that the requested instance details are valid in order for ZTS to issue a service identity certificate for the instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "58", "file": "/root/repos/repos24/athenz/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/InstanceProvider.java", "methodName": "com.yahoo.athenz.instance.provider.InstanceProvider.refreshInstance", "methodParameterType": "InstanceConfirmation#", "methodParameterName": "confirmation#", "methodBody": "InstanceConfirmation refreshInstance(InstanceConfirmation confirmation);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Contact the Instance provider and confirm that the requested instance details are valid in order for ZTS to refresh a service identity certificate for the instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos24/athenz/libs/java/instance_provider/src/main/java/com/yahoo/athenz/instance/provider/InstanceProvider.java", "methodName": "com.yahoo.athenz.instance.provider.InstanceProvider.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default void close() {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Close the client and, if necessary, release any allocated resources", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/KeyManagerProxy.java", "methodName": "com.oath.auth.KeyManagerProxy.setKeyManager", "methodParameterType": "KeyManager[]#", "methodParameterName": "keyManagers#", "methodBody": "public void setKeyManager(final KeyManager[] keyManagers) {\n        keyManager = (X509ExtendedKeyManager) keyManagers[0];\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ArrayAccess#CastExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)CastExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "overwrites the existing key manager.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/KeyRefresher.java", "methodName": "com.oath.auth.KeyRefresher.KeyRefresher", "methodParameterType": "String#String#TrustStore#KeyManagerProxy#TrustManagerProxy#", "methodParameterName": "athenzPublicCert#athenzPrivateKey#trustStore#keyManagerProxy#trustManagerProxy#", "methodBody": "public KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n            final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy) throws NoSuchAlgorithmException {\n        this(athenzPublicCert, athenzPrivateKey, trustStore, keyManagerProxy, trustManagerProxy, null);\n        \n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "this method should be used in the following way 1) invoked primarily by the Utils.generateKeyRefresher method 2) an outside callers can then call getKeyManagerProxy() and getTrustManagerProxy() 3) pass those proxies into the Utils.BuildSSLContext method 4) use that SSLContext when starting a server 5) once server is started, call startup() (in this class) at this point, when the private/public keys / trustStore files change, it will automatically update the SSL context so any new connections will use the new values, and no old connections will fail.  So presumably when those connections die (from expiring TTL values) they will create new connections and leverage the new values.  No interruption to the service will be experienced. Once created, it needs to be turned on using the startup() method.  It will then wake up once an hour and check the various public/private keys and trust store files to see if they have been updated.  If so, it will automatically update the SSL context correlating to the client/server that the", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/KeyRefresher.java", "methodName": "com.oath.auth.KeyRefresher.KeyRefresher", "methodParameterType": "String#String#TrustStore#KeyManagerProxy#TrustManagerProxy#KeyRefresherListener#", "methodParameterName": "athenzPublicCert#athenzPrivateKey#trustStore#keyManagerProxy#trustManagerProxy#keyRefresherListener#", "methodBody": "public KeyRefresher(final String athenzPublicCert, final String athenzPrivateKey, final TrustStore trustStore,\n                        final KeyManagerProxy keyManagerProxy, final TrustManagerProxy trustManagerProxy,\n                        final KeyRefresherListener keyRefresherListener)\n            throws NoSuchAlgorithmException {\n        this.athenzPublicCert = athenzPublicCert;\n        this.athenzPrivateKey = athenzPrivateKey;\n        this.trustStore = trustStore;\n        this.keyManagerProxy = keyManagerProxy;\n        this.trustManagerProxy = trustManagerProxy;\n        this.keyRefresherListener = keyRefresherListener;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param athenzPublicCert", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/KeyRefresher.java", "methodName": "com.oath.auth.KeyRefresher.haveFilesBeenChanged", "methodParameterType": "String#byte[]#", "methodParameterName": "filePath#checksum#", "methodBody": "protected boolean haveFilesBeenChanged(final String filePath, byte[] checksum) {\n\n        // if we don't have an absolute path for our file path then it\n        // was retrieved from our resource and as such there is no need\n        // to check to see if it was changed or not.\n\n        final Path path = Paths.get(filePath);\n        if (!path.isAbsolute()) {\n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"Relative path: {} specified - ignoring change check\", filePath);\n            }\n            return false;\n        }\n\n        try (InputStream is = Files.newInputStream(path);\n             DigestInputStream digestInputStream = new DigestInputStream(is, md)) {\n            //noinspection StatementWithEmptyBody\n            while (digestInputStream.read() != -1) {\n                // do nothing, just read until the EoF\n            }\n        } catch (IOException ex) {\n            //this is best effort, if we couldn't read the file, assume its the same\n            LOGGER.warn(\"Error reading file \" + filePath, ex);\n            return false;\n        }\n        byte[] digest = md.digest();\n        if (!Arrays.equals(checksum, digest)) {\n            //they aren't the same, overwrite old checksum\n            System.arraycopy(digest, 0, checksum, 0, digest.length);\n            return true;\n        }\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#PrefixExpression#InfixExpression#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#CatchClause#TryStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationExpression(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block)Block)WhileStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the checksum for the file has changed, then update the checksum and return true.  else return false", "call_func_name": ["java.nio.file.Paths.get", "java.nio.file.Path.isAbsolute", "org.slf4j.Logger.isDebugEnabled", "org.slf4j.Logger.debug", "java.nio.file.Files.newInputStream", "java.security.DigestInputStream.<init>", "java.security.DigestInputStream.read", "java.security.DigestInputStream.close", "java.lang.Throwable.addSuppressed", "java.io.InputStream.close", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.warn", "java.security.MessageDigest.digest", "java.util.Arrays.equals", "java.lang.System.arraycopy"], "call_func_parameter": [["java.lang.String", "java.lang.String[]"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.nio.file.Path", "java.nio.file.OpenOption[]"], ["java.io.InputStream", "java.security.MessageDigest"], [""], [""], ["java.lang.Throwable"], [""], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Throwable"], [""], ["byte[]", "byte[]"], ["java.lang.Object", "int", "java.lang.Object", "int", "int"]], "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/TrustManagerProxy.java", "methodName": "com.oath.auth.TrustManagerProxy.setTrustManager", "methodParameterType": "TrustManager[]#", "methodParameterName": "trustManagers#", "methodBody": "public void setTrustManager(final TrustManager[] trustManagers) {\n        trustManager = (X509ExtendedTrustManager) trustManagers[0];\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#NumberLiteral#ArrayAccess#CastExpression#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess)CastExpression)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "overwrites the existing key manager.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.generateKeyRefresher", "methodParameterType": "String#String#String#", "methodParameterName": "trustStorePath#athenzPublicCert#athenzPrivateKey#", "methodBody": "public static KeyRefresher generateKeyRefresher(final String trustStorePath,\n            final String athenzPublicCert, final String athenzPrivateKey)\n            throws FileNotFoundException, IOException, InterruptedException, KeyRefresherException {\n        return generateKeyRefresher(trustStorePath, KEYSTORE_PASSWORD, athenzPublicCert,\n                athenzPrivateKey, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes. Using default password of \"secret\" for both stores.", "call_func_name": ["com.oath.auth.Utils.generateKeyRefresher"], "call_func_parameter": [["java.lang.String", "char[]", "java.lang.String", "java.lang.String", "com.oath.auth.KeyRefresherListener"]], "passed_comments": [{"com.oath.auth.Utils.generateKeyRefresher": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes."}]}, {"index": "66", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.generateKeyRefresher", "methodParameterType": "String#String#String#String#", "methodParameterName": "trustStorePath#trustStorePassword#athenzPublicCert#athenzPrivateKey#", "methodBody": "public static KeyRefresher generateKeyRefresher(final String trustStorePath,\n            final String trustStorePassword, final String athenzPublicCert, final String athenzPrivateKey)\n            throws FileNotFoundException, IOException, InterruptedException, KeyRefresherException {\n        return generateKeyRefresher(trustStorePath, trustStorePassword.toCharArray(),\n                athenzPublicCert, athenzPrivateKey, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes.", "call_func_name": ["java.lang.String.toCharArray", "com.oath.auth.Utils.generateKeyRefresher"], "call_func_parameter": [[""], ["java.lang.String", "char[]", "java.lang.String", "java.lang.String", "com.oath.auth.KeyRefresherListener"]], "passed_comments": [{"com.oath.auth.Utils.generateKeyRefresher": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes."}]}, {"index": "67", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.generateKeyRefresher", "methodParameterType": "String#char[]#String#String#", "methodParameterName": "trustStorePath#trustStorePassword#athenzPublicCert#athenzPrivateKey#", "methodBody": "public static KeyRefresher generateKeyRefresher(final String trustStorePath,\n            final char[] trustStorePassword, final String athenzPublicCert, final String athenzPrivateKey)\n            throws FileNotFoundException, IOException, InterruptedException, KeyRefresherException {\n        return generateKeyRefresher(trustStorePath, trustStorePassword,\n                athenzPublicCert, athenzPrivateKey, null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes.", "call_func_name": ["com.oath.auth.Utils.generateKeyRefresher"], "call_func_parameter": [["java.lang.String", "char[]", "java.lang.String", "java.lang.String", "com.oath.auth.KeyRefresherListener"]], "passed_comments": [{"com.oath.auth.Utils.generateKeyRefresher": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes."}]}, {"index": "68", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.generateKeyRefresher", "methodParameterType": "String#char[]#String#String#KeyRefresherListener#", "methodParameterName": "trustStorePath#trustStorePassword#athenzPublicCert#athenzPrivateKey#keyRefresherListener#", "methodBody": "public static KeyRefresher generateKeyRefresher(final String trustStorePath,\n            final char[] trustStorePassword, final String athenzPublicCert,\n            final String athenzPrivateKey, final KeyRefresherListener keyRefresherListener)\n            throws FileNotFoundException, IOException, InterruptedException, KeyRefresherException {\n        TrustStore trustStore = new TrustStore(trustStorePath,\n                new JavaKeyStoreProvider(trustStorePath, trustStorePassword));\n        return getKeyRefresher(athenzPublicCert, athenzPrivateKey, trustStore);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes.", "call_func_name": ["com.oath.auth.JavaKeyStoreProvider.<init>", "com.oath.auth.TrustStore.<init>", "com.oath.auth.Utils.getKeyRefresher"], "call_func_parameter": [["java.lang.String", "char[]"], ["java.lang.String", "com.oath.auth.KeyStoreProvider"], ["java.lang.String", "java.lang.String", "com.oath.auth.TrustStore"]], "passed_comments": "/"}, {"index": "69", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.generateKeyRefresherFromCaCert", "methodParameterType": "String#String#String#", "methodParameterName": "caCertPath#athenzPublicCert#athenzPrivateKey#", "methodBody": "public static KeyRefresher generateKeyRefresherFromCaCert(final String caCertPath,\n            final String athenzPublicCert, final String athenzPrivateKey) throws FileNotFoundException, IOException, InterruptedException, KeyRefresherException {\n        TrustStore trustStore = new TrustStore(caCertPath, new CaCertKeyStoreProvider(caCertPath));\n        return getKeyRefresher(athenzPublicCert, athenzPrivateKey, trustStore);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes. Using default password of \"secret\" for both stores.", "call_func_name": ["com.oath.auth.CaCertKeyStoreProvider.<init>", "com.oath.auth.TrustStore.<init>", "com.oath.auth.Utils.getKeyRefresher"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "com.oath.auth.KeyStoreProvider"], ["java.lang.String", "java.lang.String", "com.oath.auth.TrustStore"]], "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.buildSSLContext", "methodParameterType": "KeyManagerProxy#TrustManagerProxy#", "methodParameterName": "keyManagerProxy#trustManagerProxy#", "methodBody": "public static SSLContext buildSSLContext(KeyManagerProxy keyManagerProxy,\n            TrustManagerProxy trustManagerProxy) throws KeyRefresherException {\n        SSLContext sslContext = null;\n        try {\n            sslContext = SSLContext.getInstance(SSLCONTEXT_ALGORITHM);\n            sslContext.init(new KeyManager[]{ keyManagerProxy }, new TrustManager[] { trustManagerProxy }, null);\n        } catch (NoSuchAlgorithmException  e) {\n            throw new KeyRefresherException(\"No Provider supports a SSLContextSpi implementation for the specified protocol \" + SSLCONTEXT_ALGORITHM , e);\n        } catch (KeyManagementException e) {\n            throw new KeyRefresherException(\"Unable to create SSLContext.\", e);\n        } \n        return sslContext;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#ArrayInitializer#ArrayCreation#NullLiteral#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#InfixExpression#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(ArrayInitializer(SimpleName)SimpleName)ArrayInitializer)ArrayCreation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "this method will create a new SSLContext object that can be updated on the fly should the public/private keys / trustStore change.", "call_func_name": ["javax.net.ssl.SSLContext.getInstance", "javax.net.ssl.SSLContext.init", "com.oath.auth.KeyRefresherException.<init>"], "call_func_parameter": [["java.lang.String"], ["javax.net.ssl.KeyManager[]", "javax.net.ssl.TrustManager[]", "java.security.SecureRandom"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.createKeyStore", "methodParameterType": "String#String#", "methodParameterName": "athenzPublicCert#athenzPrivateKey#", "methodBody": "public static KeyStore createKeyStore(final String athenzPublicCert, final String athenzPrivateKey) throws FileNotFoundException, IOException, InterruptedException, KeyRefresherException {\n        if (athenzPublicCert == null || athenzPublicCert.isEmpty()) {\n            throw new FileNotFoundException(\"athenzPublicCert can not be empty\");\n        }\n        if (athenzPrivateKey == null || athenzPrivateKey.isEmpty()) {\n            throw new FileNotFoundException(\"athenzPrivateKey can not be empty\");\n        }\n        \n        List<? extends Certificate> certificates;\n        PrivateKey privateKey;\n        KeyStore keyStore = null;\n        File certFile;\n        File keyFile;\n\n        if (Paths.get(athenzPublicCert).isAbsolute() && Paths.get(athenzPrivateKey).isAbsolute()) {\n            certFile = new File(athenzPublicCert);\n            keyFile = new File(athenzPrivateKey);\n            long startTime = System.currentTimeMillis();\n            while (!certFile.exists() || !keyFile.exists()) {\n                long durationInMillis = System.currentTimeMillis() - startTime;\n                if (durationInMillis > KEY_WAIT_TIME_MILLIS) {\n                    throw new KeyRefresherException(\"Keyfresher waited \" + durationInMillis\n                            + \" ms for valid public cert: \" + athenzPublicCert + \" or private key: \"\n                            + athenzPrivateKey + \" files. Giving up.\");\n                }\n                LOG.error(\"Missing Athenz public certificate {} or private key {} files. Waiting {} ms\",\n                        athenzPublicCert, athenzPrivateKey, durationInMillis);\n                Thread.sleep(1000);\n            }\n        } else {\n            URL certURL = Utils.class.getClassLoader().getResource(athenzPublicCert);\n            URL keyURL = Utils.class.getClassLoader().getResource(athenzPrivateKey);\n            if (null == certURL || null == keyURL) {\n                throw new IllegalArgumentException(\"Certificate or private key file is empty.\");\n            }\n            certFile = new File(certURL.getFile());\n            keyFile = new File(keyURL.getFile());\n        }\n\n        try (InputStream publicCertStream  = new FileInputStream(certFile);\n                InputStream privateKeyStream =  new FileInputStream(keyFile);\n                PEMParser pemParser = new PEMParser(new InputStreamReader(privateKeyStream))) {\n\n            final CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n            final JcaPEMKeyConverter pemConverter = new JcaPEMKeyConverter();\n            Object key = pemParser.readObject();\n            \n            if (key instanceof PEMKeyPair) {\n                PrivateKeyInfo pKeyInfo = ((PEMKeyPair) key).getPrivateKeyInfo();\n                privateKey = pemConverter.getPrivateKey(pKeyInfo);\n            } else if (key instanceof PrivateKeyInfo) {\n                privateKey = pemConverter.getPrivateKey((PrivateKeyInfo) key);\n            } else {\n                throw new KeyRefresherException(\"Unknown object type: \" + key.getClass().getName());\n            }\n\n            certificates = (List<? extends Certificate>) cf.generateCertificates(publicCertStream);\n            if (certificates.isEmpty()) {\n                throw new KeyRefresherException(\"Certificate file contains empty certificate or an invalid certificate.\");\n            }\n             //We are going to assume that the first one is the main certificate which will be used for the alias\n            String alias = ((X509Certificate) certificates.get(0)).getSubjectX500Principal().getName();\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"{} number of certificates found.  Using {} alias to create the keystore\", certificates.size(), alias);\n            }\n            keyStore = KeyStore.getInstance(DEFAULT_KEYSTORE_TYPE);\n            keyStore.load(null);\n            keyStore.setKeyEntry(alias, privateKey, KEYSTORE_PASSWORD, certificates.toArray(new X509Certificate[certificates.size()]));\n        \n        } catch (CertificateException |  NoSuchAlgorithmException e) {\n            String keyStoreFailMsg = \"Unable to load \" + athenzPublicCert + \" as a KeyStore.  Please check the validity of the file.\";\n            throw new KeyRefresherException(keyStoreFailMsg, e);\n        } catch (KeyStoreException ignored) {\n            LOG.error(\"No Provider supports a KeyStoreSpi implementation for the specified type.\", ignored);\n        }\n        \n        return keyStore;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ExpressionStatement#Block#WhileStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#NullLiteral#SimpleName#InfixExpression#NullLiteral#SimpleName#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationExpression#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#NumberLiteral#MethodInvocation#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ExpressionStatement)Block)WhileStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(VariableDeclarationExpression(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param athenzPublicCert the location on the public certificate file", "call_func_name": ["java.lang.String.isEmpty", "java.io.FileNotFoundException.<init>", "java.nio.file.Paths.get", "java.nio.file.Path.isAbsolute", "java.io.File.<init>", "java.lang.System.currentTimeMillis", "java.io.File.exists", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.oath.auth.KeyRefresherException.<init>", "java.lang.Long.valueOf", "org.slf4j.Logger.error", "java.lang.Thread.sleep", "java.lang.Class.getClassLoader", "java.lang.ClassLoader.getResource", "java.lang.IllegalArgumentException.<init>", "java.net.URL.getFile", "java.io.FileInputStream.<init>", "java.io.InputStreamReader.<init>", "org.bouncycastle.openssl.PEMParser.<init>", "java.security.cert.CertificateFactory.getInstance", "org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.<init>", "org.bouncycastle.openssl.PEMParser.readObject", "org.bouncycastle.openssl.PEMKeyPair.getPrivateKeyInfo", "org.bouncycastle.openssl.jcajce.JcaPEMKeyConverter.getPrivateKey", "java.lang.Object.getClass", "java.lang.Class.getName", "java.security.cert.CertificateFactory.generateCertificates", "java.util.List.isEmpty", "java.util.List.get", "java.security.cert.X509Certificate.getSubjectX500Principal", "javax.security.auth.x500.X500Principal.getName", "org.slf4j.Logger.isDebugEnabled", "java.util.List.size", "java.lang.Integer.valueOf", "org.slf4j.Logger.debug", "java.security.KeyStore.getInstance", "java.util.List.toArray", "java.security.KeyStore.setKeyEntry", "org.bouncycastle.openssl.PEMParser.close", "java.lang.Throwable.addSuppressed", "java.io.InputStream.close", "com.oath.auth.KeyRefresherException.<init>", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.String[]"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String"], ["long"], [""], ["java.lang.String"], ["long"], ["java.lang.String", "java.lang.Object[]"], ["long"], [""], ["java.lang.String"], ["java.lang.String"], [""], ["java.io.File"], ["java.io.InputStream"], ["java.io.Reader"], ["java.lang.String"], [""], [""], [""], ["org.bouncycastle.asn1.pkcs.PrivateKeyInfo"], [""], [""], ["java.io.InputStream"], [""], ["int"], [""], [""], [""], [""], ["int"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String"], ["java.lang.Object[]"], ["java.lang.String", "java.security.Key", "char[]", "java.security.cert.Certificate[]"], [""], ["java.lang.Throwable"], [""], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "72", "file": "/root/repos/repos24/athenz/libs/java/cert_refresher/src/main/java/com/oath/auth/Utils.java", "methodName": "com.oath.auth.Utils.generateTrustStore", "methodParameterType": "InputStream#", "methodParameterName": "inputStream#", "methodBody": "public static KeyStore generateTrustStore(InputStream inputStream) throws IOException, KeyRefresherException {\n        CertificateFactory factory;\n        KeyStore keyStore = null;\n        try {\n            factory = CertificateFactory.getInstance(\"X.509\");\n            keyStore = KeyStore.getInstance(DEFAULT_KEYSTORE_TYPE);\n            keyStore.load(null);\n            for (Certificate certificate : factory.generateCertificates(inputStream)) {\n                String alias = ((X509Certificate) certificate).getSubjectX500Principal().getName();\n                keyStore.setCertificateEntry(alias, certificate);\n            }\n        } catch (CertificateException | NoSuchAlgorithmException e) {\n            String keyStoreFailMsg = \"Unable to load the inputstream as a KeyStore.  Please check the content.\";\n            throw new KeyRefresherException(keyStoreFailMsg, e);\n        } catch (KeyStoreException ignored) {\n            LOG.error(\"No Provider supports a KeyStoreSpi implementation for the specified type \" + DEFAULT_KEYSTORE_TYPE, ignored);\n        } \n        return keyStore;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#CastExpression#ParenthesizedExpression#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ParenthesizedExpression(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)CastExpression)ParenthesizedExpression(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate JKS X.509 Truststore based on given input stream. It is expected that the input stream is a list of x.509 certificates.", "call_func_name": ["java.security.cert.CertificateFactory.getInstance", "java.security.KeyStore.getInstance", "java.security.cert.CertificateFactory.generateCertificates", "java.util.Collection.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.security.cert.X509Certificate.getSubjectX500Principal", "javax.security.auth.x500.X500Principal.getName", "java.security.KeyStore.setCertificateEntry", "com.oath.auth.KeyRefresherException.<init>", "org.slf4j.Logger.error"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.io.InputStream"], [""], [""], [""], [""], [""], ["java.lang.String", "java.security.cert.Certificate"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/Token.java", "methodName": "com.yahoo.athenz.auth.token.Token.getUnsignedToken", "methodParameterType": "String#", "methodParameterName": "credential#", "methodBody": "public static String getUnsignedToken(String credential) {\n        int idx = credential.indexOf(\";s=\");\n        if (idx != -1) {\n            credential = credential.substring(0, idx);\n        }\n\n        return credential;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Helper method to parse a credential to remove the signature from the raw credential string. Returning the unsigned credential.", "call_func_name": ["java.lang.String.indexOf", "java.lang.String.substring"], "call_func_parameter": [["java.lang.String"], ["int", "int"]], "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java", "methodName": "com.yahoo.athenz.auth.token.AccessToken.AccessToken", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public AccessToken() {\n        super();\n    }", "AST": "Javadoc#Modifier#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(SuperConstructorInvocation)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Creates an empty access token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "75", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java", "methodName": "com.yahoo.athenz.auth.token.AccessToken.AccessToken", "methodParameterType": "String#JwtsSigningKeyResolver#", "methodParameterName": "token#keyResolver#", "methodBody": "public AccessToken(final String token, JwtsSigningKeyResolver keyResolver) {\n        super(token, keyResolver);\n        setAccessTokenFields();\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Parses and validates the given token based on the keyResolver", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "76", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java", "methodName": "com.yahoo.athenz.auth.token.AccessToken.AccessToken", "methodParameterType": "String#PublicKey#", "methodParameterName": "token#publicKey#", "methodBody": "public AccessToken(final String token, PublicKey publicKey) {\n        super(token, publicKey);\n        setAccessTokenFields();\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Parses and validates the given token based on the given public key", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "77", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java", "methodName": "com.yahoo.athenz.auth.token.AccessToken.AccessToken", "methodParameterType": "String#JwtsSigningKeyResolver#X509Certificate#", "methodParameterName": "token#keyResolver#x509Cert#", "methodBody": "public AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert) {\n        this(token, keyResolver, x509Cert, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Parses and validates the given token based on the keyResolver Once parsed, it verified that the token contains the x.509 certificate hash based on given certificate: supporting mTLS bound access tokens. With mTLS bound access tokens it's possible that the application fetched and cached the access token which includes the x.509 cert hash. However, after that, the cert has been refreshed - so it has a new hash but the same principal/subject. In this case we want to provide a small offset period where we'll check that the certificate creation time is after the access token timestamp and if that's the case allow the access token to be validated as long as the principal/subject matches what's in the token. The offset is by default 3600secs before (since we always issue certs with start time of now - 3600secs) and 3600 secs after. The second value is configurable with setAccessTokenCertOffset api method.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java", "methodName": "com.yahoo.athenz.auth.token.AccessToken.AccessToken", "methodParameterType": "String#JwtsSigningKeyResolver#X509Certificate#String#", "methodParameterName": "token#keyResolver#x509Cert#x509CertHash#", "methodBody": "public AccessToken(final String token, JwtsSigningKeyResolver keyResolver,\n                       X509Certificate x509Cert, final String x509CertHash) {\n        super(token, keyResolver);\n        setAccessTokenFields();\n        if (!confirmMTLSBoundToken(x509Cert, x509CertHash)) {\n            LOG.error(\"AccessToken: X.509 Certificate Confirmation failure\");\n            throw new CryptoException(\"X.509 Certificate Confirmation failure\");\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Parses and validates the given token based on the keyResolver Once parsed, it verified that the token contains the x.509 certificate hash based on given certificate: supporting mTLS bound access tokens. With mTLS bound access tokens it's possible that the application fetched and cached the access token which includes the x.509 cert hash. However, after that, the cert has been refreshed - so it has a new hash but the same principal/subject. In this case we want to provide a small offset period where we'll check that the certificate creation time is after the access token timestamp and if that's the case allow the access token to be validated as long as the principal/subject matches what's in the token. The offset is by default 3600secs before (since we always issue certs with start time of now - 3600secs) and 3600 secs after. The second value is configurable with setAccessTokenCertOffset api method. If the request is going through a proxy server which handles tls termination then the certificate hash will no longer match. In this case, the proxy is required to calculate and forward the certificate hash in a header that the client can extract and ask the library to validate based on that value. Additionally, the client can configure what service identity names it will accept proxy requests from for further security checks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java", "methodName": "com.yahoo.athenz.auth.token.AccessToken.setAccessTokenCertOffset", "methodParameterType": "long#", "methodParameterName": "offset#", "methodBody": "public static void setAccessTokenCertOffset(long offset) {\n        ACCESS_TOKEN_CERT_OFFSET = offset;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "With mTLS bound access tokens it's possible that the application fetched and cached the access token which includes the x.509 cert hash. However, after that, the cert has been refreshed - so it has a new hash but the same principal/subject. In this case we want to provide a small offset period where we'll check that the certificate creation time is after the access token timestamp and if that's the case allow the access token to be validated as long as the principal/subject matches what's in the token. The offset is by default 3600secs before (since we always issue certs with start time of now - 3600secs) and 3600 secs after. If the value is 0, then no offset is allowed. If the value is -1, then we skip the offset check and only require that the client certificate principal matches to the access token client id", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "80", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/token/AccessToken.java", "methodName": "com.yahoo.athenz.auth.token.AccessToken.setAccessTokenProxyPrincipals", "methodParameterType": "Set<String>#", "methodParameterName": "proxyPrincipals#", "methodBody": "public static void setAccessTokenProxyPrincipals(Set<String> proxyPrincipals) {\n        ACCESS_TOKEN_PROXY_PRINCIPALS = proxyPrincipals;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If the request is going through a proxy server which handles tls termination then the certificate hash will no longer match. In this case, the proxy is required to calculate and forward the certificate hash in a header that the client can extract and ask the library to validate based on that value. Additionally, the client can configure what service identity names it will accept proxy requests from for further security checks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authorizer.java", "methodName": "com.yahoo.athenz.auth.Authorizer.access", "methodParameterType": "String#String#Principal#String#", "methodParameterName": "action#resource#principal#crossDomain#", "methodBody": "boolean access(String action, String resource, Principal principal, String crossDomain);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Check access, return true if access is granted, false otherwise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/KeyStore.java", "methodName": "com.yahoo.athenz.auth.KeyStore.getPublicKey", "methodParameterType": "String#String#String#", "methodParameterName": "domain#service#keyId#", "methodBody": "String getPublicKey(String domain, String service, String keyId);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Return the PEM encoded public key for the given key id and service. The key which should be ybase64decoded prior to return if was ybase64encoded.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "83", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/PrivateKeyStoreFactory.java", "methodName": "com.yahoo.athenz.auth.PrivateKeyStoreFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "PrivateKeyStore create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new PrivateKeyStore instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "84", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/YBase64.java", "methodName": "com.yahoo.athenz.auth.util.YBase64.decode", "methodParameterType": "byte[]#", "methodParameterName": "inBytes#", "methodBody": "public static byte[] decode(byte[] inBytes) {\n\n        if (null == inBytes) {\n            throw new NullPointerException(\"Null input buffer\");\n        }\n\n        /* Sanity check, should always be padded at the end. */\n        int len = inBytes.length;\n        if (len % 4 != 0 && inBytes[len - 1] == '\\0') {\n            len -= 1;\n        }\n\n        if (len % 4 != 0) {\n            throw new CryptoException(\"String not padded ie, input string not modulo 4 len =  \" + len\n                            + \" len%4= \" + len % 4);\n        }\n\n        byte[] out = new byte[y64decodeLen(len)];\n\n        int i = 0;\n        int j = 0;\n        int tlen;\n        while (i < len) {\n            tlen = (len - i);\n            if (tlen > 4) {\n                tlen = 4;\n            }\n\n            /* Figure out how long \"tlen\" really is */\n            if (inBytes[i + 3] == '-') {\n                tlen--;\n            }\n            if (inBytes[i + 2] == '-') {\n                tlen--;\n            }\n\n            if (inBytes[i + 1] == '-') { /* This case should NEVER happen. */\n                throw new CryptoException(\"Too Many pad characters ( this should never happen )\");\n            }\n\n            /* decode */\n            byte a = decodeByte(inBytes[i++]);\n            byte b = decodeByte(inBytes[i++]);\n            byte c = decodeByte(inBytes[i++]);\n            byte d = decodeByte(inBytes[i++]);\n\n            /* validate */\n            if (a == (byte) 0xee || b == (byte) 0xee || c == (byte) 0xee || d == (byte) 0xee) {\n                throw new CryptoException(\"Unrecognized characters in y64-encoded input starting at: \" + (i - 4));\n            }\n\n            if (tlen == 4) {\n                // dec1: ((a << 2) + (b >> 4));\n                out[j++] = decode1(a, b);\n                // dec2: ((b << 4) + (c >> 2));\n                out[j++] = decode2(b, c);\n                // dec3: ((c << 6) + d);\n                out[j++] = decode3(c, d);\n            } else if (tlen == 3) {\n                if ((c & (byte) 0x03) != 0) {\n                    throw new CryptoException(\"Unknown decode error c & 0x03 failed, c-pos: \" + (i - 2));\n                }\n                // dec1: ((a << 2) + (b >> 4));\n                out[j++] = decode1(a, b);\n                // dec2: ((b << 4) + (c >> 2));\n                out[j++] = decode2(b, c);\n            } else { /* tlen == 2 */\n                if ((b & (byte) 0x0F) != 0) {\n                    throw new CryptoException(\"Invalid decode. b & 0x0f failed, b-pos: \" + (i - 3));\n                }\n                // dec1: ((a << 2) + (b >> 4));\n                out[j++] = decode1(a, b);\n            }\n        }\n        \n        return Arrays.copyOf(out, j);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#CharacterLiteral#InfixExpression#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#NumberLiteral#InfixExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#MethodInvocation#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#CharacterLiteral#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#CharacterLiteral#InfixExpression#SimpleName#PostfixExpression#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#CharacterLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#PostfixExpression#ArrayAccess#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrimitiveType#NumberLiteral#CastExpression#InfixExpression#SimpleName#PrimitiveType#NumberLiteral#CastExpression#InfixExpression#InfixExpression#SimpleName#PrimitiveType#NumberLiteral#CastExpression#InfixExpression#InfixExpression#SimpleName#PrimitiveType#NumberLiteral#CastExpression#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#PrimitiveType#NumberLiteral#CastExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#PrimitiveType#NumberLiteral#CastExpression#InfixExpression#ParenthesizedExpression#NumberLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#NumberLiteral#InfixExpression#ParenthesizedExpression#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)InfixExpression)InfixExpression(InfixExpression(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(IfStatement(InfixExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(NumberLiteral)NumberLiteral)CastExpression)InfixExpression)ParenthesizedExpression(NumberLiteral)NumberLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ParenthesizedExpression)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)WhileStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Decode the given byte array and return the result", "call_func_name": ["java.lang.NullPointerException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.YBase64.y64decodeLen", "com.yahoo.athenz.auth.util.YBase64.decodeByte", "com.yahoo.athenz.auth.util.YBase64.decode1", "com.yahoo.athenz.auth.util.YBase64.decode2", "com.yahoo.athenz.auth.util.YBase64.decode3", "java.util.Arrays.copyOf"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], ["int"], [""], ["java.lang.String"], ["int"], ["int"], ["byte", "byte"], ["byte", "byte"], ["byte", "byte"], ["byte[]", "int"]], "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/YBase64.java", "methodName": "com.yahoo.athenz.auth.util.YBase64.encode", "methodParameterType": "byte[]#", "methodParameterName": "inBytes#", "methodBody": "public static byte[] encode(byte[] inBytes) {\n        \n        if (null == inBytes) {\n            throw new NullPointerException(\"input buffer was null\");\n        }\n\n        /* Sanity check, should always be padded at the end. */\n        if (inBytes.length < 1) {\n            return new byte[] {};\n        }\n\n        int len = inBytes.length;\n        int encodeLen = y64encodeLen(len);\n        byte[] out = new byte[encodeLen];\n        int j = 0;\n        int tlen;\n\n        for (int i = 0; i < len; i += 3) {\n\n            tlen = (len - i);\n            if (tlen > 3) {\n                tlen = 3;\n            }\n\n            byte a;\n            byte b;\n            byte c;\n\n            if (tlen == 1) {\n                a = inBytes[i];\n                b = 0;\n                // enc1: Y64_array[(a >> 2)];\n                out[j++] = encode1(a);\n                // enc2: Y64_array[((a << 4) & 0x30) + (b >> 4)];\n                out[j++] = encode2(a, b);\n                out[j++] = '-';\n                out[j++] = '-';\n            } else if (tlen == 2) {\n                a = inBytes[i];\n                b = inBytes[i + 1];\n                c = 0;\n                // enc1: Y64_array[(a >> 2)];\n                out[j++] = encode1(a);\n                // enc2: Y64_array[((a << 4) & 0x30) + (b >> 4)];\n                out[j++] = encode2(a, b);\n                // enc3: Y64_array[((b << 2) & 0x3C) + (c >> 6)];\n                out[j++] = encode3(b, c);\n                out[j++] = '-';\n            } else {\n                a = inBytes[i];\n                b = inBytes[i + 1];\n                c = inBytes[i + 2];\n                // enc1: Y64_array[(a >> 2)];\n                out[j++] = encode1(a);\n                // enc2: Y64_array[((a << 4) & 0x30) + (b >> 4)];\n                out[j++] = encode2(a, b);\n                // enc3: Y64_array[((b << 2) & 0x3C) + (c >> 6)];\n                out[j++] = encode3(b, c);\n                // enc4: Y64_array[c & 0x3F];\n                out[j++] = encode4(c);\n            }\n        }\n\n        return Arrays.copyOf(out, j);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#PrimitiveType#Dimension#ArrayType#ArrayInitializer#ArrayCreation#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationExpression#SimpleName#SimpleName#InfixExpression#SimpleName#NumberLiteral#Assignment#SimpleName#SimpleName#SimpleName#InfixExpression#ParenthesizedExpression#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#Block#SimpleName#NumberLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#NumberLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#CharacterLiteral#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#ArrayAccess#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#PostfixExpression#ArrayAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#ForStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(NullLiteral)NullLiteral(SimpleName)SimpleName)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(ArrayInitializer)ArrayInitializer)ArrayCreation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(ForStatement(VariableDeclarationExpression(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ParenthesizedExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(SimpleName)SimpleName)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ArrayAccess(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ArrayAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)ForStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Encode given byte array into Y64 format.", "call_func_name": ["java.lang.NullPointerException.<init>", "com.yahoo.athenz.auth.util.YBase64.y64encodeLen", "com.yahoo.athenz.auth.util.YBase64.encode1", "com.yahoo.athenz.auth.util.YBase64.encode2", "com.yahoo.athenz.auth.util.YBase64.encode3", "com.yahoo.athenz.auth.util.YBase64.encode4", "java.util.Arrays.copyOf"], "call_func_parameter": [["java.lang.String"], ["int"], ["byte"], ["byte", "byte"], ["byte", "byte"], ["byte"], ["byte[]", "int"]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/AthenzUtils.java", "methodName": "com.yahoo.athenz.auth.util.AthenzUtils.extractServicePrincipal", "methodParameterType": "X509Certificate#", "methodParameterName": "x509Cert#", "methodBody": "public static String extractServicePrincipal(X509Certificate x509Cert) {\n\n        // let's first get the common name of the certificate\n\n        String principal = Crypto.extractX509CertCommonName(x509Cert);\n        if (principal == null) {\n            return null;\n        }\n\n        // check to see if we're dealing with role certificate which\n        // has the <domain>:role.<rolename> format or service\n        // certificate which has the <domain>.<service> format\n\n        if (principal.contains(ROLE_SEP)) {\n\n            // it's a role certificate so we're going to extract\n            // our service principal from the SAN email fieid\n            // verify that we must have only a single email\n            // field in the certificate\n\n            final List<String> emails = Crypto.extractX509CertEmails(x509Cert);\n            if (emails.size() != 1) {\n                return null;\n            }\n\n            // athenz always verifies that we include a valid\n            // email in the certificate\n\n            final String email = emails.get(0);\n            int idx = email.indexOf('@');\n            if (idx == -1) {\n                return null;\n            }\n\n            principal = email.substring(0, idx);\n        }\n\n        return principal;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the Athenz Service principal for the given certificate which could be either a service certificate or a role certificate. If the certificate does not have the Athenz expected name format the method will return null.", "call_func_name": ["com.yahoo.athenz.auth.util.Crypto.extractX509CertCommonName", "java.lang.String.contains", "com.yahoo.athenz.auth.util.Crypto.extractX509CertEmails", "java.util.List.size", "java.util.List.get", "java.lang.String.indexOf", "java.lang.String.substring"], "call_func_parameter": [["java.security.cert.X509Certificate"], ["java.lang.CharSequence"], ["java.security.cert.X509Certificate"], [""], ["int"], ["int"], ["int", "int"]], "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/AthenzUtils.java", "methodName": "com.yahoo.athenz.auth.util.AthenzUtils.isRoleCertificate", "methodParameterType": "X509Certificate#", "methodParameterName": "x509Cert#", "methodBody": "public static boolean isRoleCertificate(X509Certificate x509Cert) {\n\n        // let's first get the common name of the certificate\n\n        final String principal = Crypto.extractX509CertCommonName(x509Cert);\n        if (principal == null) {\n            return false;\n        }\n\n        // check to see if we're dealing with role certificate which\n        // has the <domain>:role.<rolename> format or service\n        // certificate which has the <domain>.<service> format\n\n        return principal.contains(ROLE_SEP);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return if the given x.509 certificate is a role certificate or not", "call_func_name": ["com.yahoo.athenz.auth.util.Crypto.extractX509CertCommonName", "java.lang.String.contains"], "call_func_parameter": [["java.security.cert.X509Certificate"], ["java.lang.CharSequence"]], "passed_comments": "/"}, {"index": "88", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Validate.java", "methodName": "com.yahoo.athenz.auth.util.Validate.principalName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static boolean principalName(String name) {\n        if (name == null || name.isEmpty()) {\n            return false;\n        }\n        Matcher matcher = principalPattern.matcher(name);\n        return matcher.matches();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param name a principal name to validate", "call_func_name": ["java.lang.String.isEmpty", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "89", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Validate.java", "methodName": "com.yahoo.athenz.auth.util.Validate.domainName", "methodParameterType": "String#", "methodParameterName": "name#", "methodBody": "public static boolean domainName(String name) {\n        if (name == null || name.isEmpty()) {\n            return false;\n        }\n        Matcher matcher = domainPattern.matcher(name);\n        return matcher.matches();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#BooleanLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@param name a domain name to validate", "call_func_name": ["java.lang.String.isEmpty", "java.util.regex.Pattern.matcher", "java.util.regex.Matcher.matches"], "call_func_parameter": [[""], ["java.lang.CharSequence"], [""]], "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.hmac", "methodParameterType": "String#String#", "methodParameterName": "message#sharedSecret#", "methodBody": "public static String hmac(String message, String sharedSecret) throws CryptoException {\n        //this has not been optimized!\n        String method = \"HmacSHA256\";\n        byte [] bsig;\n        try {\n            javax.crypto.Mac hmac = javax.crypto.Mac.getInstance(method);\n            javax.crypto.spec.SecretKeySpec secretKey = new javax.crypto.spec.SecretKeySpec(utf8Bytes(sharedSecret), method);\n            hmac.init(secretKey);\n            bsig = hmac.doFinal(message.getBytes());\n            ///CLOVER:OFF\n        } catch (NoSuchAlgorithmException e) {\n            LOG.error(\"hmac: Caught NoSuchAlgorithmException, check to make sure the algorithm is supported by the provider.\");\n            throw new CryptoException(e);\n        } catch (InvalidKeyException e) {\n            LOG.error(\"hmac: Caught InvalidKeyException, incorrect key type is being used.\");\n            throw new CryptoException(e);\n        }\n        ///CLOVER:ON\n        return ybase64(bsig);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#StringLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(StringLiteral)StringLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sign the message with the shared secret using HmacSHA256 The result is a ybase64 (url safe) string.", "call_func_name": ["javax.crypto.Mac.getInstance", "com.yahoo.athenz.auth.util.Crypto.utf8Bytes", "javax.crypto.spec.SecretKeySpec.<init>", "javax.crypto.Mac.init", "java.lang.String.getBytes", "javax.crypto.Mac.doFinal", "org.slf4j.Logger.error", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.Crypto.ybase64"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["byte[]", "java.lang.String"], ["java.security.Key"], [""], ["byte[]"], ["java.lang.String"], ["java.security.NoSuchAlgorithmException"], ["java.security.InvalidKeyException"], ["byte[]"]], "passed_comments": [{"com.yahoo.athenz.auth.util.Crypto.ybase64": "ybase64 is url-safe base64 encoding, using Y's unique convention. The industry standard urlsafe solution is (\"+/=\" =&gt; \"-_.\"). The Y! convention is (\"+/=\" =&gt; \"._-\")."}]}, {"index": "91", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.sign", "methodParameterType": "String#PrivateKey#String#", "methodParameterName": "message#key#digestAlgorithm#", "methodBody": "public static String sign(String message, PrivateKey key, String digestAlgorithm) throws CryptoException {\n        try {\n            String signatureAlgorithm = getSignatureAlgorithm(key.getAlgorithm(), digestAlgorithm);\n            java.security.Signature signer = java.security.Signature.getInstance(signatureAlgorithm, BC_PROVIDER);\n            signer.initSign(key);\n            signer.update(utf8Bytes(message));\n            byte[] sig = signer.sign();\n            return ybase64(sig);\n            /// CLOVER:OFF\n        } catch (NoSuchProviderException e) {\n            LOG.error(\"sign: Caught NoSuchProviderException, check to make sure the provider is loaded correctly.\");\n            throw new CryptoException(e);\n        } catch (NoSuchAlgorithmException e) {\n            LOG.error(\"sign: Caught NoSuchAlgorithmException, check to make sure the algorithm is supported by the provider.\");\n            throw new CryptoException(e);\n        } catch (SignatureException e) {\n            LOG.error(\"sign: Caught SignatureException.\");\n            throw new CryptoException(e);\n        } catch (InvalidKeyException e) {\n            LOG.error(\"sign: Caught InvalidKeyException, incorrect key type is being used.\");\n            throw new CryptoException(e);\n        }\n        ///CLOVER:ON\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Sign the text with with given digest algorithm and private key. Returns the ybase64 encoding of it.", "call_func_name": ["java.security.PrivateKey.getAlgorithm", "com.yahoo.athenz.auth.util.Crypto.getSignatureAlgorithm", "java.security.Signature.getInstance", "java.security.Signature.initSign", "com.yahoo.athenz.auth.util.Crypto.utf8Bytes", "java.security.Signature.update", "java.security.Signature.sign", "com.yahoo.athenz.auth.util.Crypto.ybase64", "org.slf4j.Logger.error", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.CryptoException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.security.PrivateKey"], ["java.lang.String"], ["byte[]"], [""], ["byte[]"], ["java.lang.String"], ["java.security.NoSuchProviderException"], ["java.security.NoSuchAlgorithmException"], ["java.security.SignatureException"], ["java.security.InvalidKeyException"]], "passed_comments": [{"com.yahoo.athenz.auth.util.Crypto.ybase64": "ybase64 is url-safe base64 encoding, using Y's unique convention. The industry standard urlsafe solution is (\"+/=\" =&gt; \"-_.\"). The Y! convention is (\"+/=\" =&gt; \"._-\")."}]}, {"index": "92", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.sign", "methodParameterType": "String#PrivateKey#", "methodParameterName": "message#key#", "methodBody": "public static String sign(String message, PrivateKey key) throws CryptoException {\n        return sign(message, key, SHA256);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sign the text with with SHA-256 and the private key. Returns the ybase64 encoding of it.", "call_func_name": ["com.yahoo.athenz.auth.util.Crypto.sign"], "call_func_parameter": [["java.lang.String", "java.security.PrivateKey", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.util.Crypto.sign": "Sign the text with with given digest algorithm and private key. Returns the ybase64 encoding of it."}]}, {"index": "93", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.verify", "methodParameterType": "String#PublicKey#String#String#", "methodParameterName": "message#key#signature#digestAlgorithm#", "methodBody": "public static boolean verify(String message, PublicKey key, String signature,\n                                 String digestAlgorithm) throws CryptoException {\n        try {\n            byte [] sig = ybase64Decode(signature);\n            String signatureAlgorithm = getSignatureAlgorithm(key.getAlgorithm(), digestAlgorithm);\n            java.security.Signature signer = java.security.Signature.getInstance(signatureAlgorithm, BC_PROVIDER);\n            signer.initVerify(key);\n            signer.update(utf8Bytes(message));\n            return signer.verify(sig);\n            ///CLOVER:OFF\n        } catch (NoSuchProviderException e) {\n            LOG.error(\"verify: Caught NoSuchProviderException, check to make sure the provider is loaded correctly.\");\n            throw new CryptoException(e);\n        } catch (InvalidKeyException e) {\n            LOG.error(\"verify: Caught InvalidKeyException, invalid key type is being used.\");\n            throw new CryptoException(e);\n        } catch (NoSuchAlgorithmException e) {\n            ///CLOVER:ON\n            LOG.error(\"verify: Caught NoSuchAlgorithmException, check to make sure the algorithm is supported by the provider.\");\n            throw new CryptoException(e);\n        } catch (SignatureException e) {\n            LOG.error(\"verify: Caught SignatureException.\");\n            throw new CryptoException(e);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(TryStatement(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Verify the signed data with given digest algorithm and the private key against the ybase64 encoded signature.", "call_func_name": ["com.yahoo.athenz.auth.util.Crypto.ybase64Decode", "java.security.PublicKey.getAlgorithm", "com.yahoo.athenz.auth.util.Crypto.getSignatureAlgorithm", "java.security.Signature.getInstance", "java.security.Signature.initVerify", "com.yahoo.athenz.auth.util.Crypto.utf8Bytes", "java.security.Signature.update", "java.security.Signature.verify", "org.slf4j.Logger.error", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.CryptoException.<init>", "com.yahoo.athenz.auth.util.CryptoException.<init>"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.String"], ["java.security.PublicKey"], ["java.lang.String"], ["byte[]"], ["byte[]"], ["java.lang.String"], ["java.security.NoSuchProviderException"], ["java.security.InvalidKeyException"], ["java.security.NoSuchAlgorithmException"], ["java.security.SignatureException"]], "passed_comments": [{"com.yahoo.athenz.auth.util.Crypto.ybase64Decode": "ybase64 is url-safe base64 encoding, using Y's unique convention. The industry standard urlsafe solution is (\"+/=\" =&gt; \"-_.\"). The Y! convention is (\"+/=\" =&gt; \"._-\")."}]}, {"index": "94", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.verify", "methodParameterType": "String#PublicKey#String#", "methodParameterName": "message#key#signature#", "methodBody": "public static boolean verify(String message, PublicKey key, String signature) throws CryptoException {\n        return verify(message, key, signature, SHA256);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Verify the signed data with SHA-256 and private key against the ybase64 encoded signature.", "call_func_name": ["com.yahoo.athenz.auth.util.Crypto.verify"], "call_func_parameter": [["java.lang.String", "java.security.PublicKey", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.util.Crypto.verify": "Verify the signed data with given digest algorithm and the private key against the ybase64 encoded signature."}]}, {"index": "95", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.ybase64", "methodParameterType": "byte[]#", "methodParameterName": "data#", "methodBody": "public static String ybase64(byte [] data) {\n        return utf8String(YBase64.encode(data));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "ybase64 is url-safe base64 encoding, using Y's unique convention. The industry standard urlsafe solution is (\"+/=\" =&gt; \"-_.\"). The Y! convention is (\"+/=\" =&gt; \"._-\").", "call_func_name": ["com.yahoo.athenz.auth.util.YBase64.encode", "com.yahoo.athenz.auth.util.Crypto.utf8String"], "call_func_parameter": [["byte[]"], ["byte[]"]], "passed_comments": [{"com.yahoo.athenz.auth.util.YBase64.encode": "Encode given byte array into Y64 format."}]}, {"index": "96", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.ybase64Decode", "methodParameterType": "String#", "methodParameterName": "b64#", "methodBody": "public static byte [] ybase64Decode(String b64) {\n        return YBase64.decode(utf8Bytes(b64));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "ybase64 is url-safe base64 encoding, using Y's unique convention. The industry standard urlsafe solution is (\"+/=\" =&gt; \"-_.\"). The Y! convention is (\"+/=\" =&gt; \"._-\").", "call_func_name": ["com.yahoo.athenz.auth.util.Crypto.utf8Bytes", "com.yahoo.athenz.auth.util.YBase64.decode"], "call_func_parameter": [["java.lang.String"], ["byte[]"]], "passed_comments": [{"com.yahoo.athenz.auth.util.YBase64.decode": "Decode the given byte array and return the result"}]}, {"index": "97", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/util/Crypto.java", "methodName": "com.yahoo.athenz.auth.util.Crypto.generateRSAPrivateKey", "methodParameterType": "int#", "methodParameterName": "bits#", "methodBody": "public static PrivateKey generateRSAPrivateKey(int bits) throws CryptoException {\n        KeyPairGenerator keyGen;\n        try {\n            keyGen = KeyPairGenerator.getInstance(RSA);\n            ///CLOVER:OFF\n        } catch (NoSuchAlgorithmException e) {\n            LOG.error(\"generatePrivateKey: Caught NoSuchAlgorithmException, check to make sure the algorithm is supported by the provider.\");\n            throw new CryptoException(e);\n        }\n        ///CLOVER:ON\n        keyGen.initialize(bits);\n        return keyGen.genKeyPair().getPrivate();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a RSA private with the given number of bits", "call_func_name": ["java.security.KeyPairGenerator.getInstance", "org.slf4j.Logger.error", "com.yahoo.athenz.auth.util.CryptoException.<init>", "java.security.KeyPairGenerator.initialize", "java.security.KeyPairGenerator.genKeyPair", "java.security.KeyPair.getPrivate"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], ["java.security.NoSuchAlgorithmException"], ["int"], [""], [""]], "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/PrivateKeyStore.java", "methodName": "com.yahoo.athenz.auth.PrivateKeyStore.getPrivateKey", "methodParameterType": "String#String#StringBuilder#", "methodParameterName": "service#serverHostName#privateKeyId#", "methodBody": "default PrivateKey getPrivateKey(String service, String serverHostName,\n            StringBuilder privateKeyId) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve private key for this Athenz Server instance to sign its tokens The private key identifier must be updated in the privateKeyId out StringBuilder field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/PrivateKeyStore.java", "methodName": "com.yahoo.athenz.auth.PrivateKeyStore.getPrivateKey", "methodParameterType": "String#String#String#String#StringBuilder#", "methodParameterName": "service#serverHostName#serviceInstance#algorithm#privateKeyId#", "methodBody": "default PrivateKey getPrivateKey(String service, String serverHostName, String serviceInstance,\n            String algorithm, StringBuilder privateKeyId) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve private key for this Athenz Server instance for the given crypto algorithm to sign its tokens. The private key identifier must be updated in the privateKeyId out StringBuilder field.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/PrivateKeyStore.java", "methodName": "com.yahoo.athenz.auth.PrivateKeyStore.getApplicationSecret", "methodParameterType": "String#String#", "methodParameterName": "appName#keyName#", "methodBody": "default String getApplicationSecret(String appName, String keyName) {\n        return keyName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the application secret based on the configured key name. The application name specifies what component is this secret for; for example, jdbc for accessing the secret for the jdbc user. The default implementation assumes the key name is the secret.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/ServiceIdentityProvider.java", "methodName": "com.yahoo.athenz.auth.ServiceIdentityProvider.getIdentity", "methodParameterType": "String#String#", "methodParameterName": "domainName#serviceName#", "methodBody": "Principal getIdentity(String domainName, String serviceName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param domainName the name of the domain", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void initialize();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Initialize the authority", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "103", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.getCredSource", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default CredSource getCredSource() {\n        return CredSource.HEADER;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return credentials source - headers or certificate with headers being default", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.getDomain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDomain();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the domain of the authority, i.e. \"user\" or \"local\", as defined by the authorization system", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.getHeader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getHeader();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return a string describing where to find the credentials in a request, i.e. \"X-Auth-Token\" or \"Cookie.User\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.getAuthenticateChallenge", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getAuthenticateChallenge() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the string to be returned as the value for WWW-Authenticate header:WWW-Authenticate  = \"WWW-Authenticate\" \":\" 1#challenge in case all authorities fail to authenticate a request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.allowAuthorization", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default boolean allowAuthorization() {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return a boolean flag indicating whether or not authenticated principalsby this authority are allowed to be \"authorized\" to make changes. If this flag is false, then the principal must first get a ZMS UserToken and then use that UserToken for subsequent operations.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "108", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.getUserDomainName", "methodParameterType": "String#", "methodParameterName": "userName#", "methodBody": "default String getUserDomainName(String userName) {\n        return userName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the authority is handling user principals, then it might require some mapping from username to user domain name.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "109", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.isValidUser", "methodParameterType": "String#", "methodParameterName": "username#", "methodBody": "default boolean isValidUser(String username) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "If the authority is handling user principals, then this method will be called when users are added as members so the authority can validate that the role member is valid. If the member is not valid, the request (e.g. putRole, putMembership) will be rejected as invalid.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.authenticate", "methodParameterType": "String#String#String#StringBuilder#", "methodParameterName": "creds#remoteAddr#httpMethod#errMsg#", "methodBody": "Principal authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Verify the credentials and if valid return the corresponding Principal, null otherwise.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.authenticate", "methodParameterType": "X509Certificate[]#StringBuilder#", "methodParameterName": "certs#errMsg#", "methodBody": "default Principal authenticate(X509Certificate[] certs, StringBuilder errMsg) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Process the client certificates extracted from the http request object. Extract the CN field from the Certificate Subject DN which should be the Athenz Service Identity and return a corresponding Principal object. In case any exceptions, a null object is returned", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Authority.java", "methodName": "com.yahoo.athenz.auth.Authority.authenticate", "methodParameterType": "HttpServletRequest#StringBuilder#", "methodParameterName": "request#errMsg#", "methodBody": "default Principal authenticate(HttpServletRequest request, StringBuilder errMsg) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Process the authenticate request based on http request object.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getDomain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getDomain();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the domain of the authority over this principal, i.e. \"user\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the name of the principal as a string, i.e. \"joe\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getFullName", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getFullName();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the full name of the principal as a string, i.e. \"user.joe\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "116", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getCredentials", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getCredentials();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the credentials token as a string", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getX509Certificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default X509Certificate getX509Certificate() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the client certificate that the principalwas authenticated with if using the certificate authority", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getUnsignedCredentials", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getUnsignedCredentials();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the credentials token as a string but will not contain a signature", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getRoles", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "List<String> getRoles();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the list of roles this principal is able to assume. This is null for user/service principals, but valid for a principal based on ZTokens.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getAuthority", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Authority getAuthority();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the authority over this principal. Can be null, if not authenticated.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getIssueTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "long getIssueTime();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the issue time for the credentials", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getAuthorizedService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String getAuthorizedService();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "@return the service name that was authorized to use the Principal's UserToken", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getIP", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getIP() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the associated IP address provided in the principal token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getOriginalRequestor", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getOriginalRequestor() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the associated original requestor specified in the principal token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getKeyService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getKeyService() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the associated original key service specified in the principal token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getKeyId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getKeyId() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the private key identifier that was used to sign the service token", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/Principal.java", "methodName": "com.yahoo.athenz.auth.Principal.getApplicationId", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getApplicationId() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the application ID", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimpleServiceIdentityProvider.java", "methodName": "com.yahoo.athenz.auth.impl.SimpleServiceIdentityProvider.SimpleServiceIdentityProvider", "methodParameterType": "String#String#PrivateKey#String#", "methodParameterName": "domainName#serviceName#privateKey#keyId#", "methodBody": "public SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId) {\n        this(PRINCIPAL_AUTHORITY, domainName, serviceName, privateKey, keyId, 3600);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "A simple implementation of the ServiceIdentityProvider interface. The caller specifies the domain and service name along with the private key for the given service", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimpleServiceIdentityProvider.java", "methodName": "com.yahoo.athenz.auth.impl.SimpleServiceIdentityProvider.SimpleServiceIdentityProvider", "methodParameterType": "String#String#PrivateKey#String#long#", "methodParameterName": "domainName#serviceName#privateKey#keyId#tokenTimeout#", "methodBody": "public SimpleServiceIdentityProvider(String domainName, String serviceName,\n            PrivateKey privateKey, String keyId, long tokenTimeout) {\n        this(PRINCIPAL_AUTHORITY, domainName, serviceName, privateKey, keyId, tokenTimeout);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "A simple implementation of the ServiceIdentityProvider interface. The caller specifies the domain and service name along with the private key for the given service", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimpleServiceIdentityProvider.java", "methodName": "com.yahoo.athenz.auth.impl.SimpleServiceIdentityProvider.SimpleServiceIdentityProvider", "methodParameterType": "Authority#String#String#PrivateKey#String#long#", "methodParameterName": "authority#domainName#serviceName#privateKey#keyId#tokenTimeout#", "methodBody": "public SimpleServiceIdentityProvider(Authority authority, String domainName,\n            String serviceName, PrivateKey privateKey, String keyId, long tokenTimeout) {\n\n        this.authority = authority;\n        this.domain = domainName.toLowerCase();\n        this.service = serviceName.toLowerCase();\n        this.key = privateKey;\n        this.keyId = keyId.toLowerCase();\n        this.tokenTimeout = tokenTimeout;\n        this.setHost(getServerHostName());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(ThisExpression)ThisExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "A simple implementation of the ServiceIdentityProvider interface. The caller specifies the domain and service name along with the private key for the given service and the authority to be used", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimplePrincipal.java", "methodName": "com.yahoo.athenz.auth.impl.SimplePrincipal.create", "methodParameterType": "String#String#List<String>#Authority#", "methodParameterName": "domain#creds#roles#authority#", "methodBody": "public static Principal create(String domain, String creds, List<String> roles, Authority authority) {\n        if (roles == null || roles.size() == 0) {\n            LOG.error(\"createRolePrincipal: zero roles\");\n            return null;\n        }\n        return new SimplePrincipal(domain, creds, roles, authority);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a Principal based on a given RoleToken", "call_func_name": ["com.yahoo.athenz.auth.impl.SimplePrincipal.create"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "long", "com.yahoo.athenz.auth.Authority"]], "passed_comments": [{"com.yahoo.athenz.auth.impl.SimplePrincipal.create": "Create a Principal for the given user identity"}]}, {"index": "132", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimplePrincipal.java", "methodName": "com.yahoo.athenz.auth.impl.SimplePrincipal.create", "methodParameterType": "String#String#String#Authority#", "methodParameterName": "domain#name#creds#authority#", "methodBody": "public static Principal create(String domain, String name, String creds, Authority authority) {\n        return create(domain, name, creds, 0, authority);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a Principal for the given identity", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimplePrincipal.java", "methodName": "com.yahoo.athenz.auth.impl.SimplePrincipal.create", "methodParameterType": "String#String#String#long#Authority#", "methodParameterName": "domain#name#creds#issueTime#authority#", "methodBody": "public static Principal create(String domain, String name, String creds, long issueTime,\n            Authority authority) {\n        String matchDomain = (authority == null) ? null : authority.getDomain();\n        if (matchDomain != null && !domain.equals(matchDomain)) {\n            LOG.error(\"createPrincipal: domain mismatch for user {} in authority {}\",\n                    name, authority);\n            return null;\n        }\n        return new SimplePrincipal(domain, name, creds, issueTime, authority);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#ParenthesizedExpression#NullLiteral#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ParenthesizedExpression(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a Principal for the given user identity", "call_func_name": ["com.yahoo.athenz.auth.Authority.getDomain", "java.lang.String.equals", "org.slf4j.Logger.error", "com.yahoo.athenz.auth.impl.SimplePrincipal.<init>"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String", "long", "com.yahoo.athenz.auth.Authority"]], "passed_comments": [{"com.yahoo.athenz.auth.Authority.getDomain": "@return the domain of the authority, i.e. \"user\" or \"local\", as defined by the authorization system"}]}, {"index": "134", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/SimplePrincipal.java", "methodName": "com.yahoo.athenz.auth.impl.SimplePrincipal.create", "methodParameterType": "String#String#Authority#", "methodParameterName": "appId#creds#authority#", "methodBody": "public static Principal create(String appId, String creds, Authority authority) {\n        if (appId == null) {\n            LOG.error(\"createAppIdPrincipal: null appId\");\n            return null;\n        }\n        return new SimplePrincipal(null, appId, creds, 0, authority);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#NumberLiteral#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a Principal for the given host identity", "call_func_name": ["org.slf4j.Logger.error", "com.yahoo.athenz.auth.impl.SimplePrincipal.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "long", "com.yahoo.athenz.auth.Authority"]], "passed_comments": "/"}, {"index": "135", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/KerberosAuthority.java", "methodName": "com.yahoo.athenz.auth.impl.KerberosAuthority.initialize", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void initialize() {\n        login(false);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize the authority", "call_func_name": ["com.yahoo.athenz.auth.impl.KerberosAuthority.login"], "call_func_parameter": [["boolean"]], "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/KerberosAuthority.java", "methodName": "com.yahoo.athenz.auth.impl.KerberosAuthority.refreshLogin", "methodParameterType": "String#", "methodParameterName": "remoteSvcPrincipal#", "methodBody": "public boolean refreshLogin(String remoteSvcPrincipal) {\n        // check for expiration\n        // get the original ticket from the serviceSubject\n        Subject subject = serviceSubject.get();\n        KerberosTicket tgt = null;\n        Set<KerberosTicket> tickets = subject.getPrivateCredentials(KerberosTicket.class);\n        /// CLOVER:OFF\n        for (KerberosTicket ticket : tickets) {\n            if (isTargetPrincipal(ticket, remoteSvcPrincipal)) {\n                tgt = ticket;\n                break;\n            }\n        }\n\n        if (tgt == null) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"KerberosAuthority:refreshLogin: Process tickets found no principal match: subject contains number of tickets=\" + tickets.size());\n            }\n            return true;\n        }\n        long end = tgt.getEndTime().getTime();\n        long now = System.currentTimeMillis();\n        if (now > end) {\n            login(true);\n            return true;\n        }\n        return false;\n        ///CLOVER:ON\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#TypeLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#BreakStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#InfixExpression#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(BreakStatement)BreakStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determines if refresh login needed if the ticket for the specified remoteSvcPrincipal has expired or is not found.", "call_func_name": ["java.util.concurrent.atomic.AtomicReference.get", "javax.security.auth.Subject.getPrivateCredentials", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.yahoo.athenz.auth.impl.KerberosAuthority.isTargetPrincipal", "org.slf4j.Logger.isDebugEnabled", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.util.Set.size", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.debug", "javax.security.auth.kerberos.KerberosTicket.getEndTime", "java.util.Date.getTime", "java.lang.System.currentTimeMillis", "com.yahoo.athenz.auth.impl.KerberosAuthority.login"], "call_func_parameter": [[""], ["java.lang.Class"], [""], [""], [""], ["javax.security.auth.kerberos.KerberosTicket", "java.lang.String"], [""], [""], ["java.lang.String"], [""], ["int"], [""], ["java.lang.String"], [""], [""], [""], ["boolean"]], "passed_comments": "/"}, {"index": "137", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/KerberosAuthority.java", "methodName": "com.yahoo.athenz.auth.impl.KerberosAuthority.getDomain", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String getDomain() {\n        return null;\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return the domain of the authority, defaults to \"ygrid\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos24/athenz/libs/java/auth_core/src/main/java/com/yahoo/athenz/auth/impl/KerberosAuthority.java", "methodName": "com.yahoo.athenz.auth.impl.KerberosAuthority.authenticate", "methodParameterType": "String#String#String#StringBuilder#", "methodParameterName": "creds#remoteAddr#httpMethod#errMsg#", "methodBody": "@Override\n    public Principal authenticate(String creds, String remoteAddr, String httpMethod, StringBuilder errMsg) {\n\n        KerberosToken token;\n        try {\n            token = new KerberosToken(creds, remoteAddr);\n        } catch (IllegalArgumentException ex) {\n            if (errMsg == null) {\n                errMsg = new StringBuilder();\n            }\n            errMsg.append(\"KerberosAuthority:authenticate: Invalid token: exc=\").\n                   append(ex.getMessage()).append(\" : credential=\").\n                   append(creds);\n            LOG.error(\"KerberosAuthority:authenticate: \" + errMsg.toString());\n            return null;\n        }\n\n        StringBuilder errDetail = new StringBuilder(512);\n        if (!token.validate(serviceSubject.get(), errDetail)) {\n            if (errMsg != null) {\n                errMsg.append(\"KerberosAuthority:authenticate: token validation failure: \");\n                errMsg.append(errDetail);\n            }\n            return null;\n        }\n\n        String userDomain = token.getDomain();\n        String userName   = token.getUserName();\n        /// CLOVER:OFF\n        if (userName == null) {\n            if (errMsg != null) {\n                errMsg.append(\"KerberosAuthority:authenticate: token validation failure: missing user\");\n            }\n            return null;\n        }\n        ///CLOVER:ON\n        return SimplePrincipal.create(userDomain, userName, creds, this);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#PrefixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ThisExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Verify the credentials and if valid return the corresponding Principal, null otherwise.", "call_func_name": ["com.yahoo.athenz.auth.token.KerberosToken.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.IllegalArgumentException.getMessage", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error", "java.lang.StringBuilder.<init>", "java.util.concurrent.atomic.AtomicReference.get", "com.yahoo.athenz.auth.token.KerberosToken.validate", "java.lang.StringBuilder.append", "com.yahoo.athenz.auth.token.KerberosToken.getDomain", "com.yahoo.athenz.auth.token.KerberosToken.getUserName", "com.yahoo.athenz.auth.impl.SimplePrincipal.create"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["int"], [""], ["javax.security.auth.Subject", "java.lang.StringBuilder"], ["java.lang.CharSequence"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.auth.Authority"]], "passed_comments": [{"com.yahoo.athenz.auth.impl.SimplePrincipal.create": "Create a Principal based on a given RoleToken"}, {"com.yahoo.athenz.auth.impl.SimplePrincipal.create": "Create a Principal for the given identity"}]}, {"index": "139", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/MetricFactory.java", "methodName": "com.yahoo.athenz.common.metrics.MetricFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "Metric create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new Metric instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/impl/NoOpMetric.java", "methodName": "com.yahoo.athenz.common.metrics.impl.NoOpMetric.NoOpMetric", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public NoOpMetric() {\n    }", "AST": "Javadoc#Modifier#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Constructs a new NoOpMetric object in which all methods are stubs. No metrics are recorded with this implementation.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.increment", "methodParameterType": "String#", "methodParameterName": "metric#", "methodBody": "void increment(String metric);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Increment the counter for the specified metric", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.increment", "methodParameterType": "String#String#", "methodParameterName": "metric#requestDomainName#", "methodBody": "void increment(String metric, String requestDomainName);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Increment the counter for the specified metric for the given domainName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.increment", "methodParameterType": "String#String#String#", "methodParameterName": "metric#requestDomainName#principalDomainName#", "methodBody": "default void increment(String metric, String requestDomainName, String principalDomainName) {\n        increment(metric, requestDomainName);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increment the counter for the specified metric for the given domainName by a service from a given principal domain", "call_func_name": ["com.yahoo.athenz.common.metrics.Metric.increment"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.common.metrics.Metric.increment": "Increment the counter for the specified metric for the given domainName"}]}, {"index": "144", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.increment", "methodParameterType": "String#String#int#", "methodParameterName": "metric#requestDomainName#count#", "methodBody": "void increment(String metric, String requestDomainName, int count);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Increment the sum by the specified count for the given metric against the domainName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.increment", "methodParameterType": "String#String#String#int#", "methodParameterName": "metric#requestDomainName#principalDomainName#count#", "methodBody": "default void increment(String metric, String requestDomainName, String principalDomainName, int count) {\n        increment(metric, requestDomainName, count);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Increment the sum by the specified count for the given metric against the domainName", "call_func_name": ["com.yahoo.athenz.common.metrics.Metric.increment"], "call_func_parameter": [["java.lang.String", "java.lang.String", "int"]], "passed_comments": [{"com.yahoo.athenz.common.metrics.Metric.increment": "Increment the sum by the specified count for the given metric against the domainName"}]}, {"index": "146", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.startTiming", "methodParameterType": "String#String#", "methodParameterName": "metric#requestDomainName#", "methodBody": "Object startTiming(String metric, String requestDomainName);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Start the latency timer for the specified metric for the given domainName. The implementation must be able to support simultaneous handling of multiple timer counters (but not the same metric). It's possible that the application/lib started a latency timer for a metric but will not call the stopTiming method of the request didn't complete successfully since we only want to keep track of average latency time for successfully completed requests.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.startTiming", "methodParameterType": "String#String#String#", "methodParameterName": "metric#requestDomainName#principalDomainName#", "methodBody": "default Object startTiming(String metric, String requestDomainName, String principalDomainName) {\n        return startTiming(metric, requestDomainName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start the latency timer for the specified metric for the given domainName. The implementation must be able to support simultaneous handling of multiple timer counters (but not the same metric). It's possible that the application/lib started a latency timer for a metric but will not call the stopTiming method of the request didn't complete successfully since we only want to keep track of average latency time for successfully completed requests.", "call_func_name": ["com.yahoo.athenz.common.metrics.Metric.startTiming"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.common.metrics.Metric.startTiming": "Start the latency timer for the specified metric for the given domainName. The implementation must be able to support simultaneous handling of multiple timer counters (but not the same metric). It's possible that the application/lib started a latency timer for a metric but will not call the stopTiming method of the request didn't complete successfully since we only want to keep track of average latency time for successfully completed requests."}]}, {"index": "148", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.stopTiming", "methodParameterType": "Object#", "methodParameterName": "timerMetric#", "methodBody": "void stopTiming(Object timerMetric);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Stop the latency timer for the specified metric.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.stopTiming", "methodParameterType": "Object#String#String#", "methodParameterName": "timerMetric#requestDomainName#principalDomainName#", "methodBody": "default void stopTiming(Object timerMetric, String requestDomainName, String principalDomainName) {\n        stopTiming(timerMetric);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Stop the latency timer for the specified metric.", "call_func_name": ["com.yahoo.athenz.common.metrics.Metric.stopTiming"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": [{"com.yahoo.athenz.common.metrics.Metric.stopTiming": "Stop the latency timer for the specified metric."}]}, {"index": "150", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.flush", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void flush();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Flush any buffered metrics to destination.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/metrics/Metric.java", "methodName": "com.yahoo.athenz.common.metrics.Metric.quit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void quit();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Flush buffers and shutdown any tasks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHSignerFactory.java", "methodName": "com.yahoo.athenz.common.server.ssh.SSHSignerFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "SSHSigner create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new SSHSigner instance. The SSHSigner will be responsible for generating a ssh certificate based on the provider data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHSigner.java", "methodName": "com.yahoo.athenz.common.server.ssh.SSHSigner.generateCertificate", "methodParameterType": "Principal#SSHCertRequest#String#", "methodParameterName": "principal#certRequest#certType#", "methodBody": "default SSHCertificates generateCertificate(Principal principal, SSHCertRequest certRequest,\n            final String certType) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate an SSH Certificate based on the given request for a given principal", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHSigner.java", "methodName": "com.yahoo.athenz.common.server.ssh.SSHSigner.getSignerCertificate", "methodParameterType": "String#", "methodParameterName": "certType#", "methodBody": "default String getSignerCertificate(String certType) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the SSH Signer certificate for the given type", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHSigner.java", "methodName": "com.yahoo.athenz.common.server.ssh.SSHSigner.setAuthorizer", "methodParameterType": "Authorizer#", "methodParameterName": "authorizer#", "methodBody": "default void setAuthorizer(Authorizer authorizer) {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)MethodDeclaration", "methodDoc": "Set the server authorizer object that the ssh signer can use to for any authorization checks, if necessary", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/ssh/SSHSigner.java", "methodName": "com.yahoo.athenz.common.server.ssh.SSHSigner.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default void close() {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Close the sshSigner signer object and release all allocated resources (if any)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "157", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/dns/HostnameResolver.java", "methodName": "com.yahoo.athenz.common.server.dns.HostnameResolver.isValidHostname", "methodParameterType": "String#", "methodParameterName": "hostname#", "methodBody": "default boolean isValidHostname(final String hostname) {\n        return true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Verifies if the given hostname is valid or not. This could be a standard dns resolution or if the setup has a separate source of truth for dns data, the implementation will query that source if the hostname is valid or not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/dns/HostnameResolver.java", "methodName": "com.yahoo.athenz.common.server.dns.HostnameResolver.isValidHostCnameList", "methodParameterType": "String#List<String>#", "methodParameterName": "hostname#cnameList#", "methodBody": "default boolean isValidHostCnameList(final String hostname, final List<String> cnameList) {\n        return false;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#BooleanLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Verifies if the given CNAMEs are valid for a given hostname. This could be a standard dns resolution or if the setup has a separate source of truth for dns data, the implementation will query that source if the hostname CNAME is valid or not.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/dns/HostnameResolverFactory.java", "methodName": "com.yahoo.athenz.common.server.dns.HostnameResolverFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "HostnameResolver create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new HostnameResolver instance. The HostnameResolver will be responsible for verifying a given hostname is a valid one", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLoggerFactory.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLoggerFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AuditLogger create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new AuditLogger instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.uuId", "methodParameterType": "String#", "methodParameterName": "UUID#", "methodBody": "AuditLogMsgBuilder uuId(String UUID);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "A unique identifier", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.versionTag", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String versionTag();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Return a tag with the version of the msg builder used to build the message. Ex:  \"VERS(athenz-2.1);\"", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.whoFullName", "methodParameterType": "String#", "methodParameterName": "whoVal#", "methodBody": "AuditLogMsgBuilder whoFullName(String whoVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Full name of who made the authorization change", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.who", "methodParameterType": "String#", "methodParameterName": "whoVal#", "methodBody": "AuditLogMsgBuilder who(String whoVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "who made the authorization change", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.why", "methodParameterType": "String#", "methodParameterName": "whyVal#", "methodBody": "AuditLogMsgBuilder why(String whyVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "why was this change requested - justification via SOX ticket number", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.clientIp", "methodParameterType": "String#", "methodParameterName": "clientIpAddr#", "methodBody": "AuditLogMsgBuilder clientIp(String clientIpAddr);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "IP address of requesting client", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.where", "methodParameterType": "String#", "methodParameterName": "whereVal#", "methodBody": "AuditLogMsgBuilder where(String whereVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "This is where the change request was received - server endpoint.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.whatMethod", "methodParameterType": "String#", "methodParameterName": "whatMethodVal#", "methodBody": "AuditLogMsgBuilder whatMethod(String whatMethodVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The REST methods required to be reported are PUT, POST, DELETE.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.whatApi", "methodParameterType": "String#", "methodParameterName": "whatApiVal#", "methodBody": "AuditLogMsgBuilder whatApi(String whatApiVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "The publicly exported API receiving the change request.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.whatDomain", "methodParameterType": "String#", "methodParameterName": "whatDomainVal#", "methodBody": "AuditLogMsgBuilder whatDomain(String whatDomainVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Name of the domain that is affected by the change.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.whatEntity", "methodParameterType": "String#", "methodParameterName": "whatEntityVal#", "methodBody": "AuditLogMsgBuilder whatEntity(String whatEntityVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Name of the entity being changed. An entity is a policy, role, service, et al.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.whatDetails", "methodParameterType": "String#", "methodParameterName": "whatDetailsVal#", "methodBody": "AuditLogMsgBuilder whatDetails(String whatDetailsVal);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "@param whatDetailsVal specific details of the changesThe caller will specify the entity(whatEntity) that was  changed. If the entity is a role, and members were added, then the details will specify that members were added. Ex: '{\"members-removed\":[\"user.manning\"],\"members-added\"=[\"user.brady\"]}' See the whatDetails() helper that takes Set's. It can be used with method to sort out the changes to enhance the details message. Usage can be: Builder bldr = bldr.whatDetails(\"members-changed\"); bldr         = bldr.whatDetails(oldAttrSet, newAttrSet);", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogMsgBuilder.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogMsgBuilder.build", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "String build();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Call this to build the string representation of the data fields set herein.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/impl/DefaultAuditLogger.java", "methodName": "com.yahoo.athenz.common.server.log.impl.DefaultAuditLogger.DefaultAuditLogger", "methodParameterType": "String#", "methodParameterName": "loggerName#", "methodBody": "public DefaultAuditLogger(String loggerName) {\n        AUDITLOGGER = LoggerFactory.getLogger(loggerName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Override the default logger with one named loggerName", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/impl/DefaultAuditLogger.java", "methodName": "com.yahoo.athenz.common.server.log.impl.DefaultAuditLogger.log", "methodParameterType": "String#String#", "methodParameterName": "logMsg#msgVersionTag#", "methodBody": "@Override\n    public void log(String logMsg, String msgVersionTag) {\n        AUDITLOGGER.info(logMsg); // ignore msgVersionTag for this logger implementation\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@see com.yahoo.athenz.common.server.log.AuditLogger#log(java.lang.String,java.lang.String)", "call_func_name": ["org.slf4j.Logger.info"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogger.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogger.log", "methodParameterType": "String#String#", "methodParameterName": "logMsg#msgVersionTag#", "methodBody": "void log(String logMsg, String msgVersionTag);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Perform logging of the given message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogger.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogger.log", "methodParameterType": "AuditLogMsgBuilder#", "methodParameterName": "msgBldr#", "methodBody": "void log(AuditLogMsgBuilder msgBldr);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Log the message as built by the provided msgBldr.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/log/AuditLogger.java", "methodName": "com.yahoo.athenz.common.server.log.AuditLogger.getMsgBuilder", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AuditLogMsgBuilder getMsgBuilder();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Get a log message builder", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/util/ServletRequestUtil.java", "methodName": "com.yahoo.athenz.common.server.util.ServletRequestUtil.getRemoteAddress", "methodParameterType": "HttpServletRequest#", "methodParameterName": "request#", "methodBody": "public static String getRemoteAddress(final HttpServletRequest request) {\n        String addr = request.getRemoteAddr();\n        if (LOOPBACK_ADDRESS.equals(addr)) {\n            String xff = request.getHeader(XFF_HEADER);\n            if (xff != null) {\n                String[] addrs = xff.split(\",\");\n                final String xffAddr = addrs[addrs.length - 1].trim();\n                if (InetAddresses.isInetAddress(xffAddr)) {\n                    addr = xffAddr;\n                }\n            }\n        }\n        return addr;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#NumberLiteral#InfixExpression#ArrayAccess#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ArrayAccess(SimpleName)SimpleName(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NumberLiteral)NumberLiteral)InfixExpression)ArrayAccess(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Return the remote client IP address. Detect if connection is from local proxy server by looking at XFF header. If XFF header, return the last address therein since it was added by the proxy server.", "call_func_name": ["javax.servlet.http.HttpServletRequest.getRemoteAddr", "java.lang.String.equals", "javax.servlet.http.HttpServletRequest.getHeader", "java.lang.String.split", "java.lang.String.trim", "com.google.common.net.InetAddresses.isInetAddress"], "call_func_parameter": [[""], ["java.lang.Object"], ["java.lang.String"], ["java.lang.String"], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/NotificationServiceFactory.java", "methodName": "com.yahoo.athenz.common.server.notification.NotificationServiceFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "NotificationService create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new NotificationService instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/notification/NotificationService.java", "methodName": "com.yahoo.athenz.common.server.notification.NotificationService.notify", "methodParameterType": "Notification#", "methodParameterName": "notification#", "methodBody": "boolean notify (Notification notification);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "send out the notification", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/rest/ResourceContext.java", "methodName": "com.yahoo.athenz.common.server.rest.ResourceContext.authenticate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Principal authenticate() {\n        return authenticate(false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Authenticates the request based on configured set of authorities. It throws an exception if it cannot authenticate", "call_func_name": ["com.yahoo.athenz.common.server.rest.ResourceContext.authenticate"], "call_func_parameter": [["boolean"]], "passed_comments": [{"com.yahoo.athenz.common.server.rest.ResourceContext.authenticate": "Authenticates the request based on configured set of authorities. It throws an exception if it cannot authenticate unless there are no credentials provided and optionalAuth flag is set"}]}, {"index": "183", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/rest/ResourceContext.java", "methodName": "com.yahoo.athenz.common.server.rest.ResourceContext.authenticate", "methodParameterType": "boolean#", "methodParameterName": "optionalAuth#", "methodBody": "public Principal authenticate(boolean optionalAuth) {\n        if (!checked) {\n            checked = true;\n            principal = Http.authenticate(request, authorities, optionalAuth);\n        }\n        return principal;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#PrefixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Authenticates the request based on configured set of authorities. It throws an exception if it cannot authenticate unless there are no credentials provided and optionalAuth flag is set", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "184", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/rest/ResourceContext.java", "methodName": "com.yahoo.athenz.common.server.rest.ResourceContext.authorize", "methodParameterType": "String#String#String#", "methodParameterName": "action#resource#trustedDomain#", "methodBody": "public void authorize(String action, String resource, String trustedDomain) {\n        principal = authenticate();\n        Http.authorize(authorizer, principal, action, resource, trustedDomain);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "It authenticates and then authorizes the request for a given action, resource and trust domain. It throws an authorized exception if it cannot authenticate and a forbidden exception if it cannot authorize", "call_func_name": ["com.yahoo.athenz.common.server.rest.ResourceContext.authenticate", "com.yahoo.athenz.common.server.rest.Http.authorize"], "call_func_parameter": [[""], ["com.yahoo.athenz.auth.Authorizer", "com.yahoo.athenz.auth.Principal", "java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.common.server.rest.ResourceContext.authenticate": "Authenticates the request based on configured set of authorities. It throws an exception if it cannot authenticate"}, {"com.yahoo.athenz.common.server.rest.ResourceContext.authenticate": "Authenticates the request based on configured set of authorities. It throws an exception if it cannot authenticate unless there are no credentials provided and optionalAuth flag is set"}]}, {"index": "185", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/rest/ResourceContext.java", "methodName": "com.yahoo.athenz.common.server.rest.ResourceContext.sendAuthenticateChallenges", "methodParameterType": "ResourceException#", "methodParameterName": "exc#", "methodBody": "public void sendAuthenticateChallenges(ResourceException exc) {\n\n        // first check to see if this is an auth failure and if\n        // that's the case include the WWW-Authenticate challenge\n\n        if (exc.getCode() != ResourceException.UNAUTHORIZED) {\n            return;\n        }\n\n        Set<String> authChallenges = (Set<String>) request.getAttribute(Http.AUTH_CHALLENGES);\n        if (authChallenges == null) {\n            return;\n        }\n\n        // check if we're going to return multiple WWW-Authenticate headers\n        // or combine them into a single comma separated value\n        // One issue: with Kerberos curl supports auto negotiate only\n        // the value is passed in a separate header\n\n        if (SEND_MULTIPLE_WWW_AUTHENTICATE_HEADERS) {\n            for (String challenge : authChallenges) {\n                response.addHeader(Http.WWW_AUTHENTICATE, challenge);\n            }\n        } else {\n            response.addHeader(Http.WWW_AUTHENTICATE, String.join(\", \", authChallenges));\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#CastExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)CastExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(SimpleName)SimpleName(Block(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "If requested include the WWW-Authenticate challenge response header for this request. This is only done if the exception was thrown for invalid credentials.", "call_func_name": ["com.yahoo.athenz.common.server.rest.ResourceException.getCode", "javax.servlet.http.HttpServletRequest.getAttribute", "java.util.Set.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "javax.servlet.http.HttpServletResponse.addHeader", "java.lang.String.join"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.String"], ["java.lang.CharSequence", "java.lang.Iterable"]], "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/db/PoolableDataSource.java", "methodName": "com.yahoo.athenz.common.server.db.PoolableDataSource.clearPoolConnections", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void clearPoolConnections();", "AST": "Javadoc#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Clears all idle connections in the pool", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/audit/AuditReferenceValidatorFactory.java", "methodName": "com.yahoo.athenz.common.server.audit.AuditReferenceValidatorFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "AuditReferenceValidator create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new AuditReferenceValidator instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/audit/AuditReferenceValidator.java", "methodName": "com.yahoo.athenz.common.server.audit.AuditReferenceValidator.validateReference", "methodParameterType": "String#String#String#", "methodParameterName": "auditRef#principal#operation#", "methodBody": "boolean validateReference(String auditRef, String principal, String operation);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Validate the Audit Reference for audit enabled domains", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/cert/CertSignerFactory.java", "methodName": "com.yahoo.athenz.common.server.cert.CertSignerFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "CertSigner create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new CertSigner instance. The CertSigner will be responsible for generating a X509 Certificate based on the provider CSR.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/cert/CertSigner.java", "methodName": "com.yahoo.athenz.common.server.cert.CertSigner.generateX509Certificate", "methodParameterType": "String#String#int#", "methodParameterName": "csr#keyUsage#expiryTime#", "methodBody": "default String generateX509Certificate(String csr, String keyUsage, int expiryTime) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a signed X509 Certificate based on the given request. The signer imposes how long the certificate is valid for. The result must be the certificate in PEM format.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/cert/CertSigner.java", "methodName": "com.yahoo.athenz.common.server.cert.CertSigner.getCACertificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default String getCACertificate() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the CA certificate in PEM format. This will be returned along with the x509 certificate back to the client.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/cert/CertSigner.java", "methodName": "com.yahoo.athenz.common.server.cert.CertSigner.getMaxCertExpiryTimeMins", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default int getMaxCertExpiryTimeMins() {\n        return 0;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#NumberLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(NumberLiteral)NumberLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the certificate max expiry time supported by the given signer", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/server/cert/CertSigner.java", "methodName": "com.yahoo.athenz.common.server.cert.CertSigner.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default void close() {\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block)Block)MethodDeclaration", "methodDoc": "Close the certSigner signer object and release all allocated resources (if any)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/filter/RateLimit.java", "methodName": "com.yahoo.athenz.common.filter.RateLimit.filter", "methodParameterType": "ServletRequest#ServletResponse#", "methodParameterName": "servletRequest#servletResponse#", "methodBody": "boolean filter(ServletRequest servletRequest, ServletResponse servletResponse);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "filter based on rate limit", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos24/athenz/libs/java/server_common/src/main/java/com/yahoo/athenz/common/filter/RateLimitFactory.java", "methodName": "com.yahoo.athenz.common.filter.RateLimitFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "RateLimit create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new RateLimit instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSCredentialsProviderImpl.java", "methodName": "com.yahoo.athenz.zts.AWSCredentialsProviderImpl.AWSCredentialsProviderImpl", "methodParameterType": "ZTSClient#String#String#", "methodParameterName": "ztsClient#domainName#roleName#", "methodBody": "public AWSCredentialsProviderImpl(ZTSClient ztsClient, String domainName, String roleName) {\n\n        initCredProvider(ztsClient, false, domainName, roleName, null,\n                null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new AWSCredentialsProvider object with the given zts client object, Athenz domain name and AWS Role Name to retrieve temporary credentials for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSCredentialsProviderImpl.java", "methodName": "com.yahoo.athenz.zts.AWSCredentialsProviderImpl.AWSCredentialsProviderImpl", "methodParameterType": "ZTSClient#String#String#String#Integer#Integer#", "methodParameterName": "ztsClient#domainName#roleName#externalId#minExpiryTime#maxExpiryTime#", "methodBody": "public AWSCredentialsProviderImpl(ZTSClient ztsClient, String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime) {\n\n        initCredProvider(ztsClient, false, domainName, roleName, externalId,\n                minExpiryTime, maxExpiryTime);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new AWSCredentialsProvider object with the given zts client object, Athenz domain name and AWS Role Name to retrieve temporary credentials for.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSCredentialsProviderImpl.java", "methodName": "com.yahoo.athenz.zts.AWSCredentialsProviderImpl.AWSCredentialsProviderImpl", "methodParameterType": "String#SSLContext#String#String#String#Integer#Integer#", "methodParameterName": "ztsUrl#sslContext#domainName#roleName#externalId#minExpiryTime#maxExpiryTime#", "methodBody": "public AWSCredentialsProviderImpl(String ztsUrl, SSLContext sslContext,\n            String domainName, String roleName, String externalId,\n            Integer minExpiryTime, Integer maxExpiryTime) {\n\n        initCredProvider(new ZTSClient(ztsUrl, sslContext), true, domainName, roleName,\n                externalId, minExpiryTime, maxExpiryTime);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new AWSCredentialsProvider object with the given SSLContext object, ZTS Server Url, Athenz domain name and AWS Role Name to retrieve temporary credentials for. The constructor will automatically create and use the ZTS client object for retrieving credentials. This object must be closed so the ZTS client object is closed as well.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSCredentialsProviderImpl.java", "methodName": "com.yahoo.athenz.zts.AWSCredentialsProviderImpl.AWSCredentialsProviderImpl", "methodParameterType": "String#SSLContext#String#String#", "methodParameterName": "ztsUrl#sslContext#domainName#roleName#", "methodBody": "public AWSCredentialsProviderImpl(String ztsUrl, SSLContext sslContext,\n            String domainName, String roleName) {\n\n        initCredProvider(new ZTSClient(ztsUrl, sslContext), true, domainName, roleName,\n                null, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#BooleanLiteral#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new AWSCredentialsProvider object with the given SSLContext object, ZTS Server Url, Athenz domain name and AWS Role Name to retrieve temporary credentials for. The constructor will automatically create and use the ZTS client object for retrieving credentials. This object must be closed so the ZTS client object is closed as well.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSCredentialsProviderImpl.java", "methodName": "com.yahoo.athenz.zts.AWSCredentialsProviderImpl.setAwsAutoRefreshEnable", "methodParameterType": "boolean#", "methodParameterName": "state#", "methodBody": "public static void setAwsAutoRefreshEnable(boolean state) {\n        awsAutoRefreshEnable = state;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Configure whether or not to auto refresh the credentials when the credentials provider object is created", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "201", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClientService.java", "methodName": "com.yahoo.athenz.zts.ZTSClientService.loadTokens", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "default Collection<RoleTokenDescriptor> loadTokens() {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "ZTSClient calls to pre-load the Athenz client token cache.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "202", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClientService.java", "methodName": "com.yahoo.athenz.zts.ZTSClientService.fetchToken", "methodParameterType": "String#String#String#String#Integer#Integer#String#", "methodParameterName": "clientDomainName#clientServiceName#domainName#roleName#minExpiryTime#maxExpiryTime#proxyForPrincipal#", "methodBody": "default RoleToken fetchToken(String clientDomainName, String clientServiceName,\n                                 String domainName, String roleName, Integer minExpiryTime, Integer maxExpiryTime,\n                                 String proxyForPrincipal) {\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "ZTSClient will use this implementation to get a role token and avoid using the cache if a token is returned. If no token is returned, ZTSClient will process in the usual way - lookup in the cache (if not disabled) and then if not found contact ZTS Server directly to retrieve the role token. For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "203", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setX509CertDnsName", "methodParameterType": "String#", "methodParameterName": "dnsName#", "methodBody": "public static void setX509CertDnsName(final String dnsName) {\n        x509CertDNSName = dnsName;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the X509 Cert DNS Name in case ZTS Server is running with a certificate not matching its hostname", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "204", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setConnectionTimeouts", "methodParameterType": "int#int#", "methodParameterName": "connectTimeout#readTimeout#", "methodBody": "public static void setConnectionTimeouts(int connectTimeout, int readTimeout) {\n         reqConnectTimeout = connectTimeout;\n         reqReadTimeout = readTimeout;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set request connection and read timeout", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "205", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setX509CsrDetails", "methodParameterType": "String#String#", "methodParameterName": "csrDn#csrDomain#", "methodBody": "public static void setX509CsrDetails(final String csrDn, final String csrDomain) {\n        x509CsrDn = csrDn;\n        x509CsrDomain = csrDomain;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set X509 CSR Details - DN and domain name. These values can be specified in the generate csr function as well in which case these will be ignored.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "206", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setCacheDisable", "methodParameterType": "boolean#", "methodParameterName": "cacheState#", "methodBody": "public static void setCacheDisable(boolean cacheState) {\n        cacheDisabled = cacheState;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Disable the cache of role tokens if configured.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "207", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setPrefetchAutoEnable", "methodParameterType": "boolean#", "methodParameterName": "fetchState#", "methodBody": "public static void setPrefetchAutoEnable(boolean fetchState) {\n        prefetchAutoEnable = fetchState;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Enable prefetch of role tokens", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "208", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setPrefetchInterval", "methodParameterType": "int#", "methodParameterName": "interval#", "methodBody": "public static void setPrefetchInterval(int interval) {\n        prefetchInterval = interval;\n        if (prefetchInterval >= tokenMinExpiryTime) {\n            prefetchInterval = 60;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the prefetch interval. if the prefetch interval is longer than our token min expiry time, then we'll default back to 60 seconds", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "209", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setTokenMinExpiryTime", "methodParameterType": "int#", "methodParameterName": "minExpiryTime#", "methodBody": "public static void setTokenMinExpiryTime(int minExpiryTime) {\n        \n        // The minimum token expiry time by default is 15 minutes (900). By default the\n        // server gives out role tokens for 2 hours and with this setting we'll be able\n        // to cache tokens for 1hr45mins before requesting a new one from ZTS\n\n        tokenMinExpiryTime = minExpiryTime;\n        if (tokenMinExpiryTime < 0) {\n            tokenMinExpiryTime = 900;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the minimum token expiry time. The server will not give out tokens less than configured expiry time", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "210", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZTSClient() {\n        initClient(null, null, null, null, null);\n        enablePrefetch = false; // can't use this domain and service for prefetch\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with default settings. The url for ZTS Server is automatically retrieved from the athenz configuration file (ztsUrl field). The client can only be used to retrieve objects from ZTS that do not require any authentication otherwise addCredentials method must be used to set the principal identity. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "211", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "String#", "methodParameterName": "ztsUrl#", "methodBody": "public ZTSClient(String ztsUrl) {\n        initClient(ztsUrl, null, null, null, null);\n        enablePrefetch = false; // can't use this domain and service for prefetch\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with the given ZTS Server Url. If the specified zts url is null, then it is automatically retrieved from athenz.conf configuration file (ztsUrl field). Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds. This client object can only be used for API calls that require no authentication or setting the principal using addCredentials method before calling any other authentication protected API.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "212", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "Principal#", "methodParameterName": "identity#", "methodBody": "public ZTSClient(Principal identity) {\n        this(null, identity);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with the given principal identity. The url for ZTS Server is automatically retrieved from the athenz configuration file (ztsUrl field). Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "213", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "String#Principal#", "methodParameterName": "ztsUrl#identity#", "methodBody": "public ZTSClient(String ztsUrl, Principal identity) {\n        \n        // verify we have a valid principal and authority\n        \n        if (identity == null) {\n            throw new IllegalArgumentException(\"Principal object must be specified\");\n        }\n        if (identity.getAuthority() == null) {\n            throw new IllegalArgumentException(\"Principal Authority cannot be null\");\n        }\n        initClient(ztsUrl, identity, null, null, null);\n        enablePrefetch = false; // can't use this domain and service for prefetch\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with the given principal identity and ZTS Server Url. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "214", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "String#SSLContext#", "methodParameterName": "ztsUrl#sslContext#", "methodBody": "public ZTSClient(String ztsUrl, SSLContext sslContext) {\n        this(ztsUrl, null, sslContext);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with the given SSLContext object and ZTS Server Url. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "215", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "String#String#SSLContext#", "methodParameterName": "ztsUrl#proxyUrl#sslContext#", "methodBody": "public ZTSClient(String ztsUrl, String proxyUrl, SSLContext sslContext) {\n        \n        // verify we have a valid ssl context specified\n        \n        if (sslContext == null) {\n            throw new IllegalArgumentException(\"SSLContext object must be specified\");\n        }\n        this.sslContext = sslContext;\n        this.proxyUrl = proxyUrl;\n        initClient(ztsUrl, null, null, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with the given SSLContext object and ZTS Server Url through the specified Proxy URL. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "216", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "String#String#ServiceIdentityProvider#", "methodParameterName": "domainName#serviceName#siaProvider#", "methodBody": "public ZTSClient(String domainName, String serviceName, ServiceIdentityProvider siaProvider) {\n        this(null, domainName, serviceName, siaProvider);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with the given service details identity provider (which will provide the ntoken for the service) The ZTS Server url is automatically retrieved from athenz.conf configuration file (ztsUrl field). Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "217", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.ZTSClient", "methodParameterType": "String#String#String#ServiceIdentityProvider#", "methodParameterName": "ztsUrl#domainName#serviceName#siaProvider#", "methodBody": "public ZTSClient(String ztsUrl, String domainName, String serviceName,\n            ServiceIdentityProvider siaProvider) {\n        if (domainName == null || domainName.isEmpty()) {\n            throw new IllegalArgumentException(\"Domain name must be specified\");\n        }\n        if (serviceName == null || serviceName.isEmpty()) {\n            throw new IllegalArgumentException(\"Service name must be specified\");\n        }\n        if (siaProvider == null) {\n            throw new IllegalArgumentException(\"Service Identity Provider must be specified\");\n        }\n        initClient(ztsUrl, null, domainName, serviceName, siaProvider);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZTSClient object with the given service details identity provider (which will provide the ntoken for the service) and ZTS Server Url. If the specified zts url is null, then it is automatically retrieved from athenz.conf configuration file (ztsUrl field). Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zts.client.read_timeout and athenz.zts.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "218", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public void close() {\n        ztsClient.close();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Close the ZTSClient object and release any allocated resources.", "call_func_name": ["com.yahoo.athenz.zts.ZTSRDLGeneratedClient.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "219", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setEnablePrefetch", "methodParameterType": "boolean#", "methodParameterName": "state#", "methodBody": "public void setEnablePrefetch(boolean state) {\n        enablePrefetch = state;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Call to enable/disable prefetch for the current ZTSClient.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "220", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.setProperty", "methodParameterType": "String#Object#", "methodParameterName": "name#value#", "methodBody": "public void setProperty(String name, Object value) {\n        if (ztsClient != null) {\n            ztsClient.setProperty(name, value);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set new ZTS Client configuration property. This method calls internal javax.ws.rs.client.Client client's property method. If already set, the existing value of the property will be updated. Setting a null value into a property effectively removes the property from the property bag.", "call_func_name": ["com.yahoo.athenz.zts.ZTSRDLGeneratedClient.setProperty"], "call_func_parameter": [["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "221", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.cancelPrefetch", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void cancelPrefetch() {\n        PREFETCH_SCHEDULED_ITEMS.clear();\n        if (FETCH_TIMER != null) {\n            FETCH_TIMER.purge();\n            FETCH_TIMER.cancel();\n            FETCH_TIMER = null;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Cancel the Prefetch Timer. This removes all the prefetch items from the list, purges and cancels the fetch timer. This should be called before application shutdown.", "call_func_name": ["java.util.Queue.clear", "java.util.Timer.purge", "java.util.Timer.cancel"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "222", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getZTSUrl", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getZTSUrl() {\n        return ztsUrl;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the locally configured ZTS Server's URL value", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "223", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.createSSLContext", "methodParameterType": "String#char[]#String#String#boolean#", "methodParameterName": "trustStorePath#trustStorePassword#publicCertFile#privateKeyFile#monitorKeyCertUpdates#", "methodBody": "public SSLContext createSSLContext(final String trustStorePath, final char[] trustStorePassword,\n                 final String publicCertFile, final String privateKeyFile, boolean monitorKeyCertUpdates)\n            throws InterruptedException, KeyRefresherException, IOException {\n\n        // Create our SSL Context object based on our private key and\n        // certificate and jdk truststore\n\n        KeyRefresher keyRefresher = Utils.generateKeyRefresher(trustStorePath, trustStorePassword,\n                publicCertFile, privateKeyFile, KEY_REFRESHER_LISTENER);\n        SSLContext sslContext = Utils.buildSSLContext(keyRefresher.getKeyManagerProxy(),\n                keyRefresher.getTrustManagerProxy());\n        if (monitorKeyCertUpdates) {\n            keyRefresher.startup();\n        }\n        return sslContext;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#PrimitiveType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the SSLContext object based on give key/cert and trusttore files. If configured, the method will monitor any changes in the given key/cert files and automatically update the ssl context.", "call_func_name": ["com.oath.auth.Utils.generateKeyRefresher", "com.oath.auth.KeyRefresher.getKeyManagerProxy", "com.oath.auth.KeyRefresher.getTrustManagerProxy", "com.oath.auth.Utils.buildSSLContext", "com.oath.auth.KeyRefresher.startup"], "call_func_parameter": [["java.lang.String", "char[]", "java.lang.String", "java.lang.String", "com.oath.auth.KeyRefresherListener"], [""], [""], ["com.oath.auth.KeyManagerProxy", "com.oath.auth.TrustManagerProxy"], [""]], "passed_comments": [{"com.oath.auth.Utils.generateKeyRefresher": "Generate the KeyRefresher object first as the server will need access to it (to turn it off and on as needed). It requires that the proxies are created which are then stored in the KeyRefresher. This method requires the paths to the private key and certificate files along with the trust-store path which has been created already and just needs to be monitored for changes."}, {"com.oath.auth.Utils.buildSSLContext": "this method will create a new SSLContext object that can be updated on the fly should the public/private keys / trustStore change."}]}, {"index": "224", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getHeader", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static String getHeader() {\n        return ROLE_TOKEN_HEADER;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Returns the header name that the client needs to use to pass the received RoleToken to the Athenz protected service.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "225", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.addCredentials", "methodParameterType": "Principal#", "methodParameterName": "identity#", "methodBody": "public ZTSClient addCredentials(Principal identity) {\n        return addPrincipalCredentials(identity, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set client credentials based on the given principal.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.addPrincipalCredentials"], "call_func_parameter": [["com.yahoo.athenz.auth.Principal", "boolean"]], "passed_comments": "/"}, {"index": "226", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.addCredentials", "methodParameterType": "String#String#", "methodParameterName": "credHeader#credToken#", "methodBody": "public void addCredentials(String credHeader, String credToken) {\n        ztsClient.addCredentials(credHeader, credToken);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the client credentials using the specified header and token.", "call_func_name": ["com.yahoo.athenz.zts.ZTSRDLGeneratedClient.addCredentials"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "227", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.clearCredentials", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZTSClient clearCredentials() {\n        \n        if (principal != null) {\n            ztsClient.addCredentials(principal.getAuthority().getHeader(), null);\n            principal = null;\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Clear the principal identity set for the client. Unless a new principal is set using the addCredentials method, the client can only be used to requests data from the ZTS Server that doesn't require any authentication.", "call_func_name": ["com.yahoo.athenz.auth.Principal.getAuthority", "com.yahoo.athenz.auth.Authority.getHeader", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.addCredentials"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.Principal.getAuthority": "@return the authority over this principal. Can be null, if not authenticated."}, {"com.yahoo.athenz.auth.Authority.getHeader": "@return a string describing where to find the credentials in a request, i.e. \"X-Auth-Token\" or \"Cookie.User\""}]}, {"index": "228", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getHostServices", "methodParameterType": "String#", "methodParameterName": "host#", "methodBody": "public HostServices getHostServices(String host) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getHostServices(host);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve list of services that have been configured to run on the specified host", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getHostServices", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "229", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getJWKList", "methodParameterType": "boolean#", "methodParameterName": "rfcCurveNames#", "methodBody": "public JWKList getJWKList(boolean rfcCurveNames) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getJWKList(rfcCurveNames);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve list of ZTS Server public keys in Json WEB Key (JWK) format", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getJWKList"], "call_func_parameter": [["boolean"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getJWKList": "Retrieve list of ZTS Server public keys in Json WEB Key (JWK) format"}]}, {"index": "230", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getJWKList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public JWKList getJWKList() {\n        return getJWKList(false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve list of ZTS Server public keys in Json WEB Key (JWK) format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "231", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getRoleToken", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public RoleToken getRoleToken(String domainName) {\n        return getRoleToken(domainName, null, null, null, false, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#BooleanLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain. The client will automatically fulfill the request from the cache, if possible. The default minimum expiry time is 900 secs (15 mins).", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getRoleToken"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "boolean", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getRoleToken": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain"}]}, {"index": "232", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getRoleToken", "methodParameterType": "String#String#", "methodParameterName": "domainName#roleNames#", "methodBody": "public RoleToken getRoleToken(String domainName, String roleNames) {\n        if (roleNames == null || roleNames.isEmpty()) {\n            throw new IllegalArgumentException(\"RoleNames cannot be null or empty\");\n        }\n        return getRoleToken(domainName, roleNames, null, null, false, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#BooleanLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain and filtered to include only those that end with the specified suffix. The client will automatically fulfill the request from the cache, if possible. The default minimum expiry time is 900 secs (15 mins).", "call_func_name": ["java.lang.String.isEmpty", "java.lang.IllegalArgumentException.<init>", "com.yahoo.athenz.zts.ZTSClient.getRoleToken"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "boolean", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getRoleToken": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain"}]}, {"index": "233", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getRoleToken", "methodParameterType": "String#String#Integer#Integer#boolean#", "methodParameterName": "domainName#roleNames#minExpiryTime#maxExpiryTime#ignoreCache#", "methodBody": "public RoleToken getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache) {\n        return getRoleToken(domainName, roleNames, minExpiryTime, maxExpiryTime,\n                ignoreCache, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getRoleToken"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "boolean", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getRoleToken": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain"}]}, {"index": "234", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getRoleToken", "methodParameterType": "String#String#Integer#Integer#boolean#String#", "methodParameterName": "domainName#roleNames#minExpiryTime#maxExpiryTime#ignoreCache#proxyForPrincipal#", "methodBody": "public RoleToken getRoleToken(String domainName, String roleNames, Integer minExpiryTime,\n            Integer maxExpiryTime, boolean ignoreCache, String proxyForPrincipal) {\n        \n        RoleToken roleToken;\n\n        // first lookup in our cache to see if it can be satisfied\n        // only if we're not asked to ignore the cache\n\n        String cacheKey = null;\n        if (!cacheDisabled) {\n            cacheKey = getRoleTokenCacheKey(domainName, roleNames, proxyForPrincipal);\n            if (cacheKey != null && !ignoreCache) {\n                roleToken = lookupRoleTokenInCache(cacheKey, minExpiryTime, maxExpiryTime, tokenMinExpiryTime);\n                if (roleToken != null) {\n                    return roleToken;\n                }\n                // start prefetch for this token if prefetch is enabled\n                if (enablePrefetch && prefetchAutoEnable) {\n                    if (prefetchRoleToken(domainName, roleNames, minExpiryTime, maxExpiryTime,\n                            proxyForPrincipal)) {\n                        roleToken = lookupRoleTokenInCache(cacheKey, minExpiryTime, maxExpiryTime, tokenMinExpiryTime);\n                    }\n                    if (roleToken != null) {\n                        return roleToken;\n                    }\n                    LOG.error(\"GetRoleToken: cache prefetch and lookup error\");\n                }\n            }\n        }\n        \n        // 2nd look in service providers\n        //\n        for (ZTSClientService provider: ztsTokenProviders) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"getRoleToken: found service provider={}\", provider);\n            }\n            \n            // provider needs to know who the client is so we'll be passing\n            // the client's domain and service names as the first two fields\n            \n            roleToken = provider.fetchToken(domain, service, domainName, roleNames,\n                    minExpiryTime, maxExpiryTime, proxyForPrincipal);\n            if (roleToken != null) {\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"getRoleToken: service provider={} returns token\", provider);\n                }\n                return roleToken;\n            }\n        }\n        \n        // if no hit then we need to request a new token from ZTS\n        \n        updateServicePrincipal();\n        try {\n            roleToken = ztsClient.getRoleToken(domainName, roleNames,\n                    minExpiryTime, maxExpiryTime, proxyForPrincipal);\n        } catch (ResourceException ex) {\n\n            // if we have an entry in our cache then we'll return that\n            // instead of returning failure\n\n            if (cacheKey != null && !ignoreCache) {\n                roleToken = lookupRoleTokenInCache(cacheKey, null, null, 1);\n                if (roleToken != null) {\n                    return roleToken;\n                }\n            }\n\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n\n            // if we have an entry in our cache then we'll return that\n            // instead of returning failure\n\n            if (cacheKey != null && !ignoreCache) {\n                roleToken = lookupRoleTokenInCache(cacheKey, null, null, 1);\n                if (roleToken != null) {\n                    return roleToken;\n                }\n            }\n\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n        \n        // need to add the token to our cache. If our principal was\n        // updated then we need to retrieve a new cache key\n        \n        if (!cacheDisabled) {\n            if (cacheKey == null) {\n                cacheKey = getRoleTokenCacheKey(domainName, roleNames, proxyForPrincipal);\n            }\n            if (cacheKey != null) {\n                ROLE_TOKEN_CACHE.put(cacheKey, roleToken);\n            }\n        }\n        return roleToken;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#NumberLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#PrefixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)EnhancedForStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NumberLiteral)NumberLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getRoleTokenCacheKey", "com.yahoo.athenz.zts.ZTSClient.lookupRoleTokenInCache", "com.yahoo.athenz.zts.ZTSClient.prefetchRoleToken", "org.slf4j.Logger.error", "java.util.ServiceLoader.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "org.slf4j.Logger.isDebugEnabled", "org.slf4j.Logger.debug", "com.yahoo.athenz.zts.ZTSClientService.fetchToken", "com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getRoleToken", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage", "java.util.concurrent.ConcurrentHashMap.put"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Integer", "java.lang.Integer", "int"], ["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "java.lang.String"], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.prefetchRoleToken": "Pre-fetches role tokens so that the client does not take the hit of contacting ZTS Server for its first request (avg ~75ms). The client library will automatically try to keep the cache up to date such that the tokens are never expired and regular getRoleToken requests are fulfilled from the cache instead of contacting ZTS Server."}, {"com.yahoo.athenz.zts.ZTSClientService.fetchToken": "ZTSClient will use this implementation to get a role token and avoid using the cache if a token is returned. If no token is returned, ZTSClient will process in the usual way - lookup in the cache (if not disabled) and then if not found contact ZTS Server directly to retrieve the role token. For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain"}]}, {"index": "235", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAccessToken", "methodParameterType": "String#List<String>#long#", "methodParameterName": "domainName#roleNames#expiryTime#", "methodBody": "public AccessTokenResponse getAccessToken(String domainName, List<String> roleNames, long expiryTime) {\n        return getAccessToken(domainName, roleNames, null, null, expiryTime, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Access Token that includes the list of roles that the principal has access to in the specified domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getAccessToken"], "call_func_parameter": [["java.lang.String", "java.util.List", "java.lang.String", "java.lang.String", "long", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getAccessToken": "For the specified requester(user/service) return the corresponding Access Token that includes the list of roles that the principal has access to in the specified domain"}]}, {"index": "236", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAccessToken", "methodParameterType": "String#List<String>#String#long#boolean#", "methodParameterName": "domainName#roleNames#idTokenServiceName#expiryTime#ignoreCache#", "methodBody": "public AccessTokenResponse getAccessToken(String domainName, List<String> roleNames,\n            String idTokenServiceName, long expiryTime, boolean ignoreCache) {\n        return getAccessToken(domainName, roleNames, idTokenServiceName, null, expiryTime, ignoreCache);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Access Token that includes the list of roles that the principal has access to in the specified domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getAccessToken"], "call_func_parameter": [["java.lang.String", "java.util.List", "java.lang.String", "java.lang.String", "long", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getAccessToken": "For the specified requester(user/service) return the corresponding Access Token that includes the list of roles that the principal has access to in the specified domain"}]}, {"index": "237", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAccessToken", "methodParameterType": "String#List<String>#String#String#long#boolean#", "methodParameterName": "domainName#roleNames#idTokenServiceName#proxyForPrincipal#expiryTime#ignoreCache#", "methodBody": "public AccessTokenResponse getAccessToken(String domainName, List<String> roleNames, String idTokenServiceName,\n            String proxyForPrincipal, long expiryTime, boolean ignoreCache) {\n\n        AccessTokenResponse accessTokenResponse;\n\n        // first lookup in our cache to see if it can be satisfied\n        // only if we're not asked to ignore the cache\n\n        String cacheKey = null;\n        if (!cacheDisabled) {\n            cacheKey = getAccessTokenCacheKey(domainName, roleNames, idTokenServiceName, proxyForPrincipal);\n            if (cacheKey != null && !ignoreCache) {\n                accessTokenResponse = lookupAccessTokenResponseInCache(cacheKey, expiryTime);\n                if (accessTokenResponse != null) {\n                    return accessTokenResponse;\n                }\n                // start prefetch for this token if prefetch is enabled\n                if (enablePrefetch && prefetchAutoEnable) {\n                    if (prefetchAccessToken(domainName, roleNames, idTokenServiceName,\n                            proxyForPrincipal, expiryTime)) {\n                        accessTokenResponse = lookupAccessTokenResponseInCache(cacheKey, expiryTime);\n                    }\n                    if (accessTokenResponse != null) {\n                        return accessTokenResponse;\n                    }\n                    LOG.error(\"GetAccessToken: cache prefetch and lookup error\");\n                }\n            }\n        }\n\n        // if no hit then we need to request a new token from ZTS\n\n        updateServicePrincipal();\n        try {\n            final String requestBody = generateAccessTokenRequestBody(domainName, roleNames,\n                    idTokenServiceName, proxyForPrincipal, expiryTime);\n            accessTokenResponse = ztsClient.postAccessTokenRequest(requestBody);\n        } catch (ResourceException ex) {\n            if (cacheKey != null && !ignoreCache) {\n                accessTokenResponse = lookupAccessTokenResponseInCache(cacheKey, -1);\n                if (accessTokenResponse != null) {\n                    return accessTokenResponse;\n                }\n            }\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            if (cacheKey != null && !ignoreCache) {\n                accessTokenResponse = lookupAccessTokenResponseInCache(cacheKey, -1);\n                if (accessTokenResponse != null) {\n                    return accessTokenResponse;\n                }\n            }\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n\n        // need to add the token to our cache. If our principal was\n        // updated then we need to retrieve a new cache key\n\n        if (!cacheDisabled) {\n            if (cacheKey == null) {\n                cacheKey = getAccessTokenCacheKey(domainName, roleNames, idTokenServiceName, proxyForPrincipal);\n            }\n            if (cacheKey != null) {\n                ACCESS_TOKEN_CACHE.put(cacheKey, new AccessTokenResponseCacheEntry(accessTokenResponse));\n            }\n        }\n        return accessTokenResponse;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#PrefixExpression#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#PrefixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Access Token that includes the list of roles that the principal has access to in the specified domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getAccessTokenCacheKey", "com.yahoo.athenz.zts.ZTSClient.lookupAccessTokenResponseInCache", "com.yahoo.athenz.zts.ZTSClient.prefetchAccessToken", "org.slf4j.Logger.error", "com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSClient.generateAccessTokenRequestBody", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.postAccessTokenRequest", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage", "com.yahoo.athenz.zts.AccessTokenResponseCacheEntry.<init>", "java.util.concurrent.ConcurrentHashMap.put"], "call_func_parameter": [["java.lang.String", "java.util.List", "java.lang.String", "java.lang.String"], ["java.lang.String", "long"], ["java.lang.String", "java.util.List", "java.lang.String", "java.lang.String", "long"], ["java.lang.String"], [""], ["java.lang.String", "java.util.List", "java.lang.String", "java.lang.String", "long"], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""], ["com.yahoo.athenz.zts.AccessTokenResponse"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "238", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.postRoleCertificateRequest", "methodParameterType": "String#String#RoleCertificateRequest#", "methodParameterName": "domainName#roleName#req#", "methodBody": "public RoleToken postRoleCertificateRequest(String domainName, String roleName,\n            RoleCertificateRequest req) {\n        \n        updateServicePrincipal();\n        try {\n            return ztsClient.postRoleCertificateRequest(domainName, roleName, req);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getMessage());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "For the specified requester(user/service) return the corresponding Role Certificate", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.postRoleCertificateRequest", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getMessage", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zts.RoleCertificateRequest"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "239", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.generateRoleCertificateRequest", "methodParameterType": "String#String#String#String#PrivateKey#String#String#int#", "methodParameterName": "principalDomain#principalService#roleDomainName#roleName#privateKey#csrDn#csrDomain#expiryTime#", "methodBody": "static public RoleCertificateRequest generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            PrivateKey privateKey, final String csrDn, final String csrDomain, int expiryTime) {\n        \n        if (principalDomain == null || principalService == null) {\n            throw new IllegalArgumentException(\"Principal's Domain and Service must be specified\");\n        }\n        \n        if (roleDomainName == null || roleName == null) {\n            throw new IllegalArgumentException(\"Role DomainName and Name must be specified\");\n        }\n        \n        if (csrDomain == null) {\n            throw new IllegalArgumentException(\"X509 CSR Domain must be specified\");\n        }\n        \n        // Athenz uses lower case for all elements, so let's\n        // generate our dn which will be our role resource value\n        \n        final String domain = principalDomain.toLowerCase();\n        final String service = principalService.toLowerCase();\n        \n        String dn = \"cn=\" + roleDomainName.toLowerCase() + \":role.\" + roleName.toLowerCase();\n        if (csrDn != null) {\n            dn = dn.concat(\",\").concat(csrDn);\n        }\n        \n        // now let's generate our dsnName and email fields which will based on\n        // our principal's details\n\n        final String hostName = service + '.' + domain.replace('.', '-') + '.' + csrDomain;\n        final String email = domain + \".\" + service + \"@\" + csrDomain;\n        \n        GeneralName[] sanArray = new GeneralName[2];\n        sanArray[0] = new GeneralName(GeneralName.dNSName, new DERIA5String(hostName));\n        sanArray[1] = new GeneralName(GeneralName.rfc822Name, new DERIA5String(email));\n        \n        String csr;\n        try {\n            csr = Crypto.generateX509CSR(privateKey, dn, sanArray);\n        } catch (OperatorCreationException | IOException ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n\n        return new RoleCertificateRequest().setCsr(csr).setExpiryTime((long) expiryTime);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#CharacterLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#PrimitiveType#SimpleName#CastExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CastExpression(PrimitiveType)PrimitiveType(SimpleName)SimpleName)CastExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a Role Certificate request that could be sent to ZTS to obtain a X509 Certificate for the requested role.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.String.toLowerCase", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.concat", "java.lang.StringBuilder.append", "java.lang.String.replace", "org.bouncycastle.asn1.DERIA5String.<init>", "org.bouncycastle.asn1.x509.GeneralName.<init>", "com.yahoo.athenz.auth.util.Crypto.generateX509CSR", "java.lang.Exception.getMessage", "com.yahoo.athenz.zts.ZTSClientException.<init>", "com.yahoo.athenz.zts.RoleCertificateRequest.<init>", "com.yahoo.athenz.zts.RoleCertificateRequest.setCsr", "com.yahoo.athenz.zts.RoleCertificateRequest.setExpiryTime"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["char"], ["char", "char"], ["java.lang.String"], ["int", "org.bouncycastle.asn1.ASN1Encodable"], ["java.security.PrivateKey", "java.lang.String", "org.bouncycastle.asn1.x509.GeneralName[]"], [""], ["int", "java.lang.Object"], [""], ["java.lang.String"], ["long"]], "passed_comments": "/"}, {"index": "240", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.generateRoleCertificateRequest", "methodParameterType": "String#String#String#String#PrivateKey#String#int#", "methodParameterName": "principalDomain#principalService#roleDomainName#roleName#privateKey#cloud#expiryTime#", "methodBody": "static public RoleCertificateRequest generateRoleCertificateRequest(final String principalDomain,\n            final String principalService, final String roleDomainName, final String roleName,\n            final PrivateKey privateKey, final String cloud, int expiryTime) {\n        \n        if (cloud == null) {\n            throw new IllegalArgumentException(\"Cloud Environment must be specified\");\n        }\n        \n        String csrDomain;\n        if (x509CsrDomain != null) {\n            csrDomain = cloud + \".\" + x509CsrDomain;\n        } else {\n            csrDomain = cloud;\n        }\n\n        return generateRoleCertificateRequest(principalDomain, principalService,\n                roleDomainName, roleName, privateKey, x509CsrDn, csrDomain,\n                expiryTime);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a Role Certificate request that could be sent to ZTS to obtain a X509 Certificate for the requested role.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.yahoo.athenz.zts.ZTSClient.generateRoleCertificateRequest"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.security.PrivateKey", "java.lang.String", "java.lang.String", "int"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.generateRoleCertificateRequest": "Generate a Role Certificate request that could be sent to ZTS to obtain a X509 Certificate for the requested role."}]}, {"index": "241", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.generateInstanceRefreshRequest", "methodParameterType": "String#String#PrivateKey#String#String#int#", "methodParameterName": "principalDomain#principalService#privateKey#csrDn#csrDomain#expiryTime#", "methodBody": "static public InstanceRefreshRequest generateInstanceRefreshRequest(final String principalDomain,\n            final String principalService, PrivateKey privateKey, final String csrDn,\n            final String csrDomain, int expiryTime) {\n        \n        if (principalDomain == null || principalService == null) {\n            throw new IllegalArgumentException(\"Principal's Domain and Service must be specified\");\n        }\n        \n        if (csrDomain == null) {\n            throw new IllegalArgumentException(\"X509 CSR Domain must be specified\");\n        }\n        \n        // Athenz uses lower case for all elements, so let's\n        // generate our dn which will be based on our service name\n        \n        final String domain = principalDomain.toLowerCase();\n        final String service = principalService.toLowerCase();\n        final String cn = domain + \".\" + service;\n        \n        String dn = \"cn=\" + cn;\n        if (csrDn != null) {\n            dn = dn.concat(\",\").concat(csrDn);\n        }\n        \n        // now let's generate our dsnName field based on our principal's details\n\n        final String hostName = service + '.' + domain.replace('.', '-') + '.' + csrDomain;\n        \n        GeneralName[] sanArray = new GeneralName[1];\n        sanArray[0] = new GeneralName(GeneralName.dNSName, new DERIA5String(hostName));\n        \n        String csr;\n        try {\n            csr = Crypto.generateX509CSR(privateKey, dn, sanArray);\n        } catch (OperatorCreationException | IOException ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n\n        return new InstanceRefreshRequest().setCsr(csr).setExpiryTime(expiryTime);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#CharacterLiteral#SimpleName#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#CharacterLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ReturnStatement(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a Instance Refresh request that could be sent to ZTS to request a TLS certificate for a service.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.String.toLowerCase", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.String.concat", "java.lang.StringBuilder.append", "java.lang.String.replace", "org.bouncycastle.asn1.DERIA5String.<init>", "org.bouncycastle.asn1.x509.GeneralName.<init>", "com.yahoo.athenz.auth.util.Crypto.generateX509CSR", "java.lang.Exception.getMessage", "com.yahoo.athenz.zts.ZTSClientException.<init>", "com.yahoo.athenz.zts.InstanceRefreshRequest.<init>", "com.yahoo.athenz.zts.InstanceRefreshRequest.setCsr", "java.lang.Integer.valueOf", "com.yahoo.athenz.zts.InstanceRefreshRequest.setExpiryTime"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.String"], ["char"], ["char", "char"], ["java.lang.String"], ["int", "org.bouncycastle.asn1.ASN1Encodable"], ["java.security.PrivateKey", "java.lang.String", "org.bouncycastle.asn1.x509.GeneralName[]"], [""], ["int", "java.lang.Object"], [""], ["java.lang.String"], ["int"], ["java.lang.Integer"]], "passed_comments": "/"}, {"index": "242", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.generateInstanceRefreshRequest", "methodParameterType": "String#String#PrivateKey#String#int#", "methodParameterName": "principalDomain#principalService#privateKey#cloud#expiryTime#", "methodBody": "static public InstanceRefreshRequest generateInstanceRefreshRequest(String principalDomain,\n            String principalService, PrivateKey privateKey, String cloud, int expiryTime) {\n        \n        if (cloud == null) {\n            throw new IllegalArgumentException(\"Cloud Environment must be specified\");\n        }\n        \n        String csrDomain;\n        if (x509CsrDomain != null) {\n            csrDomain = cloud + \".\" + x509CsrDomain;\n        } else {\n            csrDomain = cloud;\n        }\n        \n        return generateInstanceRefreshRequest(principalDomain, principalService, privateKey,\n                x509CsrDn, csrDomain, expiryTime);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a Instance Refresh request that could be sent to ZTS to request a TLS certificate for a service.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "com.yahoo.athenz.zts.ZTSClient.generateInstanceRefreshRequest"], "call_func_parameter": [["java.lang.String"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.security.PrivateKey", "java.lang.String", "java.lang.String", "int"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.generateInstanceRefreshRequest": "Generate a Instance Refresh request that could be sent to ZTS to request a TLS certificate for a service."}]}, {"index": "243", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.prefetchRoleToken", "methodParameterType": "String#String#Integer#Integer#", "methodParameterName": "domainName#roleName#minExpiryTime#maxExpiryTime#", "methodBody": "boolean prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime) {\n        \n        return prefetchRoleToken(domainName, roleName, minExpiryTime, maxExpiryTime, null);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Pre-fetches role tokens so that the client does not take the hit of contacting ZTS Server for its first request (avg ~75ms). The client library will automatically try to keep the cache up to date such that the tokens are never expired and regular getRoleToken requests are fulfilled from the cache instead of contacting ZTS Server.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.prefetchRoleToken"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.prefetchRoleToken": "Pre-fetches role tokens so that the client does not take the hit of contacting ZTS Server for its first request (avg ~75ms). The client library will automatically try to keep the cache up to date such that the tokens are never expired and regular getRoleToken requests are fulfilled from the cache instead of contacting ZTS Server."}]}, {"index": "244", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.prefetchRoleToken", "methodParameterType": "String#String#Integer#Integer#String#", "methodParameterName": "domainName#roleName#minExpiryTime#maxExpiryTime#proxyForPrincipal#", "methodBody": "boolean prefetchRoleToken(String domainName, String roleName,\n            Integer minExpiryTime, Integer maxExpiryTime, String proxyForPrincipal) {\n        \n        if (domainName == null || domainName.trim().isEmpty()) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, \"Domain Name cannot be empty\");\n        }\n        \n        RoleToken token = getRoleToken(domainName, roleName, minExpiryTime, maxExpiryTime,\n                true, proxyForPrincipal);\n        if (token == null) {\n            LOG.error(\"PrefetchToken: No token fetchable using domain={}, roleSuffix={}\",\n                        domainName, roleName);\n            return false;\n        }\n        long expiryTimeUTC = token.getExpiryTime();\n        \n        return prefetchToken(domainName, roleName, null, minExpiryTime, maxExpiryTime,\n                proxyForPrincipal, null, null, expiryTimeUTC, TokenType.ROLE);\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(BooleanLiteral)BooleanLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Pre-fetches role tokens so that the client does not take the hit of contacting ZTS Server for its first request (avg ~75ms). The client library will automatically try to keep the cache up to date such that the tokens are never expired and regular getRoleToken requests are fulfilled from the cache instead of contacting ZTS Server.", "call_func_name": ["java.lang.String.trim", "java.lang.String.isEmpty", "com.yahoo.athenz.zts.ZTSClientException.<init>", "com.yahoo.athenz.zts.ZTSClient.getRoleToken", "org.slf4j.Logger.error", "com.yahoo.athenz.zts.RoleToken.getExpiryTime"], "call_func_parameter": [[""], [""], ["int", "java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "boolean", "java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getRoleToken": "For the specified requester(user/service) return the corresponding Role Token that includes the list of roles that the principal has access to in the specified domain"}]}, {"index": "245", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getRoleAccess", "methodParameterType": "String#String#", "methodParameterName": "domainName#principal#", "methodBody": "public RoleAccess getRoleAccess(String domainName, String principal) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getRoleAccess(domainName, principal);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getMessage());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of roles that the given principal has access to in the domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getRoleAccess", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getMessage", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "246", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getServiceIdentity", "methodParameterType": "String#String#", "methodParameterName": "domainName#serviceName#", "methodBody": "public ServiceIdentity getServiceIdentity(String domainName, String serviceName) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getServiceIdentity(domainName, serviceName);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified service object from a domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getServiceIdentity", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "247", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getPublicKeyEntry", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#serviceName#keyId#", "methodBody": "public PublicKeyEntry getPublicKeyEntry(String domainName, String serviceName, String keyId) {\n        try {\n            return ztsClient.getPublicKeyEntry(domainName, serviceName, keyId);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified public key from the given service object", "call_func_name": ["com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getPublicKeyEntry", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "248", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getServiceIdentityList", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public ServiceIdentityList getServiceIdentityList(String domainName) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getServiceIdentityList(domainName);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the full list of services defined in a domain", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getServiceIdentityList", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "249", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getTenantDomains", "methodParameterType": "String#String#String#String#", "methodParameterName": "providerDomainName#userName#roleName#serviceName#", "methodBody": "public TenantDomains getTenantDomains(String providerDomainName, String userName,\n            String roleName, String serviceName) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getTenantDomains(providerDomainName, userName, roleName, serviceName);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "For a given provider domain get a list of tenant domain names that the user is a member of", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getTenantDomains", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "250", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.postInstanceRefreshRequest", "methodParameterType": "String#String#InstanceRefreshRequest#", "methodParameterName": "domain#service#req#", "methodBody": "public Identity postInstanceRefreshRequest(String domain, String service, InstanceRefreshRequest req) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.postInstanceRefreshRequest(domain, service, req);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Request by a service to refresh its NToken. The original NToken must have been obtained by an authorized service by calling the postInstanceTenantRequest method.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.postInstanceRefreshRequest", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zts.InstanceRefreshRequest"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "251", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAWSLambdaServiceCertificate", "methodParameterType": "String#String#String#String#", "methodParameterName": "domainName#serviceName#account#provider#", "methodBody": "public AWSLambdaIdentity getAWSLambdaServiceCertificate(String domainName,\n            String serviceName, String account, String provider) {\n        \n        if (domainName == null || serviceName == null) {\n            throw new IllegalArgumentException(\"Domain and Service must be specified\");\n        }\n        \n        if (account == null || provider == null) {\n            throw new IllegalArgumentException(\"AWS Account and Provider must be specified\");\n        }\n        \n        if (x509CsrDomain == null) {\n            throw new IllegalArgumentException(\"X509 CSR Domain must be specified\");\n        }\n        \n        // first we're going to generate a private key for the request\n        \n        AWSLambdaIdentity lambdaIdentity = new AWSLambdaIdentity();\n        try {\n            lambdaIdentity.setPrivateKey(Crypto.generateRSAPrivateKey(2048));\n        } catch (CryptoException ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n\n        // we need to generate an csr with an instance register object\n        \n        InstanceRegisterInformation info = new InstanceRegisterInformation();\n        info.setDomain(domainName.toLowerCase());\n        info.setService(serviceName.toLowerCase());\n        info.setProvider(provider.toLowerCase());\n\n        final String athenzService = info.getDomain() + \".\" + info.getService();\n        \n        // generate our dn which will be based on our service name\n\n        StringBuilder dnBuilder = new StringBuilder(128);\n        dnBuilder.append(\"cn=\");\n        dnBuilder.append(athenzService);\n        if (x509CsrDn != null) {\n            dnBuilder.append(',');\n            dnBuilder.append(x509CsrDn);\n        }\n        \n        // now let's generate our dsnName field based on our principal's details\n\n        GeneralName[] sanArray = new GeneralName[2];\n        final String hostBuilder = info.getService() + '.' + info.getDomain().replace('.', '-') +\n                '.' + x509CsrDomain;\n        sanArray[0] = new GeneralName(GeneralName.dNSName, new DERIA5String(hostBuilder));\n\n        final String instanceHostBuilder = \"lambda-\" + account + '-' + info.getService() +\n                \".instanceid.athenz.\" + x509CsrDomain;\n        sanArray[1] = new GeneralName(GeneralName.dNSName, new DERIA5String(instanceHostBuilder));\n        \n        // next generate the csr based on our private key and data\n        \n        try {\n            info.setCsr(Crypto.generateX509CSR(lambdaIdentity.getPrivateKey(),\n                    dnBuilder.toString(), sanArray));\n        } catch (OperatorCreationException | IOException ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n        \n        // finally obtain attestation data for lambda\n        \n        info.setAttestationData(getAWSLambdaAttestationData(athenzService, account));\n        \n        // request the x.509 certificate from zts server\n        \n        Map<String, List<String>> responseHeaders = new HashMap<>();\n        InstanceIdentity identity = postInstanceRegisterInformation(info, responseHeaders);\n        \n        try {\n            lambdaIdentity.setX509Certificate(Crypto.loadX509Certificate(identity.getX509Certificate()));\n        } catch (CryptoException ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n\n        lambdaIdentity.setCaCertificates(identity.getX509CertificateSigner());\n        return lambdaIdentity;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#NumberLiteral#ArrayCreation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CharacterLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#CharacterLiteral#CharacterLiteral#MethodInvocation#CharacterLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#CharacterLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#ArrayAccess#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(ArrayCreation(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(NumberLiteral)NumberLiteral)ArrayCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(CharacterLiteral)CharacterLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(CharacterLiteral)CharacterLiteral)MethodInvocation(CharacterLiteral)CharacterLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(ArrayAccess(SimpleName)SimpleName(NumberLiteral)NumberLiteral)ArrayAccess(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ClassInstanceCreation)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For AWS Lambda functions generate a new private key, request a x.509 certificate based on the requested CSR and return both to the client in order to establish tls connections with other Athenz enabled services.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "com.yahoo.athenz.zts.AWSLambdaIdentity.<init>", "com.yahoo.athenz.auth.util.Crypto.generateRSAPrivateKey", "com.yahoo.athenz.zts.AWSLambdaIdentity.setPrivateKey", "com.yahoo.athenz.auth.util.CryptoException.getMessage", "com.yahoo.athenz.zts.ZTSClientException.<init>", "com.yahoo.athenz.zts.InstanceRegisterInformation.<init>", "java.lang.String.toLowerCase", "com.yahoo.athenz.zts.InstanceRegisterInformation.setDomain", "com.yahoo.athenz.zts.InstanceRegisterInformation.setService", "com.yahoo.athenz.zts.InstanceRegisterInformation.setProvider", "java.lang.StringBuilder.<init>", "com.yahoo.athenz.zts.InstanceRegisterInformation.getDomain", "java.lang.StringBuilder.append", "com.yahoo.athenz.zts.InstanceRegisterInformation.getService", "java.lang.StringBuilder.toString", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.String.replace", "org.bouncycastle.asn1.DERIA5String.<init>", "org.bouncycastle.asn1.x509.GeneralName.<init>", "com.yahoo.athenz.zts.AWSLambdaIdentity.getPrivateKey", "com.yahoo.athenz.auth.util.Crypto.generateX509CSR", "com.yahoo.athenz.zts.InstanceRegisterInformation.setCsr", "java.lang.Exception.getMessage", "com.yahoo.athenz.zts.ZTSClient.getAWSLambdaAttestationData", "com.yahoo.athenz.zts.InstanceRegisterInformation.setAttestationData", "java.util.HashMap.<init>", "com.yahoo.athenz.zts.ZTSClient.postInstanceRegisterInformation", "com.yahoo.athenz.zts.InstanceIdentity.getX509Certificate", "com.yahoo.athenz.auth.util.Crypto.loadX509Certificate", "com.yahoo.athenz.zts.AWSLambdaIdentity.setX509Certificate", "com.yahoo.athenz.zts.InstanceIdentity.getX509CertificateSigner", "com.yahoo.athenz.zts.AWSLambdaIdentity.setCaCertificates"], "call_func_parameter": [["java.lang.String"], [""], ["int"], ["java.security.PrivateKey"], [""], ["int", "java.lang.Object"], [""], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["int"], ["char"], ["char", "char"], ["java.lang.String"], ["int", "org.bouncycastle.asn1.ASN1Encodable"], [""], ["java.security.PrivateKey", "java.lang.String", "org.bouncycastle.asn1.x509.GeneralName[]"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], ["com.yahoo.athenz.zts.InstanceRegisterInformation", "java.util.Map"], [""], ["java.lang.String"], ["java.security.cert.X509Certificate"], [""], ["java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.util.Crypto.generateRSAPrivateKey": "Generate a RSA private with the given number of bits"}, {"com.yahoo.athenz.zts.AWSLambdaIdentity.setPrivateKey": "Set the private key for the labmda service identity"}, {"com.yahoo.athenz.zts.AWSLambdaIdentity.getPrivateKey": "Get the private key for the lambda service identity"}, {"com.yahoo.athenz.zts.ZTSClient.postInstanceRegisterInformation": "Request by an instance to register itself based on its provider attestation."}, {"com.yahoo.athenz.zts.AWSLambdaIdentity.setX509Certificate": "Set the x.509 certificate for the lambda service idenitty"}, {"com.yahoo.athenz.zts.AWSLambdaIdentity.setCaCertificates": "Set the Athenz CA certificates in pem format"}]}, {"index": "252", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAWSCredentialProvider", "methodParameterType": "String#String#", "methodParameterName": "domainName#roleName#", "methodBody": "public AWSCredentialsProvider getAWSCredentialProvider(String domainName, String roleName) {\n        return new AWSCredentialsProviderImpl(this, domainName, roleName);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "AWSCredential Provider provides AWS Credentials which the caller can use to authorize an AWS request. It automatically refreshes the credentials when the current credentials become invalid. It uses ZTS client to refresh the AWS Credentials. So the ZTS Client must not be closed while the credential provider is being used. The caller should close the client when the provider is no longer required. For a given domain and role return AWS temporary credential provider", "call_func_name": ["com.yahoo.athenz.zts.AWSCredentialsProviderImpl.<init>"], "call_func_parameter": [["com.yahoo.athenz.zts.ZTSClient", "java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "253", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAWSCredentialProvider", "methodParameterType": "String#String#String#Integer#Integer#", "methodParameterName": "domainName#roleName#externalId#minExpiryTime#maxExpiryTime#", "methodBody": "public AWSCredentialsProvider getAWSCredentialProvider(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime) {\n        return new AWSCredentialsProviderImpl(this, domainName, roleName, externalId,\n                minExpiryTime, maxExpiryTime);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#ThisExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(ThisExpression)ThisExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "AWSCredential Provider provides AWS Credentials which the caller can use to authorize an AWS request. It automatically refreshes the credentials when the current credentials become invalid. It uses ZTS client to refresh the AWS Credentials. So the ZTS Client must not be closed while the credential provider is being used. The caller should close the client when the provider is no longer required. For a given domain and role return AWS temporary credential provider", "call_func_name": ["com.yahoo.athenz.zts.AWSCredentialsProviderImpl.<init>"], "call_func_parameter": [["com.yahoo.athenz.zts.ZTSClient", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer"]], "passed_comments": "/"}, {"index": "254", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials", "methodParameterType": "String#String#", "methodParameterName": "domainName#roleName#", "methodBody": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName) {\n        return getAWSTemporaryCredentials(domainName, roleName, null, null, null, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For a given domain and role return AWS temporary credentials. If the token is present in the local cache and not expired, it will be returned.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials": "For a given domain and role return AWS temporary credentials. If ignoreCache argument is true then the request will be carried against Athenz ZTS Server and ignore any possibly valid credentials from the local cache."}]}, {"index": "255", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials", "methodParameterType": "String#String#boolean#", "methodParameterName": "domainName#roleName#ignoreCache#", "methodBody": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            boolean ignoreCache) {\n        return getAWSTemporaryCredentials(domainName, roleName, null, null, null, ignoreCache);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For a given domain and role return AWS temporary credentials. If ignoreCache argument is true then the request will be carried against Athenz ZTS Server and ignore any possibly valid credentials from the local cache.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials": "For a given domain and role return AWS temporary credentials. If ignoreCache argument is true then the request will be carried against Athenz ZTS Server and ignore any possibly valid credentials from the local cache."}]}, {"index": "256", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials", "methodParameterType": "String#String#String#Integer#Integer#", "methodParameterName": "domainName#roleName#externalId#minExpiryTime#maxExpiryTime#", "methodBody": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime) {\n        return getAWSTemporaryCredentials(domainName, roleName, externalId,\n                minExpiryTime, maxExpiryTime, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For a given domain and role return AWS temporary credentials. If the token is present in the local cache and not expired, it will be returned.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials": "For a given domain and role return AWS temporary credentials. If ignoreCache argument is true then the request will be carried against Athenz ZTS Server and ignore any possibly valid credentials from the local cache."}]}, {"index": "257", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAWSTemporaryCredentials", "methodParameterType": "String#String#String#Integer#Integer#boolean#", "methodParameterName": "domainName#roleName#externalId#minExpiryTime#maxExpiryTime#ignoreCache#", "methodBody": "public AWSTemporaryCredentials getAWSTemporaryCredentials(String domainName, String roleName,\n            String externalId, Integer minExpiryTime, Integer maxExpiryTime, boolean ignoreCache) {\n\n        // since our aws role name can contain the path element thus /'s\n        // we need to encode the value and use that instead\n        \n        try {\n            roleName = URLEncoder.encode(roleName, \"UTF-8\");\n        } catch (UnsupportedEncodingException ex) {\n            LOG.error(\"Unable to encode {} - error {}\", roleName, ex.getMessage());\n        }\n        \n        // first lookup in our cache to see if it can be satisfied\n        // only if we're not asked to ignore the cache\n        \n        AWSTemporaryCredentials awsCred;\n        String cacheKey = getRoleTokenCacheKey(domainName, roleName, null);\n        if (cacheKey != null && !ignoreCache) {\n            awsCred = lookupAwsCredInCache(cacheKey, minExpiryTime, maxExpiryTime);\n            if (awsCred != null) {\n                return awsCred;\n            }\n\n            // start prefetch for this token if prefetch is enabled\n            \n            if (enablePrefetch && prefetchAutoEnable) {\n                if (prefetchAwsCreds(domainName, roleName, externalId, minExpiryTime, maxExpiryTime)) {\n                    awsCred = lookupAwsCredInCache(cacheKey, minExpiryTime, maxExpiryTime);\n                }\n                if (awsCred != null) {\n                    return awsCred;\n                }\n                LOG.error(\"GetAWSTemporaryCredentials: cache prefetch and lookup error\");\n            }\n        }\n        \n        // if no hit then we need to request a new token from ZTS\n        \n        updateServicePrincipal();\n\n        try {\n            awsCred = ztsClient.getAWSTemporaryCredentials(domainName, roleName,\n                    maxExpiryTime, externalId);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n        \n        // need to add the token to our cache. If our principal was\n        // updated then we need to retrieve a new cache key\n        \n        if (awsCred != null) {\n            if (cacheKey == null) {\n                cacheKey = getRoleTokenCacheKey(domainName, roleName, null);\n            }\n            if (cacheKey != null) {\n                AWS_CREDS_CACHE.put(cacheKey, awsCred);\n            }\n        }\n        return awsCred;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For a given domain and role return AWS temporary credentials. If ignoreCache argument is true then the request will be carried against Athenz ZTS Server and ignore any possibly valid credentials from the local cache.", "call_func_name": ["java.net.URLEncoder.encode", "java.io.UnsupportedEncodingException.getMessage", "org.slf4j.Logger.error", "com.yahoo.athenz.zts.ZTSClient.getRoleTokenCacheKey", "com.yahoo.athenz.zts.ZTSClient.lookupAwsCredInCache", "com.yahoo.athenz.zts.ZTSClient.prefetchAwsCreds", "org.slf4j.Logger.error", "com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getAWSTemporaryCredentials", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage", "java.util.concurrent.ConcurrentHashMap.put"], "call_func_parameter": [["java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Integer", "java.lang.Integer"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.Integer"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "258", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getDomainSignedPolicyData", "methodParameterType": "String#String#Map<String,List<String>>#", "methodParameterName": "domainName#matchingTag#responseHeaders#", "methodBody": "public DomainSignedPolicyData getDomainSignedPolicyData(String domainName, String matchingTag,\n            Map<String, List<String>> responseHeaders) {\n        try {\n            return ztsClient.getDomainSignedPolicyData(domainName, matchingTag, responseHeaders);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of all policies (not just names) from the ZTS Server that is signed with both ZTS's and ZMS's private keys. It will pass an option matchingTag so that ZTS can skip returning signed policies if no changes have taken place since that tag was issued.", "call_func_name": ["com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getDomainSignedPolicyData", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.util.Map"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "259", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getAccess", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#roleName#principal#", "methodBody": "public Access getAccess(String domainName, String roleName, String principal) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getAccess(domainName, roleName, principal);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Verify if the given principal has access to the specified role in the domain or not.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getAccess", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "260", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getResourceAccess", "methodParameterType": "String#String#String#String#", "methodParameterName": "action#resource#trustDomain#principal#", "methodBody": "public ResourceAccess getResourceAccess(String action, String resource, String trustDomain, String principal) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getResourceAccess(action, resource, trustDomain, principal);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getMessage());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Requests the ZTS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getResourceAccess", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getMessage", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "261", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getResourceAccessExt", "methodParameterType": "String#String#String#String#", "methodParameterName": "action#resource#trustDomain#principal#", "methodBody": "public ResourceAccess getResourceAccessExt(String action, String resource, String trustDomain, String principal) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getResourceAccessExt(action, resource, trustDomain, principal);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getMessage());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Requests the ZTS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getResourceAccessExt", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getMessage", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "262", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.postDomainMetrics", "methodParameterType": "String#DomainMetrics#", "methodParameterName": "domainName#req#", "methodBody": "public void postDomainMetrics(String domainName, DomainMetrics req) {\n        updateServicePrincipal();\n        try {\n            ztsClient.postDomainMetrics(domainName, req);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Caller may post set of domain metric attributes for monitoring and logging. ZTSClientException will be thrown in case of failure", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.postDomainMetrics", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "com.yahoo.athenz.zts.DomainMetrics"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "263", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.postInstanceRegisterInformation", "methodParameterType": "InstanceRegisterInformation#Map<String,List<String>>#", "methodParameterName": "info#responseHeaders#", "methodBody": "public InstanceIdentity postInstanceRegisterInformation(InstanceRegisterInformation info,\n            Map<String, List<String>> responseHeaders) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.postInstanceRegisterInformation(info, responseHeaders);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Request by an instance to register itself based on its provider attestation.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.postInstanceRegisterInformation", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["com.yahoo.athenz.zts.InstanceRegisterInformation", "java.util.Map"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "264", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.postInstanceRefreshInformation", "methodParameterType": "String#String#String#String#InstanceRefreshInformation#", "methodParameterName": "provider#domain#service#instanceId#info#", "methodBody": "public InstanceIdentity postInstanceRefreshInformation(String provider, String domain,\n            String service, String instanceId, InstanceRefreshInformation info) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.postInstanceRefreshInformation(provider, domain, service, instanceId, info);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Request by an instance to refresh its certificate. The instance must authenticate itself using the certificate it has received from the postInstanceRegisterInformation call.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.postInstanceRefreshInformation", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zts.InstanceRefreshInformation"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "265", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.deleteInstanceIdentity", "methodParameterType": "String#String#String#String#", "methodParameterName": "provider#domain#service#instanceId#", "methodBody": "public void deleteInstanceIdentity(String provider, String domain,\n            String service, String instanceId) {\n        updateServicePrincipal();\n        try {\n            ztsClient.deleteInstanceIdentity(provider, domain, service, instanceId);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Revoke an instance from refreshing its certificates.", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.deleteInstanceIdentity", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "266", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.getCertificateAuthorityBundle", "methodParameterType": "String#", "methodParameterName": "bundleName#", "methodBody": "public CertificateAuthorityBundle getCertificateAuthorityBundle(String bundleName) {\n        updateServicePrincipal();\n        try {\n            return ztsClient.getCertificateAuthorityBundle(bundleName);\n        } catch (ResourceException ex) {\n            throw new ZTSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZTSClientException(ZTSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve list of CA Certificates in PEM format for the given bundle name", "call_func_name": ["com.yahoo.athenz.zts.ZTSClient.updateServicePrincipal", "com.yahoo.athenz.zts.ZTSRDLGeneratedClient.getCertificateAuthorityBundle", "com.yahoo.athenz.zts.ResourceException.getCode", "com.yahoo.athenz.zts.ResourceException.getData", "com.yahoo.athenz.zts.ZTSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "267", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.multipleRoleKey", "methodParameterType": "List<String>#", "methodParameterName": "roles#", "methodBody": "static String multipleRoleKey(List<String> roles) {\n        \n        // first check to make sure we have valid data\n        \n        if (roles == null || roles.isEmpty()) {\n            return null;\n        }\n        \n        // if we have a single role then that's the key\n        \n        if (roles.size() == 1) {\n            return roles.get(0);\n        }\n        \n        // if we have multiple roles, then we have to\n        // sort the values and then generate the key\n        // since we might have been given unmodifiable\n        // list we need to make a copy so we can sort it\n\n        List<String> modList = new ArrayList<>(roles);\n        Collections.sort(modList);\n        return String.join(\",\", modList);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#MethodInvocation#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "returns a cache key for the given list of roles. if the list of roles contains multiple entries then we have to sort the array first and then generate the key based on the sorted list since there is no guarantee what order the ZTS Server might return the list of roles", "call_func_name": ["java.util.List.isEmpty", "java.util.List.size", "java.util.List.get", "java.util.ArrayList.<init>", "java.util.Collections.sort", "java.lang.String.join"], "call_func_parameter": [[""], [""], ["int"], ["java.util.Collection"], ["java.util.List"], ["java.lang.CharSequence", "java.lang.Iterable"]], "passed_comments": "/"}, {"index": "268", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClient.java", "methodName": "com.yahoo.athenz.zts.ZTSClient.cacheSvcProvRoleToken", "methodParameterType": "ZTSClientService.RoleTokenDescriptor#", "methodParameterName": "desc#", "methodBody": "static String cacheSvcProvRoleToken(ZTSClientService.RoleTokenDescriptor desc) {\n\n        if (cacheDisabled) {\n            return null;\n        }\n        \n        com.yahoo.athenz.auth.token.RoleToken rt = new com.yahoo.athenz.auth.token.RoleToken(desc.getSignedToken());\n        String domainName = rt.getDomain();\n        String principalName = rt.getPrincipal();\n        boolean completeRoleSet = rt.getDomainCompleteRoleSet();\n\n        // if the role token was for a complete set then we're not going\n        // to use the rolename field (it indicates that the original request\n        // was completed without the rolename field being specified)\n        \n        final String roleName = (completeRoleSet) ? null : multipleRoleKey(rt.getRoles());\n        \n        // parse principalName for the tenant domain and service name\n        // we must have valid components otherwise we'll just\n        // ignore the token - you can't have a principal without\n        // valid domain and service names\n        \n        int index = principalName.lastIndexOf('.'); // ex: cities.burbank.mysvc\n        if (index == -1) {\n            LOG.error(\"cacheSvcProvRoleToken: Invalid principal in token: {}\", rt.getSignedToken());\n            return null;\n        }\n\n        final String tenantDomain = principalName.substring(0, index);\n        final String tenantService = principalName.substring(index + 1);\n        Long expiryTime = rt.getExpiryTime();\n\n        RoleToken roleToken = new RoleToken().setToken(desc.getSignedToken()).setExpiryTime(expiryTime);\n\n        final String key = getRoleTokenCacheKey(tenantDomain, tenantService, domainName, roleName, null);\n\n        if (LOG.isInfoEnabled()) {\n            LOG.info(\"cacheSvcProvRoleToken: cache-add key: {} expiry: {}\", key, expiryTime);\n        }\n\n        ROLE_TOKEN_CACHE.put(key, roleToken);\n\n        // setup prefetch task\n        \n        prefetchSvcProvTokens(tenantDomain, tenantService, domainName,\n            key, roleName, null, null, expiryTime, null);\n\n        return key;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ParenthesizedExpression#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(SimpleName)SimpleName)ParenthesizedExpression(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "stuff pre-loaded service token in cache. in this model an external service (proxy user) has retrieved the role tokens and added to the client cache so it can run without the need to contact zts server. in this model we're going to look at the principal field only and ignore the proxy field since the client doesn't need to know anything about that detail. start prefetch task to reload to prevent expiry return the cache key used", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "269", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClientTokenCacher.java", "methodName": "com.yahoo.athenz.zts.ZTSClientTokenCacher.setRoleToken", "methodParameterType": "String#String#String#", "methodParameterName": "signedRoleToken#roleName#trustDomain#", "methodBody": "public static void setRoleToken(String signedRoleToken, String roleName, String trustDomain) {\n        setRoleToken(signedRoleToken, roleName);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@deprecated use setRoleToken without the trustDomain argument instead", "call_func_name": ["com.yahoo.athenz.zts.ZTSClientTokenCacher.setRoleToken"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zts.ZTSClientTokenCacher.setRoleToken": "Add the given signed role token to the zts client static cache."}]}, {"index": "270", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/ZTSClientTokenCacher.java", "methodName": "com.yahoo.athenz.zts.ZTSClientTokenCacher.setRoleToken", "methodParameterType": "String#String#", "methodParameterName": "signedRoleToken#roleName#", "methodBody": "public static void setRoleToken(String signedRoleToken, String roleName) {\n        \n        // parse domain, roles, principalName, and expiry out of the token\n        \n        com.yahoo.athenz.auth.token.RoleToken rt = new com.yahoo.athenz.auth.token.RoleToken(signedRoleToken);\n\n        String domainName    = rt.getDomain();\n        String principalName = rt.getPrincipal();\n        \n        // parse principalName for the tenant domain and service name\n        // if we have an invalid principal name then we'll just skip\n        \n        int index = principalName.lastIndexOf('.'); // ex: cities.burbank.mysvc\n        if (index == -1) {\n            return;\n        }\n\n        String tenantDomain = principalName.substring(0, index);\n        String tenantService  = principalName.substring(index + 1);\n        Long expiryTime  = rt.getExpiryTime();\n\n        RoleToken roleToken = new RoleToken().setToken(signedRoleToken).setExpiryTime(expiryTime);\n\n        String key = ZTSClient.getRoleTokenCacheKey(tenantDomain, tenantService,\n                domainName, roleName, null);\n        \n        if (LOG.isInfoEnabled()) {\n            LOG.info(\"ZTSTokenCache: cache-add key: {} expiry: {}\", key, expiryTime);\n        }\n        \n        ZTSClient.ROLE_TOKEN_CACHE.put(key, roleToken);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#CharacterLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#NumberLiteral#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(QualifiedName(QualifiedName(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add the given signed role token to the zts client static cache.", "call_func_name": ["com.yahoo.athenz.auth.token.RoleToken.<init>", "com.yahoo.athenz.auth.token.RoleToken.getDomain", "com.yahoo.athenz.auth.token.RoleToken.getPrincipal", "java.lang.String.lastIndexOf", "java.lang.String.substring", "java.lang.String.substring", "com.yahoo.athenz.auth.token.RoleToken.getExpiryTime", "java.lang.Long.valueOf", "com.yahoo.athenz.zts.RoleToken.<init>", "com.yahoo.athenz.zts.RoleToken.setToken", "java.lang.Long.longValue", "com.yahoo.athenz.zts.RoleToken.setExpiryTime", "com.yahoo.athenz.zts.ZTSClient.getRoleTokenCacheKey", "org.slf4j.Logger.isInfoEnabled", "org.slf4j.Logger.info", "java.util.concurrent.ConcurrentHashMap.put"], "call_func_parameter": [["java.lang.String"], [""], [""], ["int"], ["int", "int"], ["int"], [""], ["long"], [""], ["java.lang.String"], [""], ["long"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "271", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSLambdaIdentity.java", "methodName": "com.yahoo.athenz.zts.AWSLambdaIdentity.getPrivateKey", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PrivateKey getPrivateKey() {\n        return privateKey;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the private key for the lambda service identity", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "272", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSLambdaIdentity.java", "methodName": "com.yahoo.athenz.zts.AWSLambdaIdentity.setPrivateKey", "methodParameterType": "PrivateKey#", "methodParameterName": "privateKey#", "methodBody": "public void setPrivateKey(PrivateKey privateKey) {\n        this.privateKey = privateKey;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the private key for the labmda service identity", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "273", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSLambdaIdentity.java", "methodName": "com.yahoo.athenz.zts.AWSLambdaIdentity.getX509Certificate", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public X509Certificate getX509Certificate() {\n        return x509Certificate;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the x.509 certificate for the lambda service identity", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "274", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSLambdaIdentity.java", "methodName": "com.yahoo.athenz.zts.AWSLambdaIdentity.setX509Certificate", "methodParameterType": "X509Certificate#", "methodParameterName": "x509Certificate#", "methodBody": "public void setX509Certificate(X509Certificate x509Certificate) {\n        this.x509Certificate = x509Certificate;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the x.509 certificate for the lambda service idenitty", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "275", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSLambdaIdentity.java", "methodName": "com.yahoo.athenz.zts.AWSLambdaIdentity.getCACertificates", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getCACertificates() {\n        return caCertificates;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get the Athenz CA certificates in pem format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "276", "file": "/root/repos/repos24/athenz/clients/java/zts/core/src/main/java/com/yahoo/athenz/zts/AWSLambdaIdentity.java", "methodName": "com.yahoo.athenz.zts.AWSLambdaIdentity.setCaCertificates", "methodParameterType": "String#", "methodParameterName": "caCertificates#", "methodBody": "public void setCaCertificates(String caCertificates) {\n        this.caCertificates = caCertificates;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the Athenz CA certificates in pem format", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "277", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.ZMSClient", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZMSClient() {\n        initClient(null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZMSClient object with default settings. The url for ZMS Server is automatically retrieved from the athenz configuration file (zmsUrl field). The client can only be used to retrieve objects from ZMS that do not require any authentication otherwise addCredentials method must be used to set the principal identity. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zms.client.read_timeout and athenz.zms.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "278", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.ZMSClient", "methodParameterType": "String#", "methodParameterName": "url#", "methodBody": "public ZMSClient(String url) {\n        initClient(url, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZMSClient object with the given ZMS Server url. The client can only be used to retrieve objects from ZMS that do not require any authentication otherwise addCredentials method must be used to set the principal identity. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zms.client.read_timeout and athenz.zms.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "279", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.ZMSClient", "methodParameterType": "String#Principal#", "methodParameterName": "url#identity#", "methodBody": "public ZMSClient(String url, Principal identity) {\n        initClient(url, null);\n        addCredentials(identity);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZMSClient object with the given ZMS Server url and given principal. The credentials from the principal object will be used to set call the addCredentials method for the zms client object. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zms.client.read_timeout and athenz.zms.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "280", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.ZMSClient", "methodParameterType": "Principal#", "methodParameterName": "identity#", "methodBody": "public ZMSClient(Principal identity) {\n        initClient(null, null);\n        addCredentials(identity);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZMSClient object with default settings and given principal object for credentials. The url for ZMS Server is automatically retrieved from the athenz configuration file (zmsUrl field). Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zms.client.read_timeout and athenz.zms.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "281", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.ZMSClient", "methodParameterType": "String#SSLContext#", "methodParameterName": "url#sslContext#", "methodBody": "public ZMSClient(String url, SSLContext sslContext) {\n\n        // verify we have a valid ssl context specified\n\n        if (sslContext == null) {\n            throw new IllegalArgumentException(\"SSLContext object must be specified\");\n        }\n        initClient(url, sslContext);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZMSClient object with the given SSLContext object and ZMS Server Url. Default read and connect timeout values are 30000ms (30sec). The application can change these values by using the athenz.zms.client.read_timeout and athenz.zms.client.connect_timeout system properties. The values specified for timeouts must be in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "282", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void close() {\n        client.close();\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Close the ZMSClient object and release any allocated resources.", "call_func_name": ["com.yahoo.athenz.zms.ZMSRDLGeneratedClient.close"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "283", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.setProperty", "methodParameterType": "String#Object#", "methodParameterName": "name#value#", "methodBody": "public void setProperty(String name, Object value) {\n        if (client != null) {\n            client.setProperty(name, value);\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set new ZMS Client configuration property. This method calls internal javax.ws.rs.client.Client client's property method. If already set, the existing value of the property will be updated. Setting a null value into a property effectively removes the property from the property bag.", "call_func_name": ["com.yahoo.athenz.zms.ZMSRDLGeneratedClient.setProperty"], "call_func_parameter": [["java.lang.String", "java.lang.Object"]], "passed_comments": "/"}, {"index": "284", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.addCredentials", "methodParameterType": "String#String#", "methodParameterName": "credHeader#credToken#", "methodBody": "public void addCredentials(String credHeader, String credToken) {\n        client.addCredentials(credHeader, credToken);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the client credentials using the specified header and token.", "call_func_name": ["com.yahoo.athenz.zms.ZMSRDLGeneratedClient.addCredentials"], "call_func_parameter": [["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "285", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.addCredentials", "methodParameterType": "Principal#", "methodParameterName": "identity#", "methodBody": "public ZMSClient addCredentials(Principal identity) {\n\n        // make sure the principal has proper authority assigned\n\n        if (identity == null || identity.getAuthority() == null) {\n            throw new IllegalArgumentException(\"Principal must be valid object with authority field\");\n        }\n\n        // if we already have a principal set, we're going to\n        // clear our credentials first\n\n        if (principal != null) {\n            client.addCredentials(principal.getAuthority().getHeader(), null);\n        }\n\n        // now we're going to update our principal and set credentials\n\n        principal = identity;\n        principalCheckDone = false;\n\n        // we've already verified that our authority in the passed\n        // identity object is valid\n        final Authority authority = principal.getAuthority();\n        client.addCredentials(authority.getHeader(), principal.getCredentials());\n\n        // final check if the authority does not support authorization\n        // by the zms server then it's most likely a user authority and\n        // we need to get a principal token\n\n        principalCheckDone = authority.allowAuthorization();\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Sets or overrides the current principal identity set in the client.", "call_func_name": ["com.yahoo.athenz.auth.Principal.getAuthority", "java.lang.IllegalArgumentException.<init>", "com.yahoo.athenz.auth.Authority.getHeader", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.addCredentials", "com.yahoo.athenz.auth.Principal.getCredentials", "com.yahoo.athenz.auth.Authority.allowAuthorization"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""], [""]], "passed_comments": [{"com.yahoo.athenz.auth.Principal.getAuthority": "@return the authority over this principal. Can be null, if not authenticated."}, {"com.yahoo.athenz.auth.Authority.getHeader": "@return a string describing where to find the credentials in a request, i.e. \"X-Auth-Token\" or \"Cookie.User\""}, {"com.yahoo.athenz.auth.Principal.getCredentials": "@return the credentials token as a string"}, {"com.yahoo.athenz.auth.Authority.allowAuthorization": "@return a boolean flag indicating whether or not authenticated principalsby this authority are allowed to be \"authorized\" to make changes. If this flag is false, then the principal must first get a ZMS UserToken and then use that UserToken for subsequent operations."}]}, {"index": "286", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.clearCredentials", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ZMSClient clearCredentials() {\n        if (principal != null) {\n            client.addCredentials(principal.getAuthority().getHeader(), null);\n            principal = null;\n            principalCheckDone = true;\n        }\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Clear the principal identity set for the client. Unless a new principal is set using the addCredentials method, the client can only be used to requests data from the ZMS Server that doesn't require any authentication.", "call_func_name": ["com.yahoo.athenz.auth.Principal.getAuthority", "com.yahoo.athenz.auth.Authority.getHeader", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.addCredentials"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.Principal.getAuthority": "@return the authority over this principal. Can be null, if not authenticated."}, {"com.yahoo.athenz.auth.Authority.getHeader": "@return a string describing where to find the credentials in a request, i.e. \"X-Auth-Token\" or \"Cookie.User\""}]}, {"index": "287", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void updatePrincipal() {\n\n        /* if the check has already been done then we have nothing to do */\n\n        if (principalCheckDone) {\n            return;\n        }\n\n        /* make sure we have a principal specified */\n\n        if (principal == null) {\n            principalCheckDone = true;\n            return;\n        }\n\n        /* so at this point we have some credentials specified\n         * but it's not the principal authority so we're going\n         * to ask ZMS to return a UserToken for us.\n         */\n\n        String userName = principal.getName();\n        UserToken userToken = getUserToken(userName, null, true);\n\n        clearCredentials();\n        client.addCredentials(userToken.getHeader(), userToken.getToken());\n        principalCheckDone = true;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NullLiteral#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(SimpleName)SimpleName(Block(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication.", "call_func_name": ["com.yahoo.athenz.auth.Principal.getName", "java.lang.Boolean.valueOf", "com.yahoo.athenz.zms.ZMSClient.getUserToken", "com.yahoo.athenz.zms.ZMSClient.clearCredentials", "com.yahoo.athenz.zms.UserToken.getHeader", "com.yahoo.athenz.zms.UserToken.getToken", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.addCredentials"], "call_func_parameter": [[""], ["boolean"], ["java.lang.String", "java.lang.String", "java.lang.Boolean"], [""], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.Principal.getName": "@return the name of the principal as a string, i.e. \"joe\""}, {"com.yahoo.athenz.zms.ZMSClient.getUserToken": "For the specified user credentials return the corresponding User Token that can be used for authenticating other ZMS operations by any of the specified authorized services."}, {"com.yahoo.athenz.zms.ZMSClient.clearCredentials": "Clear the principal identity set for the client. Unless a new principal is set using the addCredentials method, the client can only be used to requests data from the ZMS Server that doesn't require any authentication."}]}, {"index": "288", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.initClient", "methodParameterType": "String#SSLContext#", "methodParameterName": "url#sslContext#", "methodBody": "private void initClient(String url, SSLContext sslContext) {\n\n        /* if we have no url specified then we're going to retrieve\n         * the value from our configuration package */\n\n        if (url == null) {\n            zmsUrl = lookupZMSUrl();\n        } else {\n            zmsUrl = url;\n        }\n\n        /* verify if the url is ending with /zms/v1 and if it's\n         * not we'll automatically append it */\n\n        if (zmsUrl != null && !zmsUrl.isEmpty()) {\n            if (!zmsUrl.endsWith(\"/zms/v1\")) {\n                if (zmsUrl.charAt(zmsUrl.length() - 1) != '/') {\n                    zmsUrl += '/';\n                }\n                zmsUrl += \"zms/v1\";\n            }\n        }\n\n        /* determine our read and connect timeouts */\n\n        int readTimeout = Integer.parseInt(System.getProperty(ZMS_CLIENT_PROP_READ_TIMEOUT, \"30000\"));\n        int connectTimeout = Integer.parseInt(System.getProperty(ZMS_CLIENT_PROP_CONNECT_TIMEOUT, \"30000\"));\n\n        /* if we are not given a url then use the default value */\n\n        if (sslContext == null) {\n            sslContext = createSSLContext();\n        }\n\n        ClientBuilder builder = ClientBuilder.newBuilder();\n        if (sslContext != null) {\n            builder = builder.sslContext(sslContext);\n        }\n\n        final JacksonJsonProvider jacksonJsonProvider = new JacksonJaxbJsonProvider().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n        ClientConfig clientConfig = new ClientConfig(jacksonJsonProvider);\n\n        Client rsClient = builder.property(ClientProperties.CONNECT_TIMEOUT, connectTimeout)\n                .property(ClientProperties.READ_TIMEOUT, readTimeout)\n                .withConfig(clientConfig)\n                .build();\n        client = new ZMSRDLGeneratedClient(zmsUrl, rsClient);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#MethodInvocation#CharacterLiteral#InfixExpression#SimpleName#CharacterLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#QualifiedName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)PrefixExpression(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)MethodInvocation(CharacterLiteral)CharacterLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CharacterLiteral)CharacterLiteral)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Initialize the client for class constructors", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.lookupZMSUrl", "java.lang.String.isEmpty", "java.lang.String.endsWith", "java.lang.String.length", "java.lang.String.charAt", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.System.getProperty", "java.lang.Integer.parseInt", "com.yahoo.athenz.zms.ZMSClient.createSSLContext", "javax.ws.rs.client.ClientBuilder.newBuilder", "javax.ws.rs.client.ClientBuilder.sslContext", "com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider.<init>", "com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider.configure", "org.glassfish.jersey.client.ClientConfig.<init>", "java.lang.Integer.valueOf", "javax.ws.rs.client.ClientBuilder.property", "javax.ws.rs.client.ClientBuilder.withConfig", "javax.ws.rs.client.ClientBuilder.build", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.<init>"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""], ["int"], [""], ["java.lang.String"], ["char"], [""], ["java.lang.String", "java.lang.String"], ["java.lang.String"], [""], [""], ["javax.net.ssl.SSLContext"], [""], ["com.fasterxml.jackson.databind.DeserializationFeature", "boolean"], ["java.lang.Object[]"], ["int"], ["java.lang.String", "java.lang.Object"], ["javax.ws.rs.core.Configuration"], [""], ["java.lang.String", "javax.ws.rs.client.Client"]], "passed_comments": "/"}, {"index": "289", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.generateRoleName", "methodParameterType": "String#String#", "methodParameterName": "domain#role#", "methodBody": "public String generateRoleName(String domain, String role) {\n        return domain + \":role.\" + role;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a role name as expected by ZMS Server can be used to set the role object's name field (e.g. role.setName(name))", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "290", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.generatePolicyName", "methodParameterType": "String#String#", "methodParameterName": "domain#policy#", "methodBody": "public String generatePolicyName(String domain, String policy) {\n        return domain + \":policy.\" + policy;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a policy name as expected by ZMS Server can be used to set the policy object's name field (e.g. policy.setName(name))", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "291", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.generateServiceIdentityName", "methodParameterType": "String#String#", "methodParameterName": "domain#service#", "methodBody": "public String generateServiceIdentityName(String domain, String service) {\n        return domain + \".\" + service;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate a service name as expected by ZMS Server can be used to set the service identity object's name field (e.g. serviceIdentity.setName(name))", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "292", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getDomain", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public Domain getDomain(String domain) {\n        updatePrincipal();\n        try {\n            return client.getDomain(domain);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified domain object", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getDomain", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "293", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getDomainList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public DomainList getDomainList() {\n        return getDomainList(null, null, null, null, null, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#NullLiteral#NullLiteral#NullLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of domains provisioned on the ZMS Server", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getDomainList"], "call_func_parameter": [["java.lang.Integer", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.String", "java.lang.Integer", "java.util.Date"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getDomainList": "Retrieve the list of domains provisioned on the ZMS Server filters based on the specified arguments"}]}, {"index": "294", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getDomainList", "methodParameterType": "Integer#String#String#Integer#String#Integer#Date#", "methodParameterName": "limit#skip#prefix#depth#account#productId#modifiedSince#", "methodBody": "public DomainList getDomainList(Integer limit, String skip, String prefix, Integer depth,\n                                    String account, Integer productId, Date modifiedSince) {\n        updatePrincipal();\n        String modSinceStr = null;\n        if (modifiedSince != null) {\n            DateFormat df = new SimpleDateFormat(HTTP_RFC1123_DATE_FORMAT);\n            modSinceStr = df.format(modifiedSince);\n        }\n        try {\n            return client.getDomainList(limit, skip, prefix, depth, account, productId, null, null, modSinceStr);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of domains provisioned on the ZMS Server filters based on the specified arguments", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "java.text.SimpleDateFormat.<init>", "java.text.DateFormat.format", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getDomainList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], ["java.util.Date"], ["java.lang.Integer", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.String", "java.lang.Integer", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "295", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getDomainList", "methodParameterType": "String#String#", "methodParameterName": "roleMember#roleName#", "methodBody": "public DomainList getDomainList(String roleMember, String roleName) {\n        updatePrincipal();\n        try {\n            return client.getDomainList(null, null, null, null, null, null, roleMember, roleName, null);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#NullLiteral#NullLiteral#NullLiteral#NullLiteral#NullLiteral#NullLiteral#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of domains provisioned on the ZMS Server filters based on the specified arguments", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getDomainList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.Integer", "java.lang.String", "java.lang.String", "java.lang.Integer", "java.lang.String", "java.lang.Integer", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "296", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.postTopLevelDomain", "methodParameterType": "String#TopLevelDomain#", "methodParameterName": "auditRef#detail#", "methodBody": "public Domain postTopLevelDomain(String auditRef, TopLevelDomain detail) {\n        updatePrincipal();\n        try {\n            return client.postTopLevelDomain(auditRef, detail);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create/Update Top level domain. If updating a domain the provided object must contain all attributes as it will replace the full domain object configured on the server (not just some of the attributes).", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.postTopLevelDomain", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "com.yahoo.athenz.zms.TopLevelDomain"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "297", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.postSubDomain", "methodParameterType": "String#String#SubDomain#", "methodParameterName": "parent#auditRef#detail#", "methodBody": "public Domain postSubDomain(String parent, String auditRef, SubDomain detail) {\n        updatePrincipal();\n        try {\n            return client.postSubDomain(parent, auditRef, detail);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create/Update a sub-domain in the specified domain. If updating a subdomain the provided object must contain all attributes as it will replace the full domain object configured on the server (not just some of the attributes).", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.postSubDomain", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.SubDomain"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "298", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.postUserDomain", "methodParameterType": "String#String#UserDomain#", "methodParameterName": "name#auditRef#detail#", "methodBody": "public Domain postUserDomain(String name, String auditRef, UserDomain detail) {\n        updatePrincipal();\n        try {\n            return client.postUserDomain(name, auditRef, detail);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create a top-level user-domain - this is user.&lt;userid&gt; domain.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.postUserDomain", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.UserDomain"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "299", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteTopLevelDomain", "methodParameterType": "String#String#", "methodParameterName": "name#auditRef#", "methodBody": "public void deleteTopLevelDomain(String name, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteTopLevelDomain(name, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete a top level domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteTopLevelDomain", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "300", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteSubDomain", "methodParameterType": "String#String#String#", "methodParameterName": "parent#name#auditRef#", "methodBody": "public void deleteSubDomain(String parent, String name, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteSubDomain(parent, name, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete a sub-domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteSubDomain", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "301", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteUserDomain", "methodParameterType": "String#String#", "methodParameterName": "name#auditRef#", "methodBody": "public void deleteUserDomain(String name, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteUserDomain(name, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete a top-level user-domain (user.&lt;userid&gt;)", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteUserDomain", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "302", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putDomainMeta", "methodParameterType": "String#String#DomainMeta#", "methodParameterName": "name#auditRef#detail#", "methodBody": "public void putDomainMeta(String name, String auditRef, DomainMeta detail) {\n        updatePrincipal();\n        try {\n            client.putDomainMeta(name, auditRef, detail);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Set the domain meta parameters", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putDomainMeta", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.DomainMeta"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "303", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putDomainSystemMeta", "methodParameterType": "String#String#String#DomainMeta#", "methodParameterName": "name#attribute#auditRef#detail#", "methodBody": "public void putDomainSystemMeta(String name, String attribute, String auditRef, DomainMeta detail) {\n        updatePrincipal();\n        try {\n            client.putDomainSystemMeta(name, attribute, auditRef, detail);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Set the domain system meta parameters", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putDomainSystemMeta", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.DomainMeta"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "304", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getRoleList", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public RoleList getRoleList(String domainName) {\n        updatePrincipal();\n        try {\n            return client.getRoleList(domainName, null, null);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of roles defined for the specified domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getRoleList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Integer", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "305", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getRoleList", "methodParameterType": "String#Integer#String#", "methodParameterName": "domainName#limit#skip#", "methodBody": "public RoleList getRoleList(String domainName, Integer limit, String skip) {\n        updatePrincipal();\n        try {\n            return client.getRoleList(domainName, limit, skip);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of roles defined for the specified domain filtered based on the parameters specified", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getRoleList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Integer", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "306", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getRoles", "methodParameterType": "String#Boolean#", "methodParameterName": "domainName#members#", "methodBody": "public Roles getRoles(String domainName, Boolean members) {\n        updatePrincipal();\n        try {\n            return client.getRoles(domainName, members);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of roles defined for the specified domain. The roles will contain their attributes and, if specified, the list of members.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getRoles", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Boolean"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "307", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getRole", "methodParameterType": "String#String#", "methodParameterName": "domainName#roleName#", "methodBody": "public Role getRole(String domainName, String roleName) {\n        return getRole(domainName, roleName, false, false, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified role", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getRole"], "call_func_parameter": [["java.lang.String", "java.lang.String", "boolean", "boolean", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getRole": "Retrieve the specified role"}]}, {"index": "308", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getRole", "methodParameterType": "String#String#boolean#", "methodParameterName": "domainName#roleName#auditLog#", "methodBody": "public Role getRole(String domainName, String roleName, boolean auditLog) {\n        return getRole(domainName, roleName, auditLog, false, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified role", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getRole"], "call_func_parameter": [["java.lang.String", "java.lang.String", "boolean", "boolean", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getRole": "Retrieve the specified role"}]}, {"index": "309", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getRole", "methodParameterType": "String#String#boolean#boolean#", "methodParameterName": "domainName#roleName#auditLog#expand#", "methodBody": "public Role getRole(String domainName, String roleName, boolean auditLog, boolean expand) {\n        return getRole(domainName, roleName, auditLog, expand, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified role", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getRole"], "call_func_parameter": [["java.lang.String", "java.lang.String", "boolean", "boolean", "boolean"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getRole": "Retrieve the specified role"}]}, {"index": "310", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getRole", "methodParameterType": "String#String#boolean#boolean#boolean#", "methodParameterName": "domainName#roleName#auditLog#expand#pending#", "methodBody": "public Role getRole(String domainName, String roleName, boolean auditLog, boolean expand, boolean pending) {\n        updatePrincipal();\n        try {\n            return client.getRole(domainName, roleName, auditLog, expand, pending);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified role", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "java.lang.Boolean.valueOf", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getRole", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["boolean"], ["java.lang.String", "java.lang.String", "java.lang.Boolean", "java.lang.Boolean", "java.lang.Boolean"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "311", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putRole", "methodParameterType": "String#String#String#Role#", "methodParameterName": "domainName#roleName#auditRef#role#", "methodBody": "public void putRole(String domainName, String roleName, String auditRef, Role role) {\n        updatePrincipal();\n        try {\n            client.putRole(domainName, roleName, auditRef, role);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create/Update a new role in the specified domain. If updating a role the provided object must contain all attributes as it will replace the full role object configured on the server (not just some of the attributes).", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putRole", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Role"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "312", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteRole", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#roleName#auditRef#", "methodBody": "public void deleteRole(String domainName, String roleName, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteRole(domainName, roleName, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified role from domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteRole", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "313", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getMembership", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#roleName#memberName#", "methodBody": "public Membership getMembership(String domainName, String roleName, String memberName) {\n        return getMembership(domainName, roleName, memberName, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get membership details for the specified member in the given role in a specified domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getMembership"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getMembership": "Get membership details for the specified member in the given role in a specified domain with an optional expiration"}]}, {"index": "314", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getMembership", "methodParameterType": "String#String#String#String#", "methodParameterName": "domainName#roleName#memberName#expiration#", "methodBody": "public Membership getMembership(String domainName, String roleName, String memberName, String expiration) {\n        updatePrincipal();\n        try {\n            return client.getMembership(domainName, roleName, memberName, expiration);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get membership details for the specified member in the given role in a specified domain with an optional expiration", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getMembership", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "315", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putMembership", "methodParameterType": "String#String#String#String#", "methodParameterName": "domainName#roleName#memberName#auditRef#", "methodBody": "public void putMembership(String domainName, String roleName, String memberName, String auditRef) {\n        putMembership(domainName, roleName, memberName, null, auditRef);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Add a new member in the specified role.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.putMembership"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.rdl.Timestamp", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.putMembership": "Add a temporary member in the specified role with expiration"}]}, {"index": "316", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putMembership", "methodParameterType": "String#String#String#Timestamp#String#", "methodParameterName": "domainName#roleName#memberName#expiration#auditRef#", "methodBody": "public void putMembership(String domainName, String roleName, String memberName,\n                              Timestamp expiration, String auditRef) {\n        Membership mbr = new Membership().setRoleName(roleName)\n                .setMemberName(memberName).setExpiration(expiration)\n                .setIsMember(true);\n        updatePrincipal();\n        try {\n            client.putMembership(domainName, roleName, memberName, auditRef, mbr);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Add a temporary member in the specified role with expiration", "call_func_name": ["com.yahoo.athenz.zms.Membership.<init>", "com.yahoo.athenz.zms.Membership.setRoleName", "com.yahoo.athenz.zms.Membership.setMemberName", "com.yahoo.athenz.zms.Membership.setExpiration", "java.lang.Boolean.valueOf", "com.yahoo.athenz.zms.Membership.setIsMember", "com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putMembership", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["com.yahoo.rdl.Timestamp"], ["boolean"], ["java.lang.Boolean"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Membership"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "317", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteMembership", "methodParameterType": "String#String#String#String#", "methodParameterName": "domainName#roleName#memberName#auditRef#", "methodBody": "public void deleteMembership(String domainName, String roleName, String memberName, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteMembership(domainName, roleName, memberName, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Remove the specified member from the role", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteMembership", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "318", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getUserList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public UserList getUserList() {\n        updatePrincipal();\n        try {\n            return client.getUserList();\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get list of users defined in the system", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getUserList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], [""], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "319", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteUser", "methodParameterType": "String#String#", "methodParameterName": "name#auditRef#", "methodBody": "public void deleteUser(String name, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteUser(name, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Remove the specified user from Athens system. This will delete any user.{name} domain plus all of its subdomains (if exist) and remove the user from any role in the system. This command requires authorization from the Athens sys.auth domain (delete action on resource user).", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteUser", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "320", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPolicies", "methodParameterType": "String#Boolean#", "methodParameterName": "domainName#assertions#", "methodBody": "public Policies getPolicies(String domainName, Boolean assertions) {\n        updatePrincipal();\n        try {\n            return client.getPolicies(domainName, assertions);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of policies defined for the specified domain. The policies will contain their attributes and, if specified, the list of assertions.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getPolicies", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Boolean"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "321", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPolicyList", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public PolicyList getPolicyList(String domainName) {\n        updatePrincipal();\n        try {\n            return client.getPolicyList(domainName, null, null);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get list of policies defined in the specified domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getPolicyList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Integer", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "322", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPolicyList", "methodParameterType": "String#Integer#String#", "methodParameterName": "domainName#limit#skip#", "methodBody": "public PolicyList getPolicyList(String domainName, Integer limit, String skip) {\n        updatePrincipal();\n        try {\n            return client.getPolicyList(domainName, limit, skip);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get list of policies defined in the specified domain filtered based on the specified arguments", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getPolicyList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Integer", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "323", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getAssertion", "methodParameterType": "String#String#Long#", "methodParameterName": "domainName#policyName#assertionId#", "methodBody": "public Assertion getAssertion(String domainName, String policyName, Long assertionId) {\n        updatePrincipal();\n        try {\n            return client.getAssertion(domainName, policyName, assertionId);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Return the specified policy object assertion", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getAssertion", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.Long"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "324", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putAssertion", "methodParameterType": "String#String#String#Assertion#", "methodParameterName": "domainName#policyName#auditRef#assertion#", "methodBody": "public Assertion putAssertion(String domainName, String policyName, String auditRef, Assertion assertion) {\n        updatePrincipal();\n        try {\n            return client.putAssertion(domainName, policyName, auditRef, assertion);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Add the specified assertion to the specified policy", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putAssertion", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Assertion"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "325", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteAssertion", "methodParameterType": "String#String#Long#String#", "methodParameterName": "domainName#policyName#assertionId#auditRef#", "methodBody": "public void deleteAssertion(String domainName, String policyName, Long assertionId, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteAssertion(domainName, policyName, assertionId, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete specified assertion from the given policy", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteAssertion", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.Long", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "326", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPolicy", "methodParameterType": "String#String#", "methodParameterName": "domainName#policyName#", "methodBody": "public Policy getPolicy(String domainName, String policyName) {\n        updatePrincipal();\n        try {\n            return client.getPolicy(domainName, policyName);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Return the specified policy object", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getPolicy", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "327", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putPolicy", "methodParameterType": "String#String#String#Policy#", "methodParameterName": "domainName#policyName#auditRef#policy#", "methodBody": "public void putPolicy(String domainName, String policyName, String auditRef, Policy policy) {\n        updatePrincipal();\n        try {\n            client.putPolicy(domainName, policyName, auditRef, policy);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create/Update a new policy in the specified domain. If updating a policy the provided object must contain all attributes as it will replace the full policy object configured on the server (not just some of the attributes).", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putPolicy", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Policy"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "328", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deletePolicy", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#policyName#auditRef#", "methodBody": "public void deletePolicy(String domainName, String policyName, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deletePolicy(domainName, policyName, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete specified policy from a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deletePolicy", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "329", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putServiceIdentity", "methodParameterType": "String#String#String#ServiceIdentity#", "methodParameterName": "domainName#serviceName#auditRef#service#", "methodBody": "public void putServiceIdentity(String domainName, String serviceName,\n                                   String auditRef, ServiceIdentity service) {\n        updatePrincipal();\n        try {\n            client.putServiceIdentity(domainName, serviceName, auditRef, service);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create/Update a new service in the specified domain.  If updating a service the provided object must contain all attributes as it will replace the full service object configured on the server (not just some of the attributes).", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putServiceIdentity", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.ServiceIdentity"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "330", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getServiceIdentity", "methodParameterType": "String#String#", "methodParameterName": "domainName#serviceName#", "methodBody": "public ServiceIdentity getServiceIdentity(String domainName, String serviceName) {\n        updatePrincipal();\n        try {\n            return client.getServiceIdentity(domainName, serviceName);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified service object from a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getServiceIdentity", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "331", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteServiceIdentity", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#serviceName#auditRef#", "methodBody": "public void deleteServiceIdentity(String domainName, String serviceName, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteServiceIdentity(domainName, serviceName, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified service from a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteServiceIdentity", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "332", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getServiceIdentities", "methodParameterType": "String#Boolean#Boolean#", "methodParameterName": "domainName#publicKeys#hosts#", "methodBody": "public ServiceIdentities getServiceIdentities(String domainName, Boolean publicKeys, Boolean hosts) {\n        updatePrincipal();\n        try {\n            return client.getServiceIdentities(domainName, publicKeys, hosts);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of services defined for the specified domain. The services will contain their attributes and, if specified, the list of publickeys and hosts.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getServiceIdentities", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Boolean", "java.lang.Boolean"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "333", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getServiceIdentityList", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public ServiceIdentityList getServiceIdentityList(String domainName) {\n        return getServiceIdentityList(domainName, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the full list of services defined in a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getServiceIdentityList"], "call_func_parameter": [["java.lang.String", "java.lang.Integer", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getServiceIdentityList": "Retrieve the list of services defined in a domain filtered based on the specified arguments"}]}, {"index": "334", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getServiceIdentityList", "methodParameterType": "String#Integer#String#", "methodParameterName": "domainName#limit#skip#", "methodBody": "public ServiceIdentityList getServiceIdentityList(String domainName, Integer limit, String skip) {\n        updatePrincipal();\n        try {\n            return client.getServiceIdentityList(domainName, limit, skip);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of services defined in a domain filtered based on the specified arguments", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getServiceIdentityList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Integer", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "335", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPublicKeyEntry", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#serviceName#keyId#", "methodBody": "public PublicKeyEntry getPublicKeyEntry(String domainName, String serviceName, String keyId) {\n        updatePrincipal();\n        try {\n            return client.getPublicKeyEntry(domainName, serviceName, keyId);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified public key from the given service object", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getPublicKeyEntry", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "336", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putPublicKeyEntry", "methodParameterType": "String#String#String#String#PublicKeyEntry#", "methodParameterName": "domainName#serviceName#keyId#auditRef#publicKeyEntry#", "methodBody": "public void putPublicKeyEntry(String domainName, String serviceName, String keyId, String auditRef,\n                                  PublicKeyEntry publicKeyEntry) {\n        updatePrincipal();\n        try {\n            client.putPublicKeyEntry(domainName, serviceName, keyId, auditRef, publicKeyEntry);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Update or add (if doesn't already exist) the specified public key in the service object", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putPublicKeyEntry", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.PublicKeyEntry"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "337", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deletePublicKeyEntry", "methodParameterType": "String#String#String#String#", "methodParameterName": "domainName#serviceName#keyId#auditRef#", "methodBody": "public void deletePublicKeyEntry(String domainName, String serviceName, String keyId, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deletePublicKeyEntry(domainName, serviceName, keyId, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified public key from the service object. If the key doesn't exist then it is treated as a successful operation and no exception will be thrown.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deletePublicKeyEntry", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "338", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putEntity", "methodParameterType": "String#String#String#Entity#", "methodParameterName": "domainName#entityName#auditRef#entity#", "methodBody": "public void putEntity(String domainName, String entityName, String auditRef, Entity entity) {\n        updatePrincipal();\n        try {\n            client.putEntity(domainName, entityName, auditRef, entity);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create/update an entity object in ZMS", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putEntity", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Entity"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "339", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getEntity", "methodParameterType": "String#String#", "methodParameterName": "domainName#entityName#", "methodBody": "public Entity getEntity(String domainName, String entityName) {\n        updatePrincipal();\n        try {\n            return client.getEntity(domainName, entityName);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the specified entity from the ZMS Server", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getEntity", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "340", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteEntity", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#entityName#auditRef#", "methodBody": "public void deleteEntity(String domainName, String entityName, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteEntity(domainName, entityName, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified entity from the ZMS Server", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteEntity", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "341", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getEntityList", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public EntityList getEntityList(String domainName) {\n        updatePrincipal();\n        try {\n            return client.getEntityList(domainName);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of entities defined for the specified domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getEntityList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "342", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putTenancy", "methodParameterType": "String#String#String#Tenancy#", "methodParameterName": "tenantDomain#providerService#auditRef#tenant#", "methodBody": "public void putTenancy(String tenantDomain, String providerService, String auditRef, Tenancy tenant) {\n        updatePrincipal();\n        try {\n            client.putTenancy(tenantDomain, providerService, auditRef, tenant);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Register a new provider service for a given tenant domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putTenancy", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Tenancy"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "343", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteTenancy", "methodParameterType": "String#String#String#", "methodParameterName": "tenantDomain#providerService#auditRef#", "methodBody": "public void deleteTenancy(String tenantDomain, String providerService, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteTenancy(tenantDomain, providerService, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified provider service from a tenant domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteTenancy", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "344", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putTenant", "methodParameterType": "String#String#String#String#Tenancy#", "methodParameterName": "providerDomain#providerService#tenantDomain#auditRef#tenant#", "methodBody": "public void putTenant(String providerDomain, String providerService, String tenantDomain, String auditRef, Tenancy tenant) {\n        updatePrincipal();\n        try {\n            client.putTenant(providerDomain, providerService, tenantDomain, auditRef, tenant);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Register a new tenant domain for the provider service", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putTenant", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Tenancy"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "345", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteTenant", "methodParameterType": "String#String#String#String#", "methodParameterName": "providerDomain#providerService#tenantDomain#auditRef#", "methodBody": "public void deleteTenant(String providerDomain, String providerService, String tenantDomain, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteTenant(providerDomain, providerService, tenantDomain, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified tenant from provider service", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteTenant", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "346", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putTenantResourceGroupRoles", "methodParameterType": "String#String#String#String#String#TenantResourceGroupRoles#", "methodParameterName": "providerDomain#providerServiceName#tenantDomain#resourceGroup#auditRef#tenantRoles#", "methodBody": "public void putTenantResourceGroupRoles(String providerDomain, String providerServiceName, String tenantDomain,\n                                            String resourceGroup, String auditRef, TenantResourceGroupRoles tenantRoles) {\n        updatePrincipal();\n        try {\n            client.putTenantResourceGroupRoles(providerDomain, providerServiceName, tenantDomain,\n                    resourceGroup, auditRef, tenantRoles);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create tenant roles for the specified tenant resource group.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putTenantResourceGroupRoles", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.TenantResourceGroupRoles"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "347", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getTenantResourceGroupRoles", "methodParameterType": "String#String#String#String#", "methodParameterName": "providerDomain#providerServiceName#tenantDomain#resourceGroup#", "methodBody": "public TenantResourceGroupRoles getTenantResourceGroupRoles(String providerDomain, String providerServiceName,\n                                                                String tenantDomain, String resourceGroup) {\n        updatePrincipal();\n        try {\n            return client.getTenantResourceGroupRoles(providerDomain, providerServiceName,\n                    tenantDomain, resourceGroup);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of tenant roles defined for a tenant resource group in a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getTenantResourceGroupRoles", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "348", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteTenantResourceGroupRoles", "methodParameterType": "String#String#String#String#String#", "methodParameterName": "providerDomain#providerServiceName#tenantDomain#resourceGroup#auditRef#", "methodBody": "public void deleteTenantResourceGroupRoles(String providerDomain, String providerServiceName, String tenantDomain,\n                                               String resourceGroup, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteTenantResourceGroupRoles(providerDomain, providerServiceName, tenantDomain,\n                    resourceGroup, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete tenant roles for the specified tenant resource group in a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteTenantResourceGroupRoles", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "349", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getAccess", "methodParameterType": "String#String#String#", "methodParameterName": "action#resource#trustDomain#", "methodBody": "public Access getAccess(String action, String resource, String trustDomain) {\n        return getAccess(action, resource, trustDomain, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getAccess"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getAccess": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not."}]}, {"index": "350", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getAccess", "methodParameterType": "String#String#String#String#", "methodParameterName": "action#resource#trustDomain#principal#", "methodBody": "public Access getAccess(String action, String resource, String trustDomain, String principal) {\n        try {\n            return client.getAccess(action, resource, trustDomain, principal);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not.", "call_func_name": ["com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getAccess", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "351", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getAccessExt", "methodParameterType": "String#String#String#String#", "methodParameterName": "action#resource#trustDomain#principal#", "methodBody": "public Access getAccessExt(String action, String resource, String trustDomain, String principal) {\n        try {\n            return client.getAccessExt(action, resource, trustDomain, principal);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not.", "call_func_name": ["com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getAccessExt", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "352", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getSignedDomains", "methodParameterType": "String#String#String#Map<String,List<String>>#", "methodParameterName": "domainName#metaOnly#matchingTag#responseHeaders#", "methodBody": "public SignedDomains getSignedDomains(String domainName, String metaOnly, String matchingTag,\n                                          Map<String, List<String>> responseHeaders) {\n        return getSignedDomains(domainName, metaOnly, null, matchingTag, responseHeaders);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of all domain data from the ZMS Server that is signed with ZMS's private key. It will pass an optional matchingTag so that ZMS can skip returning domains if no changes have taken place since that tag was issued.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getSignedDomains"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.util.Map"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getSignedDomains": "Retrieve the list of all domain data from the ZMS Server that is signed with ZMS's private key. It will pass an optional matchingTag so that ZMS can skip returning domains if no changes have taken place since that tag was issued."}]}, {"index": "353", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getSignedDomains", "methodParameterType": "String#String#String#String#Map<String,List<String>>#", "methodParameterName": "domainName#metaOnly#metaAttr#matchingTag#responseHeaders#", "methodBody": "public SignedDomains getSignedDomains(String domainName, String metaOnly, String metaAttr,\n                                          String matchingTag, Map<String, List<String>> responseHeaders) {\n        updatePrincipal();\n        try {\n            return client.getSignedDomains(domainName, metaOnly, metaAttr, matchingTag, responseHeaders);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of all domain data from the ZMS Server that is signed with ZMS's private key. It will pass an optional matchingTag so that ZMS can skip returning domains if no changes have taken place since that tag was issued.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getSignedDomains", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.util.Map"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "354", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getUserToken", "methodParameterType": "String#", "methodParameterName": "userName#", "methodBody": "public UserToken getUserToken(String userName) {\n        return getUserToken(userName, null, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified user credentials return the corresponding User Token that can be used for authenticating other ZMS operations. The client internally automatically calls this method and uses the UserToken if the ZMSClient object was initialized with a user principal.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getUserToken"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Boolean"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getUserToken": "For the specified user credentials return the corresponding User Token that can be used for authenticating other ZMS operations by any of the specified authorized services."}]}, {"index": "355", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getUserToken", "methodParameterType": "String#String#Boolean#", "methodParameterName": "userName#serviceNames#header#", "methodBody": "public UserToken getUserToken(String userName, String serviceNames, Boolean header) {\n        try {\n            return client.getUserToken(userName, serviceNames, header);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "For the specified user credentials return the corresponding User Token that can be used for authenticating other ZMS operations by any of the specified authorized services.", "call_func_name": ["com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getUserToken", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Boolean"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": "/"}, {"index": "356", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getUserToken", "methodParameterType": "String#String#", "methodParameterName": "userName#serviceNames#", "methodBody": "public UserToken getUserToken(String userName, String serviceNames) {\n        return getUserToken(userName, serviceNames, null);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "For the specified user credentials return the corresponding User Token that can be used for authenticating other ZMS operations by any of the specified authorized services.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.getUserToken"], "call_func_parameter": [["java.lang.String", "java.lang.String", "java.lang.Boolean"]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.getUserToken": "For the specified user credentials return the corresponding User Token that can be used for authenticating other ZMS operations by any of the specified authorized services."}]}, {"index": "357", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putDefaultAdmins", "methodParameterType": "String#String#DefaultAdmins#", "methodParameterName": "domainName#auditRef#defaultAdmins#", "methodBody": "public void putDefaultAdmins(String domainName, String auditRef, DefaultAdmins defaultAdmins) {\n        updatePrincipal();\n        try {\n            client.putDefaultAdmins(domainName, auditRef, defaultAdmins);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "For the specified domain in domainName, a list of default administrators can be passed to this method and will be added to the domain's admin role In addition this method will ensure that the admin role and policy exist and are properly set up", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putDefaultAdmins", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.DefaultAdmins"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "358", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPrincipal", "methodParameterType": "String#", "methodParameterName": "serviceToken#", "methodBody": "public Principal getPrincipal(String serviceToken) {\n        return getPrincipal(serviceToken, PRINCIPAL_AUTHORITY.getHeader());\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The client will validate the given serviceToken against the ZMS Server and if the token is valid, it will return a Principal object.", "call_func_name": ["com.yahoo.athenz.auth.Authority.getHeader", "com.yahoo.athenz.zms.ZMSClient.getPrincipal"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.Authority.getHeader": "@return a string describing where to find the credentials in a request, i.e. \"X-Auth-Token\" or \"Cookie.User\""}, {"com.yahoo.athenz.zms.ZMSClient.getPrincipal": "The client will validate the given serviceToken against the ZMS Server and if the token is valid, it will return a Principal object."}]}, {"index": "359", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPrincipal", "methodParameterType": "String#String#", "methodParameterName": "serviceToken#tokenHeader#", "methodBody": "public Principal getPrincipal(String serviceToken, String tokenHeader) {\n\n        if (serviceToken == null) {\n            throw new ZMSClientException(401, \"Null service token provided\");\n        }\n\n        if (tokenHeader == null) {\n            tokenHeader = PRINCIPAL_AUTHORITY.getHeader();\n        }\n\n        // verify that service token is valid before sending the data to\n        // the ZMS server\n\n        PrincipalToken token;\n        try {\n            token = new PrincipalToken(serviceToken);\n        } catch (IllegalArgumentException ex) {\n            throw new ZMSClientException(ZMSClientException.UNAUTHORIZED,\n                    \"Invalid service token provided: \" + ex.getMessage());\n        }\n\n        Principal servicePrincipal = SimplePrincipal.create(token.getDomain(), token.getName(),\n                serviceToken, 0, PRINCIPAL_AUTHORITY);\n\n        client.addCredentials(tokenHeader, serviceToken);\n        principalCheckDone = true;\n\n        ServicePrincipal validatedPrincipal;\n        try {\n            validatedPrincipal = client.getServicePrincipal();\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n\n        if (validatedPrincipal == null) {\n            throw new ZMSClientException(ZMSClientException.UNAUTHORIZED, \"Invalid service token provided\");\n        }\n\n        // before returning let's validate that domain, name and\n        // credentials match to what was passed to \n\n        if (!servicePrincipal.getDomain().equalsIgnoreCase(validatedPrincipal.getDomain())) {\n            throw new ZMSClientException(ZMSClientException.UNAUTHORIZED, \"Validated principal domain name mismatch\");\n        }\n\n        if (!servicePrincipal.getName().equalsIgnoreCase(validatedPrincipal.getService())) {\n            throw new ZMSClientException(ZMSClientException.UNAUTHORIZED, \"Validated principal service name mismatch\");\n        }\n\n        return servicePrincipal;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#NumberLiteral#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#PrefixExpression#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(PrefixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)PrefixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "The client will validate the given serviceToken against the ZMS Server and if the token is valid, it will return a Principal object.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClientException.<init>", "com.yahoo.athenz.auth.Authority.getHeader", "com.yahoo.athenz.auth.token.PrincipalToken.<init>", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.IllegalArgumentException.getMessage", "java.lang.StringBuilder.toString", "com.yahoo.athenz.auth.token.PrincipalToken.getDomain", "com.yahoo.athenz.auth.token.PrincipalToken.getName", "com.yahoo.athenz.auth.impl.SimplePrincipal.create", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.addCredentials", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getServicePrincipal", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "java.lang.Exception.getMessage", "com.yahoo.athenz.auth.Principal.getDomain", "com.yahoo.athenz.zms.ServicePrincipal.getDomain", "java.lang.String.equalsIgnoreCase", "com.yahoo.athenz.auth.Principal.getName", "com.yahoo.athenz.zms.ServicePrincipal.getService"], "call_func_parameter": [["int", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String"], [""], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "long", "com.yahoo.athenz.auth.Authority"], ["java.lang.String", "java.lang.String"], [""], [""], [""], [""], [""], [""], ["java.lang.String"], [""], [""]], "passed_comments": [{"com.yahoo.athenz.auth.Authority.getHeader": "@return a string describing where to find the credentials in a request, i.e. \"X-Auth-Token\" or \"Cookie.User\""}, {"com.yahoo.athenz.auth.impl.SimplePrincipal.create": "Create a Principal for the given user identity"}, {"com.yahoo.athenz.auth.Principal.getDomain": "@return the domain of the authority over this principal, i.e. \"user\""}, {"com.yahoo.athenz.auth.Principal.getName": "@return the name of the principal as a string, i.e. \"joe\""}]}, {"index": "360", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putProviderResourceGroupRoles", "methodParameterType": "String#String#String#String#String#ProviderResourceGroupRoles#", "methodParameterName": "tenantDomain#providerDomain#providerServiceName#resourceGroup#auditRef#providerRoles#", "methodBody": "public void putProviderResourceGroupRoles(String tenantDomain, String providerDomain,\n                                              String providerServiceName, String resourceGroup, String auditRef,\n                                              ProviderResourceGroupRoles providerRoles) {\n        updatePrincipal();\n        try {\n            client.putProviderResourceGroupRoles(tenantDomain, providerDomain, providerServiceName,\n                    resourceGroup, auditRef, providerRoles);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create provider roles for the specified tenant resource group in the tenant domain. If the principal requesting this operation has been authorized by the provider service itself, then the corresponding tenant roles will be created in the provider domain as well thus completing the tenancy on-boarding process in one call.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putProviderResourceGroupRoles", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.ProviderResourceGroupRoles"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "361", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteProviderResourceGroupRoles", "methodParameterType": "String#String#String#String#String#", "methodParameterName": "tenantDomain#providerDomain#providerServiceName#resourceGroup#auditRef#", "methodBody": "public void deleteProviderResourceGroupRoles(String tenantDomain, String providerDomain,\n                                                 String providerServiceName, String resourceGroup, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteProviderResourceGroupRoles(tenantDomain, providerDomain, providerServiceName,\n                    resourceGroup, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the provider roles for the specified tenant resource group from the tenant domain. If the principal requesting this operation has been authorized by the provider service itself, then the corresponding tenant roles will be deleted from the provider domain as well thus completing the process in one call.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteProviderResourceGroupRoles", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "362", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getProviderResourceGroupRoles", "methodParameterType": "String#String#String#String#", "methodParameterName": "tenantDomain#providerDomain#providerServiceName#resourceGroup#", "methodBody": "public ProviderResourceGroupRoles getProviderResourceGroupRoles(String tenantDomain,\n                                                                    String providerDomain, String providerServiceName, String resourceGroup) {\n        updatePrincipal();\n        try {\n            return client.getProviderResourceGroupRoles(tenantDomain, providerDomain, providerServiceName,\n                    resourceGroup);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of provider roles defined for a tenant resource group in a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getProviderResourceGroupRoles", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "363", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getDomainDataCheck", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public DomainDataCheck getDomainDataCheck(String domain) {\n        updatePrincipal();\n        try {\n            return client.getDomainDataCheck(domain);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Check the data for the specified domain object", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getDomainDataCheck", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "364", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getTemplate", "methodParameterType": "String#", "methodParameterName": "template#", "methodBody": "public Template getTemplate(String template) {\n        updatePrincipal();\n        try {\n            return client.getTemplate(template);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the the specified solution template provisioned on the ZMS Server. The template object will include the list of roles and policies that will be provisioned in the domain when the template is applied.", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getTemplate", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "365", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getServerTemplateList", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ServerTemplateList getServerTemplateList() {\n        updatePrincipal();\n        try {\n            return client.getServerTemplateList();\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of solution templates provisioned on the ZMS Server", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getServerTemplateList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], [""], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "366", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putDomainTemplate", "methodParameterType": "String#String#DomainTemplate#", "methodParameterName": "domain#auditRef#templates#", "methodBody": "public void putDomainTemplate(String domain, String auditRef, DomainTemplate templates) {\n        updatePrincipal();\n        try {\n            client.putDomainTemplate(domain, auditRef, templates);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Provision the specified solution template roles and policies in the domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putDomainTemplate", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.DomainTemplate"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "367", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putDomainTemplateExt", "methodParameterType": "String#String#String#DomainTemplate#", "methodParameterName": "domain#template#auditRef#templates#", "methodBody": "public void putDomainTemplateExt(String domain, String template, String auditRef, DomainTemplate templates) {\n        updatePrincipal();\n        try {\n            client.putDomainTemplateExt(domain, template, auditRef, templates);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Provision the specified solution template roles and policies in the domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putDomainTemplateExt", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.DomainTemplate"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "368", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteDomainTemplate", "methodParameterType": "String#String#String#", "methodParameterName": "domain#template#auditRef#", "methodBody": "public void deleteDomainTemplate(String domain, String template, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteDomainTemplate(domain, template, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified solution template roles and policies from the domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteDomainTemplate", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "369", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getDomainTemplateList", "methodParameterType": "String#", "methodParameterName": "domain#", "methodBody": "public DomainTemplateList getDomainTemplateList(String domain) {\n        updatePrincipal();\n        try {\n            return client.getDomainTemplateList(domain);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of solution template provisioned for a domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getDomainTemplateList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "370", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getResourceAccessList", "methodParameterType": "String#String#", "methodParameterName": "principal#action#", "methodBody": "public ResourceAccessList getResourceAccessList(String principal, String action) {\n        updatePrincipal();\n        try {\n            return client.getResourceAccessList(principal, action);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of resources as defined in their respective assertions that the given principal has access to through their role membership", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getResourceAccessList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "371", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getQuota", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public Quota getQuota(String domainName) {\n        updatePrincipal();\n        try {\n            return client.getQuota(domainName);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the quota deatails for the specified domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getQuota", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "372", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putQuota", "methodParameterType": "String#String#Quota#", "methodParameterName": "domainName#auditRef#quota#", "methodBody": "public void putQuota(String domainName, String auditRef, Quota quota) {\n        updatePrincipal();\n        try {\n            client.putQuota(domainName, auditRef, quota);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Create/Update the quota details for the specified domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putQuota", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Quota"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "373", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteQuota", "methodParameterType": "String#String#", "methodParameterName": "domainName#auditRef#", "methodBody": "public void deleteQuota(String domainName, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteQuota(domainName, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified quota details for the specified domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteQuota", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "374", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.deleteDomainRoleMember", "methodParameterType": "String#String#String#", "methodParameterName": "domainName#memberName#auditRef#", "methodBody": "public void deleteDomainRoleMember(String domainName, String memberName, String auditRef) {\n        updatePrincipal();\n        try {\n            client.deleteDomainRoleMember(domainName, memberName, auditRef);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Delete the specified user from all roles in the given domain", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.deleteDomainRoleMember", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "375", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getDomainRoleMembers", "methodParameterType": "String#", "methodParameterName": "domainName#", "methodBody": "public DomainRoleMembers getDomainRoleMembers(String domainName) {\n        updatePrincipal();\n        try {\n            return client.getDomainRoleMembers(domainName);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Retrieve the list of all members provisioned for a domain in regular roles", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getDomainRoleMembers", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "376", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putRoleSystemMeta", "methodParameterType": "String#String#String#String#RoleSystemMeta#", "methodParameterName": "domainName#roleName#attribute#auditRef#meta#", "methodBody": "public void putRoleSystemMeta(String domainName, String roleName, String attribute, String auditRef, RoleSystemMeta meta) {\n        updatePrincipal();\n        try {\n            client.putRoleSystemMeta(domainName, roleName, attribute, auditRef, meta);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Set the role system meta parameters", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putRoleSystemMeta", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.RoleSystemMeta"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "377", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putRoleMeta", "methodParameterType": "String#String#String#RoleMeta#", "methodParameterName": "domainName#roleName#auditRef#meta#", "methodBody": "public void putRoleMeta(String domainName, String roleName, String auditRef, RoleMeta meta) {\n        updatePrincipal();\n        try {\n            client.putRoleMeta(domainName, roleName, auditRef, meta);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Set the role meta parameters", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putRoleMeta", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.RoleMeta"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "378", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.putMembershipDecision", "methodParameterType": "String#String#String#Timestamp#boolean#String#", "methodParameterName": "domainName#roleName#memberName#expiration#approval#auditRef#", "methodBody": "public void putMembershipDecision(String domainName, String roleName, String memberName,\n                                      Timestamp expiration, boolean approval, String auditRef) {\n        Membership mbr = new Membership().setRoleName(roleName)\n                .setMemberName(memberName).setExpiration(expiration).setApproved(approval);\n        updatePrincipal();\n        try {\n            client.putMembershipDecision(domainName, roleName, memberName, auditRef, mbr);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Approve or reject addition of a member in the specified role optionally with expiration", "call_func_name": ["com.yahoo.athenz.zms.Membership.<init>", "com.yahoo.athenz.zms.Membership.setRoleName", "com.yahoo.athenz.zms.Membership.setMemberName", "com.yahoo.athenz.zms.Membership.setExpiration", "java.lang.Boolean.valueOf", "com.yahoo.athenz.zms.Membership.setApproved", "com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.putMembershipDecision", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], ["java.lang.String"], ["com.yahoo.rdl.Timestamp"], ["boolean"], ["java.lang.Boolean"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.String", "com.yahoo.athenz.zms.Membership"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "379", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSClient.java", "methodName": "com.yahoo.athenz.zms.ZMSClient.getPendingDomainRoleMembersList", "methodParameterType": "String#", "methodParameterName": "principal#", "methodBody": "public DomainRoleMembership getPendingDomainRoleMembersList(String principal) {\n        updatePrincipal();\n        try {\n            return client.getPendingDomainRoleMembersList(principal);\n        } catch (ResourceException ex) {\n            throw new ZMSClientException(ex.getCode(), ex.getData());\n        } catch (Exception ex) {\n            throw new ZMSClientException(ZMSClientException.BAD_REQUEST, ex.getMessage());\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Return all the list of pending requests for the given principal. If the principal is null, the server will return the list for the authenticated principal making the call", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.updatePrincipal", "com.yahoo.athenz.zms.ZMSRDLGeneratedClient.getPendingDomainRoleMembersList", "com.yahoo.athenz.zms.ResourceException.getCode", "com.yahoo.athenz.zms.ResourceException.getData", "com.yahoo.athenz.zms.ZMSClientException.<init>", "java.lang.Exception.getMessage"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["int", "java.lang.Object"], [""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.updatePrincipal": "If the current principal is the user principal then request a UserToken from ZMS and set the UserToken as the principal identity for authentication."}]}, {"index": "380", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSAuthorizer.java", "methodName": "com.yahoo.athenz.zms.ZMSAuthorizer.ZMSAuthorizer", "methodParameterType": "String#", "methodParameterName": "serviceDomain#", "methodBody": "public ZMSAuthorizer(String serviceDomain) {\n        this(null, serviceDomain);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#NullLiteral#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new ZMSAuthorizer object with the given resource service domain name. The url for ZMS Server is automatically retrieved from the athenz configuration file (zms_url field).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "381", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSAuthorizer.java", "methodName": "com.yahoo.athenz.zms.ZMSAuthorizer.ZMSAuthorizer", "methodParameterType": "String#String#", "methodParameterName": "endpoint#serviceDomain#", "methodBody": "public ZMSAuthorizer(String endpoint, String serviceDomain) {\n        this.endpoint = endpoint;\n        this.serviceDomain = serviceDomain;\n        client = new ZMSClient(this.endpoint); \n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#ThisExpression#SimpleName#FieldAccess#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Constructs a new ZMSAuthorizer object with the given ZMS Server endpoint and given resource service domain name", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "382", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSAuthorizer.java", "methodName": "com.yahoo.athenz.zms.ZMSAuthorizer.close", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void close() {\n        if (client != null) {\n            client.close();\n            client = null;\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Close the ZMS Client object", "call_func_name": ["com.yahoo.athenz.zms.ZMSClient.close"], "call_func_parameter": [[""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSClient.close": "Close the ZMSClient object and release any allocated resources."}]}, {"index": "383", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSAuthorizer.java", "methodName": "com.yahoo.athenz.zms.ZMSAuthorizer.setZMSClient", "methodParameterType": "ZMSClient#", "methodParameterName": "client#", "methodBody": "public void setZMSClient(ZMSClient client) {\n        // if we already have a client then we need to close it\n        close();\n        this.client = client;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the authorizer to use the specified zms client object", "call_func_name": ["com.yahoo.athenz.zms.ZMSAuthorizer.close"], "call_func_parameter": [[""]], "passed_comments": [{"com.yahoo.athenz.zms.ZMSAuthorizer.close": "Close the ZMS Client object"}]}, {"index": "384", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSAuthorizer.java", "methodName": "com.yahoo.athenz.zms.ZMSAuthorizer.access", "methodParameterType": "String#String#String#String#", "methodParameterName": "action#resource#token#trustDomain#", "methodBody": "public boolean access(String action, String resource, String token, String trustDomain) {\n        \n        // first let's find out what type of token we're given\n        // either Role Token with version Z1 or principal token\n        // our token classes will always validate the given\n        // token and throw exceptions so we'll always get a valid\n        // principal object\n        \n        Principal principal;\n        if (isRoleToken(token)) {\n            RoleToken roleToken = new RoleToken(token);\n            principal = SimplePrincipal.create(roleToken.getDomain(),\n                    roleToken.getSignedToken(), roleToken.getRoles(), ROLE_AUTHORITY);\n        } else {\n            PrincipalToken principalToken = new PrincipalToken(token);\n            principal = SimplePrincipal.create(principalToken.getDomain(),\n                    principalToken.getName(), principalToken.getSignedToken(),\n                    0, PRINCIPAL_AUTHORITY);\n        }\n        return access(action, resource, principal, trustDomain);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#NumberLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not.", "call_func_name": ["com.yahoo.athenz.zms.ZMSAuthorizer.isRoleToken", "com.yahoo.athenz.auth.token.RoleToken.<init>", "com.yahoo.athenz.auth.token.RoleToken.getDomain", "com.yahoo.athenz.auth.token.RoleToken.getSignedToken", "com.yahoo.athenz.auth.token.RoleToken.getRoles", "com.yahoo.athenz.auth.impl.SimplePrincipal.create", "com.yahoo.athenz.auth.token.PrincipalToken.<init>", "com.yahoo.athenz.auth.token.PrincipalToken.getDomain", "com.yahoo.athenz.auth.token.PrincipalToken.getName", "com.yahoo.athenz.auth.token.PrincipalToken.getSignedToken", "com.yahoo.athenz.auth.impl.SimplePrincipal.create", "com.yahoo.athenz.zms.ZMSAuthorizer.access"], "call_func_parameter": [["java.lang.String"], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.util.List", "com.yahoo.athenz.auth.Authority"], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "long", "com.yahoo.athenz.auth.Authority"], ["java.lang.String", "java.lang.String", "com.yahoo.athenz.auth.Principal", "java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.auth.impl.SimplePrincipal.create": "Create a Principal based on a given RoleToken"}, {"com.yahoo.athenz.auth.impl.SimplePrincipal.create": "Create a Principal for the given user identity"}, {"com.yahoo.athenz.zms.ZMSAuthorizer.access": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not."}]}, {"index": "385", "file": "/root/repos/repos24/athenz/clients/java/zms/src/main/java/com/yahoo/athenz/zms/ZMSAuthorizer.java", "methodName": "com.yahoo.athenz.zms.ZMSAuthorizer.access", "methodParameterType": "String#String#Principal#String#", "methodParameterName": "action#resource#principal#trustDomain#", "methodBody": "public boolean access(String action, String resource, Principal principal, String trustDomain) {\n        \n        //the \"resource\" may be an entity name here, we need a full resource name\n        \n        String rn = (resource.contains(\":\")) ? resource : serviceDomain + \":\" + resource;\n        \n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug(\"ZMSAuthorizer.access({}, {}, {}, {})\", action, rn,\n                    principal != null ? principal.getFullName() : \"null\", trustDomain);\n        }\n        \n        try {\n            client.addCredentials(principal);\n            return client.getAccess(action, rn, trustDomain).getGranted();\n        } catch (ZMSClientException e) {\n            \n            if (LOGGER.isDebugEnabled()) {\n                LOGGER.debug(\"ZMSAuthorizer.access: \" + e);\n            }\n            \n            switch (e.getCode()) {\n            case ZMSClientException.NOT_FOUND:\n                throw new ZMSClientException(ZMSClientException.FORBIDDEN, \"Not found: \" + rn);\n            default:\n                throw e;\n            }\n        } catch (Throwable th) {\n            throw new ZMSClientException(ZMSClientException.FORBIDDEN, \"Cannot contact ZMS\");\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#ParenthesizedExpression#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#StringLiteral#ConditionalExpression#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#InfixExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SwitchCase#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#SimpleName#InfixExpression#ClassInstanceCreation#ThrowStatement#SwitchCase#SimpleName#ThrowStatement#SwitchStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#QualifiedName#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(ParenthesizedExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ParenthesizedExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName(ConditionalExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)ConditionalExpression(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(SwitchStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SwitchCase(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SwitchCase(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ClassInstanceCreation)ThrowStatement(SwitchCase)SwitchCase(ThrowStatement(SimpleName)SimpleName)ThrowStatement)SwitchStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not.", "call_func_name": ["java.lang.String.contains", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.slf4j.Logger.isDebugEnabled", "com.yahoo.athenz.auth.Principal.getFullName", "org.slf4j.Logger.debug", "com.yahoo.athenz.zms.ZMSClient.addCredentials", "com.yahoo.athenz.zms.ZMSClient.getAccess", "com.yahoo.athenz.zms.Access.getGranted", "java.lang.StringBuilder.append", "org.slf4j.Logger.debug", "com.yahoo.athenz.zms.ZMSClientException.getCode", "com.yahoo.athenz.zms.ZMSClientException.<init>"], "call_func_parameter": [["java.lang.CharSequence"], [""], ["java.lang.String"], [""], [""], [""], ["java.lang.String", "java.lang.Object[]"], ["com.yahoo.athenz.auth.Principal"], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.Object"], ["java.lang.String"], [""], ["int", "java.lang.Object"]], "passed_comments": [{"com.yahoo.athenz.auth.Principal.getFullName": "@return the full name of the principal as a string, i.e. \"user.joe\""}, {"com.yahoo.athenz.zms.ZMSClient.addCredentials": "Sets or overrides the current principal identity set in the client."}, {"com.yahoo.athenz.zms.ZMSClient.getAccess": "Requests the ZMS to indicate whether or not the specific request for the specified resource with authentication details will be granted or not."}]}, {"index": "386", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/pkey/PublicKeyStore.java", "methodName": "com.yahoo.athenz.zpe.pkey.PublicKeyStore.getZtsKey", "methodParameterType": "String#", "methodParameterName": "keyId#", "methodBody": "PublicKey getZtsKey(String keyId);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the ZTS PublicKey object for the given identifier", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "387", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/pkey/PublicKeyStore.java", "methodName": "com.yahoo.athenz.zpe.pkey.PublicKeyStore.getZmsKey", "methodParameterType": "String#", "methodParameterName": "keyId#", "methodBody": "PublicKey getZmsKey(String keyId);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Returns the ZMS PublicKey object for the given identifier", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "388", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/pkey/PublicKeyStoreFactory.java", "methodName": "com.yahoo.athenz.zpe.pkey.PublicKeyStoreFactory.create", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "PublicKeyStore create();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Create and return a new PublicKeyStore instance", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "389", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/ZpeUpdPolLoader.java", "methodName": "com.yahoo.athenz.zpe.ZpeUpdPolLoader.loadDb", "methodParameterType": "File[]#", "methodParameterName": "polFileNames#", "methodBody": "void loadDb(File []polFileNames) {\n        if (polFileNames == null) {\n            LOG.error(\"loadDb: no policy files to load\");\n            return;\n        }\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"loadDb: START thrd={} directory={}\", Thread.currentThread().getId(), polDirName);\n        }\n        for (File polFile: polFileNames) {\n            \n            String fileName = polFile.getName();\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"loadDb: START thrd={} file name={}\", Thread.currentThread().getId(), fileName);\n            }\n            long lastModMilliSeconds = polFile.lastModified();\n            Map<String, ZpeFileStatus> fsmap = getFileStatusMap();\n            ZpeFileStatus fstat = fsmap.get(fileName);\n            if (fstat != null) {\n                \n                if (!polFile.exists()) { // file was deleted\n                    if (LOG.isDebugEnabled()) {\n                        LOG.debug(\"loadDb: file({}) was deleted or doesn't exist\", fileName);\n                    }\n                    fsmap.remove(fileName);\n                    \n                    if (!fstat.validPolFile || fstat.domain == null) {\n                        continue;\n                    }\n\n                    // replace domain with empty data\n                    //\n                    domStandardRoleAllowMap.put(fstat.domain, new TreeMap<>());\n                    domWildcardRoleAllowMap.put(fstat.domain, new TreeMap<>());\n                    domStandardRoleDenyMap.put(fstat.domain, new TreeMap<>());\n                    domWildcardRoleDenyMap.put(fstat.domain, new TreeMap<>());\n                    continue;\n                }\n                \n                // check if file was modified since last time it was loaded\n                //\n                if (lastModMilliSeconds <= fstat.modifyTimeMillis) {\n                    // if valid and up to date return\n                    // if not valid, may be due to timing issue for a new\n                    // file not completely written - and file system timestamp\n                    // only accurate up to the second - not millis\n                    String timeMsg = \" last-file-mod-time=\" + lastModMilliSeconds;\n                    if (fstat.validPolFile) {\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"loadDb: ignore reload file: {} since up to date: {}\", fileName, timeMsg);\n                        }\n                        continue;\n                    } else if (LOG.isDebugEnabled()) {\n                        LOG.debug(\"loadDb: retry load file: {} since last load was bad: {}\", fileName, timeMsg);\n                    }\n            \n                }\n            } else {\n                fstat = new ZpeFileStatus(fileName, lastModMilliSeconds);\n                fsmap.put(fileName, fstat);\n            }\n            loadFile(polFile);\n        }\n    }", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#PrefixExpression#SimpleName#SimpleName#QualifiedName#NullLiteral#InfixExpression#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#MethodInvocation#ExpressionStatement#ContinueStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#ContinueStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(PrefixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)PrefixExpression(InfixExpression(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)MethodInvocation)ExpressionStatement(ContinueStatement)ContinueStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ContinueStatement)ContinueStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Process the given policy file list and determine if any of the policy domain files have been updated. New ones will be loaded into the policy domain map.", "call_func_name": ["org.slf4j.Logger.error", "org.slf4j.Logger.isDebugEnabled", "java.lang.Thread.currentThread", "java.lang.Thread.getId", "java.lang.Long.valueOf", "org.slf4j.Logger.debug", "java.io.File.getName", "java.io.File.lastModified", "com.yahoo.athenz.zpe.ZpeUpdPolLoader.getFileStatusMap", "java.util.Map.get", "java.io.File.exists", "org.slf4j.Logger.debug", "java.util.Map.remove", "java.util.TreeMap.<init>", "java.util.concurrent.ConcurrentHashMap.put", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.Map.put", "com.yahoo.athenz.zpe.ZpeUpdPolLoader.loadFile"], "call_func_parameter": [["java.lang.String"], [""], [""], [""], ["long"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.Object"], [""], ["java.lang.Object", "java.lang.Object"], [""], ["java.lang.String"], ["long"], [""], ["java.lang.Object", "java.lang.Object"], ["java.io.File"]], "passed_comments": [{"com.yahoo.athenz.zpe.ZpeUpdPolLoader.loadFile": "Loads and parses the given file. It will create the domain assertion list per role and put it into the domain policy maps(domRoleMap, domWildcardRoleMap)."}]}, {"index": "390", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/ZpeUpdPolLoader.java", "methodName": "com.yahoo.athenz.zpe.ZpeUpdPolLoader.loadFile", "methodParameterType": "File#", "methodParameterName": "polFile#", "methodBody": "private void loadFile(File polFile) {\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"loadFile: file({})\", polFile.getName());\n        }\n        \n        Path path = Paths.get(polDirName + File.separator + polFile.getName());\n        DomainSignedPolicyData spols = null;\n        try {\n            spols = JSON.fromBytes(Files.readAllBytes(path), DomainSignedPolicyData.class);\n        } catch (Exception ex) {\n            LOG.error(\"loadFile: unable to decode policy file={} error: {}\", polFile.getName(), ex);\n        }\n        if (spols == null) {\n            LOG.error(\"loadFile: unable to decode domain file={}\", polFile.getName());\n            // mark this as an invalid file\n            Map<String, ZpeFileStatus> fsmap = getFileStatusMap();\n            ZpeFileStatus fstat = fsmap.get(polFile.getName());\n            if (fstat != null) {\n                fstat.validPolFile = false;\n            }\n            return;\n        }\n        \n        SignedPolicyData signedPolicyData = spols.getSignedPolicyData();\n        String signature = spols.getSignature();\n        String keyId = spols.getKeyId();\n        \n        // first let's verify the ZTS signature for our policy file\n        \n        boolean verified = false;\n        if (signedPolicyData != null) {\n            java.security.PublicKey pubKey = AuthZpeClient.getZtsPublicKey(keyId);\n            if (pubKey == null) {\n                LOG.error(\"loadFile: unable to fetch zts public key for id: {}\", keyId);\n            } else {\n                verified = Crypto.verify(SignUtils.asCanonicalString(signedPolicyData), pubKey, signature);\n            }\n        }\n        \n        PolicyData policyData = null;\n        if (verified) {\n            // now let's verify that the ZMS signature for our policy file\n            policyData = signedPolicyData.getPolicyData();\n            signature = signedPolicyData.getZmsSignature();\n            keyId = signedPolicyData.getZmsKeyId();\n            \n            if (policyData != null) {\n                java.security.PublicKey pubKey = AuthZpeClient.getZmsPublicKey(keyId);\n                if (pubKey == null) {\n                    LOG.error(\"loadFile: unable to fetch zms public key for id: {}\", keyId);\n                } else {\n                    verified = Crypto.verify(SignUtils.asCanonicalString(policyData), pubKey, signature);\n                }\n            }\n        }\n        \n         if (!verified || policyData == null) {\n             LOG.error(\"loadFile: policy file={} is invalid\", polFile.getName());\n             // mark this as an invalid file\n             Map<String, ZpeFileStatus> fsmap = getFileStatusMap();\n             ZpeFileStatus fstat = fsmap.get(polFile.getName());\n             if (fstat != null) {\n                 fstat.validPolFile = false;\n             }\n             return;\n         }\n         \n        // HAVE: valid policy file\n        \n        String domainName = policyData.getDomain();\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"loadFile: policy file({}) for domain({}) is valid\", polFile.getName(), domainName);\n        }\n        \n        // Process the policies into assertions, process the assertions: action, resource, role\n        // If there is a wildcard in the action or resource, compile the\n        // regexpr and place it into the assertion Struct.\n        // This is a performance enhancement for AuthZpeClient when it \n        // performs the authorization checks.\n        Map<String, List<Struct>> roleStandardAllowMap = new TreeMap<>();\n        Map<String, List<Struct>> roleWildcardAllowMap = new TreeMap<>();\n        Map<String, List<Struct>> roleStandardDenyMap  = new TreeMap<>();\n        Map<String, List<Struct>> roleWildcardDenyMap  = new TreeMap<>();\n        List<Policy> policies = policyData.getPolicies();\n        for (Policy policy : policies) {\n            String pname = policy.getName();\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"loadFile: domain([}) policy({})\", domainName, pname);\n            }\n            List<Assertion> assertions = policy.getAssertions();\n            if (assertions == null) {\n                continue;\n            }\n            for (Assertion assertion : assertions) {\n                com.yahoo.rdl.Struct strAssert = new Struct();\n                strAssert.put(ZpeConsts.ZPE_FIELD_POLICY_NAME, pname);\n                \n                String passertAction = assertion.getAction();\n                ZpeMatch matchStruct = getMatchObject(passertAction);\n                strAssert.put(ZpeConsts.ZPE_ACTION_MATCH_STRUCT, matchStruct);\n                \n                String passertResource = assertion.getResource();\n                String rsrc = AuthZpeClient.stripDomainPrefix(passertResource, domainName, passertResource);\n                strAssert.put(ZpeConsts.ZPE_FIELD_RESOURCE, rsrc);\n                matchStruct = getMatchObject(rsrc);\n                strAssert.put(ZpeConsts.ZPE_RESOURCE_MATCH_STRUCT, matchStruct);\n\n                String passertRole = assertion.getRole();\n                String pRoleName = AuthZpeClient.stripDomainPrefix(passertRole, domainName, passertRole);\n                // strip the prefix \"role.\" too\n                pRoleName = pRoleName.replaceFirst(\"^role.\", \"\");\n                strAssert.put(ZpeConsts.ZPE_FIELD_ROLE, pRoleName);\n                \n                // based on the effect and role name determine what\n                // map we're going to use\n                \n                Map<String, List<Struct>> roleMap;\n                AssertionEffect passertEffect = assertion.getEffect();\n                matchStruct = getMatchObject(pRoleName);\n                strAssert.put(ZpeConsts.ZPE_ROLE_MATCH_STRUCT, matchStruct);\n                \n                if (passertEffect != null && passertEffect.toString().compareTo(\"DENY\") == 0) {\n                    if (matchStruct instanceof ZpeMatchEqual) {\n                        roleMap = roleStandardDenyMap;\n                    } else {\n                        roleMap = roleWildcardDenyMap;\n                    }\n                } else {\n                    if (matchStruct instanceof ZpeMatchEqual) {\n                        roleMap = roleStandardAllowMap;\n                    } else {\n                        roleMap = roleWildcardAllowMap;\n                    }\n                }\n\n                List<Struct> assertList = roleMap.computeIfAbsent(pRoleName, k -> new ArrayList<>());\n                assertList.add(strAssert);\n            }\n        }\n \n        Map<String, ZpeFileStatus> fsmap = getFileStatusMap();\n        ZpeFileStatus fstat = fsmap.get(polFile.getName());\n        if (fstat != null) {\n            fstat.validPolFile = true;\n            fstat.domain = domainName;\n        }\n        \n        domStandardRoleAllowMap.put(domainName, roleStandardAllowMap);\n        domWildcardRoleAllowMap.put(domainName, roleWildcardAllowMap);\n        domStandardRoleDenyMap.put(domainName, roleStandardDenyMap);\n        domWildcardRoleDenyMap.put(domainName, roleWildcardDenyMap);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#TypeLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#Block#IfStatement#SimpleName#PrefixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#Block#IfStatement#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#ContinueStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#LambdaExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#EnhancedForStatement#Block#EnhancedForStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#QualifiedName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral)MethodInvocation)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement)Block)IfStatement(IfStatement(InfixExpression(PrefixExpression(SimpleName)SimpleName)PrefixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ContinueStatement)ContinueStatement)Block)IfStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)LambdaExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)EnhancedForStatement)Block)EnhancedForStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Loads and parses the given file. It will create the domain assertion list per role and put it into the domain policy maps(domRoleMap, domWildcardRoleMap).", "call_func_name": ["org.slf4j.Logger.isDebugEnabled", "java.io.File.getName", "org.slf4j.Logger.debug", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.nio.file.Paths.get", "java.nio.file.Files.readAllBytes", "com.yahoo.rdl.JSON.fromBytes", "org.slf4j.Logger.error", "org.slf4j.Logger.error", "com.yahoo.athenz.zpe.ZpeUpdPolLoader.getFileStatusMap", "java.util.Map.get", "com.yahoo.athenz.zts.DomainSignedPolicyData.getSignedPolicyData", "com.yahoo.athenz.zts.DomainSignedPolicyData.getSignature", "com.yahoo.athenz.zts.DomainSignedPolicyData.getKeyId", "com.yahoo.athenz.zpe.AuthZpeClient.getZtsPublicKey", "com.yahoo.athenz.common.utils.SignUtils.asCanonicalString", "com.yahoo.athenz.auth.util.Crypto.verify", "com.yahoo.athenz.zts.SignedPolicyData.getPolicyData", "com.yahoo.athenz.zts.SignedPolicyData.getZmsSignature", "com.yahoo.athenz.zts.SignedPolicyData.getZmsKeyId", "com.yahoo.athenz.zpe.AuthZpeClient.getZmsPublicKey", "com.yahoo.athenz.common.utils.SignUtils.asCanonicalString", "com.yahoo.athenz.zts.PolicyData.getDomain", "org.slf4j.Logger.debug", "java.util.TreeMap.<init>", "com.yahoo.athenz.zts.PolicyData.getPolicies", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "com.yahoo.athenz.zts.Policy.getName", "com.yahoo.athenz.zts.Policy.getAssertions", "com.yahoo.rdl.Struct.<init>", "com.yahoo.rdl.Struct.put", "com.yahoo.athenz.zts.Assertion.getAction", "com.yahoo.athenz.zpe.ZpeUpdPolLoader.getMatchObject", "com.yahoo.athenz.zts.Assertion.getResource", "com.yahoo.athenz.zpe.AuthZpeClient.stripDomainPrefix", "com.yahoo.athenz.zts.Assertion.getRole", "java.lang.String.replaceFirst", "com.yahoo.athenz.zts.Assertion.getEffect", "com.yahoo.athenz.zts.AssertionEffect.toString", "java.lang.String.compareTo", "java.util.function.Function.apply", "java.util.Map.computeIfAbsent", "java.util.List.add", "java.util.concurrent.ConcurrentHashMap.put"], "call_func_parameter": [[""], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String[]"], ["java.nio.file.Path"], ["byte[]", "java.lang.Class"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.Object"], [""], [""], [""], ["java.lang.String"], ["com.yahoo.athenz.zts.SignedPolicyData"], ["java.lang.String", "java.security.PublicKey", "java.lang.String"], [""], [""], [""], ["java.lang.String"], ["com.yahoo.athenz.zts.PolicyData"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], [""], [""], [""], [""], [""], [""], ["java.lang.String", "java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], [""], ["java.lang.String", "java.lang.String"], [""], [""], ["java.lang.String"], [""], ["java.lang.Object", "java.util.function.Function"], ["java.lang.Object"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": [{"com.yahoo.athenz.auth.util.Crypto.verify": "Verify the signed data with SHA-256 and private key against the ybase64 encoded signature."}]}, {"index": "391", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.setTokenAllowedOffset", "methodParameterType": "int#", "methodParameterName": "offset#", "methodBody": "public static void setTokenAllowedOffset(int offset) {\n        \n        allowedOffset = offset;\n        \n        // case of invalid value, we'll default back to 5 minutes\n\n        if (allowedOffset < 0) {\n            allowedOffset = 300;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Set the role token allowed offset. this might be necessary if the client and server are not ntp synchronized and we don't want the server to reject valid role tokens", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "392", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.setX509CAIssuers", "methodParameterType": "String#", "methodParameterName": "issuers#", "methodBody": "public static void setX509CAIssuers(final String issuers) {\n\n        if (issuers == null || issuers.isEmpty()) {\n            return;\n        }\n        \n        String[] issuerArray = issuers.split(\"\\\\|\");\n        for (String issuer : issuerArray) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"x509 issuer: {}\", issuer);\n            }\n            X509_ISSUERS_NAMES.add(issuer.replaceAll(\"\\\\s+\", \"\"));\n            try {\n                X509_ISSUERS_RDNS.add(new LdapName(issuer).getRdns());\n            } catch (InvalidNameException ex) {\n                LOG.error(\"Invalid issuer: {}, error: {}\", issuer, ex.getMessage());\n            }\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#StringLiteral#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#EnhancedForStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ReturnStatement)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)MethodInvocation)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)EnhancedForStatement)Block)MethodDeclaration", "methodDoc": "Set the list of Athenz CA issuers with their full DNs that ZPE should honor.", "call_func_name": ["java.lang.String.isEmpty", "java.lang.String.split", "org.slf4j.Logger.isDebugEnabled", "org.slf4j.Logger.debug", "java.lang.String.replaceAll", "java.util.Set.add", "javax.naming.ldap.LdapName.<init>", "javax.naming.ldap.LdapName.getRdns", "java.util.List.add", "javax.naming.InvalidNameException.getMessage", "org.slf4j.Logger.error"], "call_func_parameter": [[""], ["java.lang.String"], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.Object"], [""], ["java.lang.String", "java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "393", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.setPublicKeyStoreFactoryClass", "methodParameterType": "String#", "methodParameterName": "className#", "methodBody": "public static void setPublicKeyStoreFactoryClass(final String className) {\n        \n        PublicKeyStoreFactory publicKeyStoreFactory;\n        try {\n            publicKeyStoreFactory = (PublicKeyStoreFactory) Class.forName(className).newInstance();\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {\n            LOG.error(\"Invalid PublicKeyStore class: \" + className\n                    + \", error: \" + ex.getMessage());\n            throw new RuntimeException(ex);\n        }\n        publicKeyStore = publicKeyStoreFactory.create();\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the com.yahoo.athenz.zpe.pkey.PublicKeyStoreFactory interface implementation class. This factory will be used to create the PublicKeyStore object that the ZPE library will use to retrieve the ZMS and ZTS public keys to validate the policy files and role tokens.", "call_func_name": ["java.lang.Class.forName", "java.lang.Class.newInstance", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.ReflectiveOperationException.getMessage", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error", "java.lang.RuntimeException.<init>", "com.yahoo.athenz.zpe.pkey.PublicKeyStoreFactory.create"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Throwable"], [""]], "passed_comments": [{"com.yahoo.athenz.zpe.pkey.PublicKeyStoreFactory.create": "Create and return a new PublicKeyStore instance"}]}, {"index": "394", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.setAccessTokenSignKeyResolver", "methodParameterType": "String#SSLContext#", "methodParameterName": "serverUrl#sslContext#", "methodBody": "public static void setAccessTokenSignKeyResolver(final String serverUrl, SSLContext sslContext) {\n        accessSignKeyResolver = new JwtsSigningKeyResolver(serverUrl, sslContext);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the server connection details for the sign key resolver for access tokens. By default, the resolver is looking for the \"athenz.athenz_conf\" system property, parses the athenz.conf file and loads any public keys defined. The caller can also specify the server URL and the sslcontext (if required) for the resolver to call and fetch the public keys that will be required to verify the token signatures", "call_func_name": ["com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver.<init>"], "call_func_parameter": [["java.lang.String", "javax.net.ssl.SSLContext"]], "passed_comments": "/"}, {"index": "395", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.addAccessTokenSignKeyResolverKey", "methodParameterType": "String#PublicKey#", "methodParameterName": "keyId#key#", "methodBody": "public static void addAccessTokenSignKeyResolverKey(final String keyId, PublicKey key) {\n        accessSignKeyResolver.addPublicKey(keyId, key);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Include the specified public key and id in the access token signing resolver", "call_func_name": ["com.yahoo.athenz.auth.token.jwts.JwtsSigningKeyResolver.addPublicKey"], "call_func_parameter": [["java.lang.String", "java.security.PublicKey"]], "passed_comments": "/"}, {"index": "396", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.setZPEClientClass", "methodParameterType": "String#", "methodParameterName": "className#", "methodBody": "public static void setZPEClientClass(final String className) {\n        \n        zpeClientImplName = className;\n        try {\n            zpeClt = (ZpeClient) Class.forName(zpeClientImplName).newInstance();\n        } catch (InstantiationException | IllegalAccessException | ClassNotFoundException ex) {\n            LOG.error(\"Unable to instantiate zpe class: \" + zpeClientImplName\n                    + \", error: \" + ex.getMessage());\n            throw new RuntimeException(ex);\n        }\n        zpeClt.init(null);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#UnionType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(TryStatement(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)CastExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(UnionType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)UnionType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)ExpressionStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the ZPE Client implementation class name in case the default ZPE client is not sufficient for some reason.", "call_func_name": ["java.lang.Class.forName", "java.lang.Class.newInstance", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.ReflectiveOperationException.getMessage", "java.lang.StringBuilder.toString", "org.slf4j.Logger.error", "java.lang.RuntimeException.<init>", "com.yahoo.athenz.zpe.ZpeClient.init"], "call_func_parameter": [["java.lang.String"], [""], [""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.lang.Throwable"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "397", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "X509Certificate#String#String#", "methodParameterName": "cert#resource#action#", "methodBody": "public static AccessCheckStatus allowAccess(X509Certificate cert, String resource, String action) {\n        StringBuilder matchRoleName = new StringBuilder(256);\n        return allowAccess(cert, resource, action, matchRoleName);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the X509Certificate", "call_func_name": ["java.lang.StringBuilder.<init>", "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess"], "call_func_parameter": [["int"], ["java.security.cert.X509Certificate", "java.lang.String", "java.lang.String", "java.lang.StringBuilder"]], "passed_comments": [{"com.yahoo.athenz.zpe.AuthZpeClient.allowAccess": "Determine if access(action) is allowed against the specified resource by a user represented by the X509Certificate"}]}, {"index": "398", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "X509Certificate#String#String#StringBuilder#", "methodParameterName": "cert#resource#action#matchRoleName#", "methodBody": "public static AccessCheckStatus allowAccess(X509Certificate cert, String resource, String action,\n            StringBuilder matchRoleName) {\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"allowAccess: action={} resource={}\", action, resource);\n        }\n        zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME, DEFAULT_DOMAIN);\n\n        // validate the certificate against CAs if the feature\n        // is configured. if the caller does not specify any\n        // issuers we're not going to make any checks\n\n        if (!certIssuerMatch(cert)) {\n            return AccessCheckStatus.DENY_CERT_MISMATCH_ISSUER;\n        }\n\n        String subject = Crypto.extractX509CertCommonName(cert);\n        if (subject == null || subject.isEmpty()) {\n            LOG.error(\"allowAccess: missing subject in x.509 certificate\");\n            return AccessCheckStatus.DENY_CERT_MISSING_SUBJECT;\n        }\n\n        int idx = subject.indexOf(ROLE_SEARCH);\n        if (idx == -1) {\n            LOG.error(\"allowAccess: invalid role format in x.509 subject: {}\", subject);\n            return AccessCheckStatus.DENY_CERT_MISSING_ROLE_NAME;\n        }\n\n        String domainName = subject.substring(0, idx);\n        if (domainName.isEmpty()) {\n            LOG.error(\"allowAccess: missing domain in x.509 subject: {}\", subject);\n            return AccessCheckStatus.DENY_CERT_MISSING_DOMAIN;\n        }\n\n        String roleName = subject.substring(idx + ROLE_SEARCH.length());\n        if (roleName.isEmpty()) {\n            LOG.error(\"allowAccess: missing role in x.509 subject: {}\", subject);\n            return AccessCheckStatus.DENY_CERT_MISSING_ROLE_NAME;\n        }\n\n        List<String> roles = new ArrayList<>();\n        roles.add(roleName);\n        return allowActionZPE(action, domainName, resource, roles, matchRoleName);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the X509Certificate", "call_func_name": ["org.slf4j.Logger.isDebugEnabled", "org.slf4j.Logger.debug", "com.yahoo.athenz.zpe.ZpeMetric.increment", "com.yahoo.athenz.zpe.AuthZpeClient.certIssuerMatch", "com.yahoo.athenz.auth.util.Crypto.extractX509CertCommonName", "java.lang.String.isEmpty", "org.slf4j.Logger.error", "java.lang.String.indexOf", "org.slf4j.Logger.error", "java.lang.String.substring", "java.lang.String.length", "java.lang.String.substring", "java.util.ArrayList.<init>", "java.util.List.add", "com.yahoo.athenz.zpe.AuthZpeClient.allowActionZPE"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.security.cert.X509Certificate"], ["java.security.cert.X509Certificate"], [""], ["java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.Object"], ["int", "int"], [""], ["int"], [""], ["java.lang.Object"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.util.List", "java.lang.StringBuilder"]], "passed_comments": [{"com.yahoo.athenz.zpe.AuthZpeClient.allowActionZPE": "Determine if access(action) is allowed against the specified resource by a user represented by the given roles. The expected method for authorization check is the allowAccess methods. However, if the client is responsible for validating the role token (including expiration check), it may use this method directly by just specifying the tokenDomain and roles arguments which are directly extracted from the role token."}]}, {"index": "399", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "String#String#String#", "methodParameterName": "token#resource#action#", "methodBody": "public static AccessCheckStatus allowAccess(String token, String resource, String action) {\n        StringBuilder matchRoleName = new StringBuilder(256);\n        return allowAccess(token, null, null, resource, action, matchRoleName);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the user (cltToken, cltTokenName).", "call_func_name": ["java.lang.StringBuilder.<init>", "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess"], "call_func_parameter": [["int"], ["java.lang.String", "java.security.cert.X509Certificate", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.StringBuilder"]], "passed_comments": [{"com.yahoo.athenz.zpe.AuthZpeClient.allowAccess": "Determine if access(action) is allowed against the specified resource by a user represented by the user (cltToken, cltTokenName)."}]}, {"index": "400", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "String#String#String#StringBuilder#", "methodParameterName": "token#resource#action#matchRoleName#", "methodBody": "public static AccessCheckStatus allowAccess(String token, String resource, String action,\n            StringBuilder matchRoleName) {\n        return allowAccess(token, null, null, resource, action, matchRoleName);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NullLiteral#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the user (cltToken, cltTokenName).", "call_func_name": ["com.yahoo.athenz.zpe.AuthZpeClient.allowAccess"], "call_func_parameter": [["java.lang.String", "java.security.cert.X509Certificate", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.StringBuilder"]], "passed_comments": [{"com.yahoo.athenz.zpe.AuthZpeClient.allowAccess": "Determine if access(action) is allowed against the specified resource by a user represented by the user (cltToken, cltTokenName)."}]}, {"index": "401", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "String#X509Certificate#String#String#String#StringBuilder#", "methodParameterName": "token#cert#certHash#resource#action#matchRoleName#", "methodBody": "public static AccessCheckStatus allowAccess(String token, X509Certificate cert, String certHash,\n            String resource, String action, StringBuilder matchRoleName) {\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"allowAccess: action={} resource={}\", action, resource);\n        }\n        zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME, DEFAULT_DOMAIN);\n\n        // check if we're given role or access token\n\n        if (token.startsWith(\"v=Z1;\")) {\n            return allowRoleTokenAccess(token, resource, action, matchRoleName);\n        } else {\n            return allowAccessTokenAccess(token, cert, certHash, resource, action, matchRoleName);\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the user (cltToken, cltTokenName).", "call_func_name": ["org.slf4j.Logger.isDebugEnabled", "org.slf4j.Logger.debug", "com.yahoo.athenz.zpe.ZpeMetric.increment", "java.lang.String.startsWith", "com.yahoo.athenz.zpe.AuthZpeClient.allowRoleTokenAccess", "com.yahoo.athenz.zpe.AuthZpeClient.allowAccessTokenAccess"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String", "java.lang.String"], ["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.StringBuilder"], ["java.lang.String", "java.security.cert.X509Certificate", "java.lang.String", "java.lang.String", "java.lang.String", "java.lang.StringBuilder"]], "passed_comments": "/"}, {"index": "402", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "RoleToken#String#String#StringBuilder#", "methodParameterName": "rToken#resource#action#matchRoleName#", "methodBody": "public static AccessCheckStatus allowAccess(RoleToken rToken, String resource, String action,\n            StringBuilder matchRoleName) {\n        \n        // check the token expiration\n\n        if (rToken == null) {\n            LOG.error(\"allowAccess: Authorization denied. Token is null\");\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_INVALID_TOKEN, UNKNOWN_DOMAIN);\n            return AccessCheckStatus.DENY_ROLETOKEN_INVALID;\n        }\n\n        if (isTokenExpired(rToken)) {\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_EXPIRED_TOKEN, rToken.getDomain());\n            return AccessCheckStatus.DENY_ROLETOKEN_EXPIRED;\n        }\n\n        String tokenDomain = rToken.getDomain(); // ZToken contains the domain\n        List<String> roles = rToken.getRoles();  // ZToken contains roles\n\n        return allowActionZPE(action, tokenDomain, resource, roles, matchRoleName);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the RoleToken.", "call_func_name": ["org.slf4j.Logger.error", "com.yahoo.athenz.zpe.ZpeMetric.increment", "com.yahoo.athenz.zpe.AuthZpeClient.isTokenExpired", "com.yahoo.athenz.auth.token.RoleToken.getDomain", "com.yahoo.athenz.auth.token.RoleToken.getRoles", "com.yahoo.athenz.zpe.AuthZpeClient.allowActionZPE"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], ["com.yahoo.athenz.auth.token.RoleToken"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.util.List", "java.lang.StringBuilder"]], "passed_comments": [{"com.yahoo.athenz.zpe.AuthZpeClient.allowActionZPE": "Determine if access(action) is allowed against the specified resource by a user represented by the given roles. The expected method for authorization check is the allowAccess methods. However, if the client is responsible for validating the role token (including expiration check), it may use this method directly by just specifying the tokenDomain and roles arguments which are directly extracted from the role token."}]}, {"index": "403", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "AccessToken#String#String#StringBuilder#", "methodParameterName": "accessToken#resource#action#matchRoleName#", "methodBody": "public static AccessCheckStatus allowAccess(AccessToken accessToken, String resource, String action,\n            StringBuilder matchRoleName) {\n\n        // check the token expiration\n\n        if (accessToken == null) {\n            LOG.error(\"allowAccess: Authorization denied. Token is null\");\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_INVALID_TOKEN, UNKNOWN_DOMAIN);\n            return AccessCheckStatus.DENY_ROLETOKEN_INVALID;\n        }\n\n        if (isTokenExpired(accessToken)) {\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_EXPIRED_TOKEN, accessToken.getAudience());\n            return AccessCheckStatus.DENY_ROLETOKEN_EXPIRED;\n        }\n\n        String tokenDomain = accessToken.getAudience();\n        List<String> roles = accessToken.getScope();\n\n        return allowActionZPE(action, tokenDomain, resource, roles, matchRoleName);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the AccessToken.", "call_func_name": ["org.slf4j.Logger.error", "com.yahoo.athenz.zpe.ZpeMetric.increment", "com.yahoo.athenz.zpe.AuthZpeClient.isTokenExpired", "com.yahoo.athenz.auth.token.AccessToken.getAudience", "com.yahoo.athenz.auth.token.AccessToken.getScope", "com.yahoo.athenz.zpe.AuthZpeClient.allowActionZPE"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.lang.String"], ["com.yahoo.athenz.auth.token.AccessToken"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.util.List", "java.lang.StringBuilder"]], "passed_comments": [{"com.yahoo.athenz.zpe.AuthZpeClient.allowActionZPE": "Determine if access(action) is allowed against the specified resource by a user represented by the given roles. The expected method for authorization check is the allowAccess methods. However, if the client is responsible for validating the role token (including expiration check), it may use this method directly by just specifying the tokenDomain and roles arguments which are directly extracted from the role token."}]}, {"index": "404", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "methodParameterType": "List<String>#String#String#StringBuilder#", "methodParameterName": "tokenList#resource#action#matchRoleName#", "methodBody": "public static AccessCheckStatus allowAccess(List<String> tokenList,\n            String resource, String action, StringBuilder matchRoleName) {\n\n        AccessCheckStatus retStatus = AccessCheckStatus.DENY_NO_MATCH;\n        StringBuilder roleName = null;\n\n        for (String roleToken: tokenList) {\n            StringBuilder rName = new StringBuilder(256);\n            AccessCheckStatus status = allowAccess(roleToken, resource, action, rName);\n            if (status == AccessCheckStatus.DENY) {\n                matchRoleName.append(rName);\n                return status;\n            } else if (retStatus != AccessCheckStatus.ALLOW) { // only DENY over-rides ALLOW\n                retStatus = status;\n                roleName = rName;\n            }\n        }\n\n        if (roleName != null) {\n            matchRoleName.append(roleName.toString());\n        }\n\n        return retStatus;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NumberLiteral#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NumberLiteral)NumberLiteral)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the list of role tokens.", "call_func_name": ["java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.StringBuilder.<init>", "com.yahoo.athenz.zpe.AuthZpeClient.allowAccess", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.lang.StringBuilder.append"], "call_func_parameter": [[""], [""], [""], ["int"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.lang.StringBuilder"], ["java.lang.CharSequence"], [""], ["java.lang.String"]], "passed_comments": [{"com.yahoo.athenz.zpe.AuthZpeClient.allowAccess": "Determine if access(action) is allowed against the specified resource by a user represented by the user (cltToken, cltTokenName)."}, {"com.yahoo.athenz.zpe.AuthZpeClient.allowAccess": "Determine if access(action) is allowed against the specified resource by a user represented by the list of role tokens."}]}, {"index": "405", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.validateRoleToken", "methodParameterType": "String#", "methodParameterName": "roleToken#", "methodBody": "public static RoleToken validateRoleToken(String roleToken) {\n\n        // first check in our cache in case we have already seen and successfully\n        // validated this role token (signature validation is expensive)\n        \n        Map<String, RoleToken> tokenCache = zpeClt.getRoleTokenCacheMap();\n        RoleToken rToken = tokenCache.get(roleToken);\n\n        if (rToken != null && isTokenExpired(rToken)) {\n            tokenCache.remove(roleToken);\n            rToken = null;\n        }\n\n        // if the token is not in the cache then we need to\n        // validate the token now\n        \n        if (rToken == null) {\n            rToken = new RoleToken(roleToken);\n            \n            // validate the token\n            \n            if (!rToken.validate(getZtsPublicKey(rToken.getKeyId()), allowedOffset, false, null)) {\n                return null;\n            }\n            tokenCache.put(roleToken, rToken);\n        }\n        \n        return rToken;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#BooleanLiteral#NullLiteral#MethodInvocation#PrefixExpression#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral)MethodInvocation)PrefixExpression(Block(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Validate the RoleToken and return the parsed token object that could be used to extract all fields from the role token. If the role token is invalid, then null object is returned.", "call_func_name": ["com.yahoo.athenz.zpe.ZpeClient.getRoleTokenCacheMap", "java.util.Map.get", "com.yahoo.athenz.zpe.AuthZpeClient.isTokenExpired", "java.util.Map.remove", "com.yahoo.athenz.auth.token.RoleToken.<init>", "com.yahoo.athenz.auth.token.RoleToken.getKeyId", "com.yahoo.athenz.zpe.AuthZpeClient.getZtsPublicKey", "com.yahoo.athenz.auth.token.RoleToken.validate", "java.util.Map.put"], "call_func_parameter": [[""], ["java.lang.Object"], ["com.yahoo.athenz.auth.token.RoleToken"], ["java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String"], ["java.security.PublicKey", "int", "boolean", "java.lang.StringBuilder"], ["java.lang.Object", "java.lang.Object"]], "passed_comments": "/"}, {"index": "406", "file": "/root/repos/repos24/athenz/clients/java/zpe/src/main/java/com/yahoo/athenz/zpe/AuthZpeClient.java", "methodName": "com.yahoo.athenz.zpe.AuthZpeClient.allowActionZPE", "methodParameterType": "String#String#String#List<String>#StringBuilder#", "methodParameterName": "action#tokenDomain#resource#roles#matchRoleName#", "methodBody": "public static AccessCheckStatus allowActionZPE(String action, String tokenDomain, String resource,\n            List<String> roles, StringBuilder matchRoleName) {\n\n        final String msgPrefix = \"allowActionZPE: domain(\" + tokenDomain + \") action(\" + action +\n                \") resource(\" + resource + \")\";\n\n        if (roles == null || roles.size() == 0) {\n            LOG.error(\"{} ERROR: No roles so access denied\", msgPrefix);\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_INVALID_TOKEN, tokenDomain);\n            return AccessCheckStatus.DENY_ROLETOKEN_INVALID;\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"{} roles({}) starting...\", msgPrefix, String.join(\",\", roles));\n        }\n\n        if (tokenDomain == null || tokenDomain.isEmpty()) {\n            LOG.error(\"{} ERROR: No domain so access denied\", msgPrefix);\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_INVALID_TOKEN, DEFAULT_DOMAIN);\n            return AccessCheckStatus.DENY_ROLETOKEN_INVALID;\n        }\n\n        if (action == null || action.isEmpty()) {\n            LOG.error(\"{} ERROR: No action so access denied\", msgPrefix);\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_ERROR, tokenDomain);\n            return AccessCheckStatus.DENY_INVALID_PARAMETERS;\n        }\n        action = action.toLowerCase();\n\n        if (resource == null || resource.isEmpty()) {\n            LOG.error(\"{} ERROR: No resource so access denied\", msgPrefix);\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_ERROR, tokenDomain);\n            return AccessCheckStatus.DENY_INVALID_PARAMETERS;\n        }\n        resource = resource.toLowerCase();\n        resource = stripDomainPrefix(resource, tokenDomain, null);\n\n        // Note: if domain in token doesn't match domain in resource then there\n        // will be no match of any resource in the assertions - so deny immediately\n\n        if (resource == null) {\n            LOG.error(\"{} ERROR: Domain mismatch in token({}) and resource so access denied\",\n                    msgPrefix, tokenDomain);\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_DOMAIN_MISMATCH, tokenDomain);\n            return AccessCheckStatus.DENY_DOMAIN_MISMATCH;\n        }\n\n        // first hunt by role for deny assertions since deny takes precedence\n        // over allow assertions\n\n        AccessCheckStatus status = AccessCheckStatus.DENY_DOMAIN_NOT_FOUND;\n        Map<String, List<Struct>> roleMap = zpeClt.getRoleDenyAssertions(tokenDomain);\n        if (roleMap != null && !roleMap.isEmpty()) {\n            if (actionByRole(action, tokenDomain, resource, roles, roleMap, matchRoleName)) {\n                zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_DENY, tokenDomain);\n                return AccessCheckStatus.DENY;\n            } else {\n                status = AccessCheckStatus.DENY_NO_MATCH;\n            }\n        } else if (roleMap != null) {\n            status = AccessCheckStatus.DENY_DOMAIN_EMPTY;\n        }\n        \n        // if the check was not explicitly denied by a standard role, then\n        // let's process our wildcard roles for deny assertions\n        \n        roleMap = zpeClt.getWildcardDenyAssertions(tokenDomain);\n        if (roleMap != null && !roleMap.isEmpty()) {\n            if (actionByWildCardRole(action, tokenDomain, resource, roles, roleMap, matchRoleName)) {\n                zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_DENY, tokenDomain);\n                return AccessCheckStatus.DENY;\n            } else {\n                status = AccessCheckStatus.DENY_NO_MATCH;\n            }\n        } else if (status != AccessCheckStatus.DENY_NO_MATCH && roleMap != null) {\n            status = AccessCheckStatus.DENY_DOMAIN_EMPTY;\n        }\n\n        // so far it did not match any deny assertions so now let's\n        // process our allow assertions\n        \n        roleMap = zpeClt.getRoleAllowAssertions(tokenDomain);\n        if (roleMap != null && !roleMap.isEmpty()) {\n            if (actionByRole(action, tokenDomain, resource, roles, roleMap, matchRoleName)) {\n                zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_ALLOW, tokenDomain);\n                return AccessCheckStatus.ALLOW;\n            } else {\n                status = AccessCheckStatus.DENY_NO_MATCH;\n            }\n        } else if (status != AccessCheckStatus.DENY_NO_MATCH && roleMap != null) {\n            status = AccessCheckStatus.DENY_DOMAIN_EMPTY;\n        }\n        \n        // at this point we either got an allow or didn't match anything so we're\n        // going to try the wildcard roles\n        \n        roleMap = zpeClt.getWildcardAllowAssertions(tokenDomain);\n        if (roleMap != null && !roleMap.isEmpty()) {\n            if (actionByWildCardRole(action, tokenDomain, resource, roles, roleMap, matchRoleName)) {\n                zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_ALLOW, tokenDomain);\n                return AccessCheckStatus.ALLOW;\n            } else {\n                status = AccessCheckStatus.DENY_NO_MATCH;\n            }\n        } else if (status != AccessCheckStatus.DENY_NO_MATCH && roleMap != null) {\n            status = AccessCheckStatus.DENY_DOMAIN_EMPTY;\n        }\n        \n        if (status == AccessCheckStatus.DENY_DOMAIN_NOT_FOUND) {\n            LOG.error(\"{}: No role map found for domain={} so access denied\", msgPrefix, tokenDomain);\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_DOMAIN_NOT_FOUND, tokenDomain);\n        } else if (status == AccessCheckStatus.DENY_DOMAIN_EMPTY) {\n            LOG.error(\"{}: No policy assertions for domain={} so access denied\", msgPrefix, tokenDomain);\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_DOMAIN_EMPTY, tokenDomain);\n        } else {\n            zpeMetric.increment(ZpeConsts.ZPE_METRIC_NAME_DENY_NO_MATCH, tokenDomain);\n        }\n        \n        return status;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#StringLiteral#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#NullLiteral#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ParameterizedType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#PrefixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#QualifiedName#ReturnStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#InfixExpression#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ExpressionStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)InfixExpression(Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ReturnStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Determine if access(action) is allowed against the specified resource by a user represented by the given roles. The expected method for authorization check is the allowAccess methods. However, if the client is responsible for validating the role token (including expiration check), it may use this method directly by just specifying the tokenDomain and roles arguments which are directly extracted from the role token.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "java.util.List.size", "org.slf4j.Logger.error", "com.yahoo.athenz.zpe.ZpeMetric.increment", "org.slf4j.Logger.isDebugEnabled", "java.lang.String.join", "org.slf4j.Logger.debug", "java.lang.String.isEmpty", "java.lang.String.toLowerCase", "com.yahoo.athenz.zpe.AuthZpeClient.stripDomainPrefix", "org.slf4j.Logger.error", "com.yahoo.athenz.zpe.ZpeClient.getRoleDenyAssertions", "java.util.Map.isEmpty", "com.yahoo.athenz.zpe.AuthZpeClient.actionByRole", "com.yahoo.athenz.zpe.ZpeClient.getWildcardDenyAssertions", "com.yahoo.athenz.zpe.AuthZpeClient.actionByWildCardRole", "com.yahoo.athenz.zpe.ZpeClient.getRoleAllowAssertions", "com.yahoo.athenz.zpe.ZpeClient.getWildcardAllowAssertions"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String", "java.lang.Object"], ["java.lang.String", "java.lang.String"], [""], ["java.lang.CharSequence", "java.lang.Iterable"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], [""], [""], ["java.lang.String", "java.lang.String", "java.lang.String"], ["java.lang.String", "java.lang.Object", "java.lang.Object"], ["java.lang.String"], [""], ["java.lang.String", "java.lang.String", "java.lang.String", "java.util.List", "java.util.Map", "java.lang.StringBuilder"], ["java.lang.String"], ["java.lang.String", "java.lang.String", "java.lang.String", "java.util.List", "java.util.Map", "java.lang.StringBuilder"], ["java.lang.String"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "407", "file": "/root/repos/repos24/athenz/containers/jetty/src/main/java/com/yahoo/athenz/container/AthenzJettyContainer.java", "methodName": "com.yahoo.athenz.container.AthenzJettyContainer.setBanner", "methodParameterType": "String#", "methodParameterName": "banner#", "methodBody": "public void setBanner(String banner) {\n        this.banner = banner;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Set the banner that get displayed when server is started up.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "408", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetricFactory.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusMetricFactory.getProperty", "methodParameterType": "String#String#", "methodParameterName": "key#def#", "methodBody": "public static String getProperty(String key, String def) {\n        return System.getProperty(SYSTEM_PROP_PREFIX + key, def);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get system property related to PrometheusMetric. Property name: ${prefix}.${key}", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "409", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusExporter.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusExporter.flush", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void flush();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Flush any buffered metrics to destination.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "410", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusExporter.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusExporter.quit", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public void quit();", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "Flush buffers and shutdown any tasks.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "411", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetric.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusMetric.PrometheusMetric", "methodParameterType": "CollectorRegistry#ConcurrentMap<String,Collector>#PrometheusExporter#String#", "methodParameterName": "registry#namesToCollectors#exporter#namespace#", "methodBody": "public PrometheusMetric(CollectorRegistry registry, ConcurrentMap<String, Collector> namesToCollectors, PrometheusExporter exporter, String namespace) {\n        this(registry, namesToCollectors, exporter, namespace, false, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "@param registry CollectorRegistry of all metrics", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "412", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetric.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusMetric.PrometheusMetric", "methodParameterType": "CollectorRegistry#ConcurrentMap<String,Collector>#PrometheusExporter#String#boolean#boolean#", "methodParameterName": "registry#namesToCollectors#exporter#namespace#isLabelRequestDomainNameEnable#isLabelPrincipalDomainNameEnable#", "methodBody": "public PrometheusMetric(CollectorRegistry registry, ConcurrentMap<String, Collector> namesToCollectors, PrometheusExporter exporter, String namespace, boolean isLabelRequestDomainNameEnable, boolean isLabelPrincipalDomainNameEnable) {\n        this.registry = registry;\n        this.namesToCollectors = namesToCollectors;\n        this.exporter = exporter;\n        this.namespace = namespace;\n\n        this.isLabelRequestDomainNameEnable = isLabelRequestDomainNameEnable;\n        this.isLabelPrincipalDomainNameEnable = isLabelPrincipalDomainNameEnable;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param registry CollectorRegistry of all metrics", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "413", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetric.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusMetric.createOrGetCollector", "methodParameterType": "String#SimpleCollector.Builder<?,?>#", "methodParameterName": "metricName#builder#", "methodBody": "private Collector createOrGetCollector(String metricName, SimpleCollector.Builder<?, ?> builder) {\n        String key = metricName;\n        ConcurrentMap<String, Collector> map = this.namesToCollectors;\n        Collector collector = map.get(key);\n\n        // double checked locking\n        if (collector == null) {\n            synchronized (map) {\n                if (!map.containsKey(key)) {\n                    // create\n                    builder = builder\n                        .namespace(this.namespace)\n                        .name(metricName)\n                        .help(metricName)\n                        .labelNames(REQUEST_DOMAIN_LABEL_NAME, PRINCIPAL_DOMAIN_LABEL_NAME);\n                    collector = builder.register(this.registry);\n                    // put\n                    map.put(key, collector);\n                } else {\n                    // get\n                    collector = map.get(key);\n                }\n            }\n        };\n\n        return collector;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleType#WildcardType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#ThisExpression#SimpleName#FieldAccess#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#ThisExpression#SimpleName#FieldAccess#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#SynchronizedStatement#Block#IfStatement#EmptyStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)SimpleType(WildcardType)WildcardType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(SynchronizedStatement(SimpleName)SimpleName(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)SynchronizedStatement)Block)IfStatement(EmptyStatement)EmptyStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create collector and register it to the registry. This is needed since Athenz metric names are defined on runtime and we need the same collector object to record the data.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "414", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetric.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusMetric.normalizeCounterMetricName", "methodParameterType": "String#", "methodParameterName": "metricName#", "methodBody": "private String normalizeCounterMetricName(String metricName) {\n        return metricName + METRIC_NAME_DELIMITER + COUNTER_SUFFIX;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create counter metric name that follows prometheus standard", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "415", "file": "/root/repos/repos24/athenz/contributions/metric/prometheus/src/main/java/com/yahoo/athenz/common/metrics/impl/prometheus/PrometheusMetric.java", "methodName": "com.yahoo.athenz.common.metrics.impl.prometheus.PrometheusMetric.normalizeTimerMetricName", "methodParameterType": "String#", "methodParameterName": "metricName#", "methodBody": "private String normalizeTimerMetricName(String metricName) {\n        return metricName + METRIC_NAME_DELIMITER + TIMER_UNIT;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create timer metric name that follows prometheus standard", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}]