[{"index": "0", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.getInternalState", "methodParameterType": "Object#String#", "methodParameterName": "object#fieldName#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T> T getInternalState(Object object, String fieldName) {\n        Field foundField = findFieldInHierarchy(object, fieldName);\n        try {\n            return (T) foundField.get(object);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Internal error: Failed to get field in method getInternalState.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get the value of a field using reflection. This method will iterate through the entire class hierarchy and return the value of the first field named <tt>fieldName</tt>. If you want to get a specific field value at specific place in the class hierarchy please refer to", "call_func_name": ["org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy", "java.lang.reflect.Field.get", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Object", "java.lang.String"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy": "Find field in hierarchy."}]}, {"index": "1", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy", "methodParameterType": "Object#String#", "methodParameterName": "object#fieldName#", "methodBody": "private static Field findFieldInHierarchy(Object object, String fieldName) {\n        return findFieldInHierarchy(object, new FieldNameMatcherStrategy(fieldName));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find field in hierarchy.", "call_func_name": ["org.awaitility.reflect.FieldNameMatcherStrategy.<init>", "org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy"], "call_func_parameter": [["java.lang.String"], ["java.lang.Object", "org.awaitility.reflect.FieldMatcherStrategy"]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy": "Find field in hierarchy."}]}, {"index": "2", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy", "methodParameterType": "Object#FieldMatcherStrategy#", "methodParameterName": "object#strategy#", "methodBody": "private static Field findFieldInHierarchy(Object object, FieldMatcherStrategy strategy) {\n        assertObjectInGetInternalStateIsNotNull(object);\n        return findSingleFieldUsingStrategy(strategy, object, true, getType(object));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find field in hierarchy.", "call_func_name": ["org.awaitility.reflect.WhiteboxImpl.assertObjectInGetInternalStateIsNotNull", "org.awaitility.reflect.WhiteboxImpl.getType", "org.awaitility.reflect.WhiteboxImpl.findSingleFieldUsingStrategy"], "call_func_parameter": [["java.lang.Object"], ["java.lang.Object"], ["org.awaitility.reflect.FieldMatcherStrategy", "java.lang.Object", "boolean", "java.lang.Class"]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.assertObjectInGetInternalStateIsNotNull": "Assert object in get internal state is not null."}, {"org.awaitility.reflect.WhiteboxImpl.getType": "Gets the type."}, {"org.awaitility.reflect.WhiteboxImpl.findSingleFieldUsingStrategy": "Find single field using strategy."}]}, {"index": "3", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.assertObjectInGetInternalStateIsNotNull", "methodParameterType": "Object#", "methodParameterName": "object#", "methodBody": "private static void assertObjectInGetInternalStateIsNotNull(Object object) {\n        if (object == null) {\n            throw new IllegalArgumentException(\"The object containing the field cannot be null\");\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Assert object in get internal state is not null.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "4", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.findSingleFieldUsingStrategy", "methodParameterType": "FieldMatcherStrategy#Object#boolean#Class<?>#", "methodParameterName": "strategy#object#checkHierarchy#startClass#", "methodBody": "private static Field findSingleFieldUsingStrategy(FieldMatcherStrategy strategy, Object object,\n                                                      boolean checkHierarchy, Class<?> startClass) {\n        assertObjectInGetInternalStateIsNotNull(object);\n        Field foundField = null;\n        final Class<?> originalStartClass = startClass;\n        while (startClass != null) {\n            final Field[] declaredFields = startClass.getDeclaredFields();\n            for (Field field : declaredFields) {\n                if (strategy.matches(field) && hasFieldProperModifier(object, field)) {\n                    if (foundField != null) {\n                        throw new TooManyFieldsFoundException(\"Two or more fields matching \" + strategy + \".\");\n                    }\n                    foundField = field;\n                }\n            }\n            if (foundField != null) {\n                break;\n            } else if (!checkHierarchy) {\n                break;\n            }\n            startClass = startClass.getSuperclass();\n        }\n        if (foundField == null) {\n            strategy.notFound(originalStartClass, !isClass(object));\n            return null;\n        }\n        foundField.setAccessible(true);\n        return foundField;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#Modifier#SimpleName#SimpleType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#Block#EnhancedForStatement#SimpleName#NullLiteral#InfixExpression#BreakStatement#Block#SimpleName#PrefixExpression#BreakStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#IfStatement#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(ArrayType(SimpleType(SimpleName)SimpleName)SimpleType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement)Block)EnhancedForStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(BreakStatement)BreakStatement)Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find single field using strategy.", "call_func_name": ["org.awaitility.reflect.WhiteboxImpl.assertObjectInGetInternalStateIsNotNull", "java.lang.Class.getDeclaredFields", "org.awaitility.reflect.FieldMatcherStrategy.matches", "org.awaitility.reflect.WhiteboxImpl.hasFieldProperModifier", "java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString", "org.awaitility.reflect.exception.TooManyFieldsFoundException.<init>", "java.lang.Class.getSuperclass", "org.awaitility.reflect.WhiteboxImpl.isClass", "org.awaitility.reflect.FieldMatcherStrategy.notFound", "java.lang.reflect.Field.setAccessible"], "call_func_parameter": [["java.lang.Object"], [""], ["java.lang.reflect.Field"], ["java.lang.Object", "java.lang.reflect.Field"], [""], ["java.lang.String"], ["java.lang.Object"], [""], ["java.lang.String"], [""], ["java.lang.Object"], ["java.lang.Class", "boolean"], ["boolean"]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.assertObjectInGetInternalStateIsNotNull": "Assert object in get internal state is not null."}, {"org.awaitility.reflect.FieldMatcherStrategy.matches": "A field matcher that checks if a field matches a given criteria."}, {"org.awaitility.reflect.WhiteboxImpl.hasFieldProperModifier": "Checks for field proper modifier."}, {"org.awaitility.reflect.WhiteboxImpl.isClass": "Checks if is class."}, {"org.awaitility.reflect.FieldMatcherStrategy.notFound": "Throws an  {@link org.awaitility.reflect.exception.FieldNotFoundException} if the strategy criteria couldnot be found."}]}, {"index": "5", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.hasFieldProperModifier", "methodParameterType": "Object#Field#", "methodParameterName": "object#field#", "methodBody": "private static boolean hasFieldProperModifier(Object object, Field field) {\n        return ((object instanceof Class<?> && Modifier.isStatic(field.getModifiers())) || !(object instanceof Class<?> || Modifier\n                .isStatic(field.getModifiers())));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#InstanceofExpression#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ParenthesizedExpression#PrefixExpression#InfixExpression#ParenthesizedExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ParenthesizedExpression(InfixExpression(ParenthesizedExpression(InfixExpression(InstanceofExpression(SimpleName)SimpleName(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression(PrefixExpression(ParenthesizedExpression(InfixExpression(InstanceofExpression(SimpleName)SimpleName(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)InstanceofExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ParenthesizedExpression)PrefixExpression)InfixExpression)ParenthesizedExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks for field proper modifier.", "call_func_name": ["java.lang.reflect.Field.getModifiers", "java.lang.reflect.Modifier.isStatic"], "call_func_parameter": [[""], ["int"]], "passed_comments": "/"}, {"index": "6", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.getInternalState", "methodParameterType": "Object#Class<T>#", "methodParameterName": "object#fieldType#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T> T getInternalState(Object object, Class<T> fieldType) {\n        Field foundField = findFieldInHierarchy(object, new AssignableToFieldTypeMatcherStrategy(fieldType));\n        try {\n            return (T) foundField.get(object);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Internal error: Failed to get field in method getInternalState.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Get the value of a field using reflection. This method will traverse the super class hierarchy until the first field of type <tt>fieldType</tt> is found. The value of this field will be returned.", "call_func_name": ["org.awaitility.reflect.AssignableToFieldTypeMatcherStrategy.<init>", "org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy", "java.lang.reflect.Field.get", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Object", "org.awaitility.reflect.FieldMatcherStrategy"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.findFieldInHierarchy": "Find field in hierarchy."}]}, {"index": "7", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.throwExceptionIfFieldWasNotFound", "methodParameterType": "Class<?>#String#Field#", "methodParameterName": "type#fieldName#field#", "methodBody": "public static void throwExceptionIfFieldWasNotFound(Class<?> type, String fieldName, Field field) {\n        if (field == null) {\n            throw new FieldNotFoundException(\"No field was found with name '\" + fieldName + \"' in class \"\n                    + type.getName() + \".\");\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "Throw exception if field was not found.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "org.awaitility.reflect.exception.FieldNotFoundException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "8", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.getType", "methodParameterType": "Object#", "methodParameterName": "object#", "methodBody": "public static Class<?> getType(Object object) {\n        Class<?> type = null;\n        if (isClass(object)) {\n            type = (Class<?>) object;\n        } else if (object != null) {\n            type = object.getClass();\n        }\n        return type;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#CastExpression#Assignment#ExpressionStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(CastExpression(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)CastExpression)Assignment)ExpressionStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Gets the type.", "call_func_name": ["org.awaitility.reflect.WhiteboxImpl.isClass", "java.lang.Object.getClass"], "call_func_parameter": [["java.lang.Object"], [""]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.isClass": "Checks if is class."}]}, {"index": "9", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.getFieldAnnotatedWith", "methodParameterType": "Object#Class<? extends Annotation>#", "methodParameterName": "object#annotationType#", "methodBody": "public static Field getFieldAnnotatedWith(Object object, Class<? extends Annotation> annotationType) {\n        return findSingleFieldUsingStrategy(new FieldAnnotationMatcherStrategy(annotationType), object, true,\n                getType(object));\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Get field annotated with a particular annotation. This method traverses the class hierarchy when checking for the annotation.", "call_func_name": ["org.awaitility.reflect.FieldAnnotationMatcherStrategy.<init>", "org.awaitility.reflect.WhiteboxImpl.getType", "org.awaitility.reflect.WhiteboxImpl.findSingleFieldUsingStrategy"], "call_func_parameter": [["java.lang.Class"], ["java.lang.Object"], ["org.awaitility.reflect.FieldMatcherStrategy", "java.lang.Object", "boolean", "java.lang.Class"]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.getType": "Gets the type."}, {"org.awaitility.reflect.WhiteboxImpl.findSingleFieldUsingStrategy": "Find single field using strategy."}]}, {"index": "10", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.isClass", "methodParameterType": "Object#", "methodParameterName": "argument#", "methodBody": "public static boolean isClass(Object argument) {\n        return argument instanceof Class<?>;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#InstanceofExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InstanceofExpression(SimpleName)SimpleName(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType)InstanceofExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Checks if is class.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "11", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/WhiteboxImpl.java", "methodName": "org.awaitility.reflect.WhiteboxImpl.getByNameAndType", "methodParameterType": "Object#String#Class<T>#", "methodParameterName": "object#fieldName#expectedFieldType#", "methodBody": "@SuppressWarnings(\"unchecked\")\n    public static <T> T getByNameAndType(Object object, String fieldName, Class<T> expectedFieldType) {\n        Field foundField = findSingleFieldUsingStrategy(new FieldNameAndTypeMatcherStrategy(fieldName,\n                expectedFieldType), object, true, getType(object));\n        try {\n            return (T) foundField.get(object);\n        } catch (IllegalAccessException e) {\n            throw new RuntimeException(\"Internal error: Failed to get field in method getInternalState.\", e);\n        }\n    }", "AST": "Javadoc#SimpleName#StringLiteral#SingleMemberAnnotation#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#SimpleName#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#CastExpression#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#StringLiteral#SimpleName#ClassInstanceCreation#ThrowStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(ReturnStatement(CastExpression(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)CastExpression)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "<p>getByNameAndType.</p>", "call_func_name": ["org.awaitility.reflect.FieldNameAndTypeMatcherStrategy.<init>", "org.awaitility.reflect.WhiteboxImpl.getType", "org.awaitility.reflect.WhiteboxImpl.findSingleFieldUsingStrategy", "java.lang.reflect.Field.get", "java.lang.RuntimeException.<init>"], "call_func_parameter": [["java.lang.String", "java.lang.Class"], ["java.lang.Object"], ["org.awaitility.reflect.FieldMatcherStrategy", "java.lang.Object", "boolean", "java.lang.Class"], ["java.lang.Object"], ["java.lang.String", "java.lang.Throwable"]], "passed_comments": [{"org.awaitility.reflect.WhiteboxImpl.getType": "Gets the type."}, {"org.awaitility.reflect.WhiteboxImpl.findSingleFieldUsingStrategy": "Find single field using strategy."}]}, {"index": "12", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldAnnotationMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldAnnotationMatcherStrategy.FieldAnnotationMatcherStrategy", "methodParameterType": "Class<? extends Annotation>#", "methodParameterName": "annotation#", "methodBody": "public FieldAnnotationMatcherStrategy(Class<? extends Annotation> annotation) {\n        if (annotation == null) {\n            throw new IllegalArgumentException(\"You must specify an annotation.\");\n        }\n        this.annotation = annotation;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for FieldAnnotationMatcherStrategy.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "13", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldAnnotationMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldAnnotationMatcherStrategy.matches", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "@Override\n    public boolean matches(Field field) {\n        return field.isAnnotationPresent(annotation);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.reflect.Field.isAnnotationPresent"], "call_func_parameter": [["java.lang.Class"]], "passed_comments": "/"}, {"index": "14", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldAnnotationMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldAnnotationMatcherStrategy.notFound", "methodParameterType": "Class<?>#boolean#", "methodParameterName": "type#isInstanceField#", "methodBody": "@Override\n    public void notFound(Class<?> type, boolean isInstanceField) throws FieldNotFoundException {\n        throw new FieldNotFoundException(\"No field with annotation of type \\\"\" + annotation.getName()\n                + \"\\\" could be found in the class hierarchy of \" + type.getName() + \".\");\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#SimpleName#SimpleName#MethodInvocation#StringLiteral#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(StringLiteral)StringLiteral)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "org.awaitility.reflect.exception.FieldNotFoundException.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"]], "passed_comments": "/"}, {"index": "15", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldAnnotationMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldAnnotationMatcherStrategy.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        return \"annotation \" + annotation.getName();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "16", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldTypeMatcherStrategy.FieldTypeMatcherStrategy", "methodParameterType": "Class<?>#", "methodParameterName": "fieldType#", "methodBody": "public FieldTypeMatcherStrategy(Class<?> fieldType) {\n        if (fieldType == null) {\n            throw new IllegalArgumentException(\"field type cannot be null.\");\n        }\n        this.expectedFieldType = fieldType;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for FieldTypeMatcherStrategy.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "17", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldTypeMatcherStrategy.matches", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "@Override\n    public boolean matches(Field field) {\n        return expectedFieldType.equals(field.getType());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.reflect.Field.getType", "java.lang.Object.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "18", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldTypeMatcherStrategy.notFound", "methodParameterType": "Class<?>#boolean#", "methodParameterName": "type#isInstanceField#", "methodBody": "@Override\n    public void notFound(Class<?> type, boolean isInstanceField) throws FieldNotFoundException {\n        throw new FieldNotFoundException(String.format(\n                \"No %s field of type \\\"%s\\\" could be found in the class hierarchy of %s.\", isInstanceField ? \"instance\"\n                        : \"static\", expectedFieldType.getName(), type.getName()));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.Class.getName", "java.lang.String.format", "org.awaitility.reflect.exception.FieldNotFoundException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "19", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldTypeMatcherStrategy.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "@Override\n    public String toString() {\n        return \"type \" + expectedFieldType.getName();\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "20", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameAndTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameAndTypeMatcherStrategy.FieldNameAndTypeMatcherStrategy", "methodParameterType": "String#Class<?>#", "methodParameterName": "fieldName#type#", "methodBody": "public FieldNameAndTypeMatcherStrategy(String fieldName, Class<?> type) {\n        if (fieldName == null || fieldName.equals(\"\") || fieldName.startsWith(\" \")) {\n            throw new IllegalArgumentException(\"field name cannot be null.\");\n        } else if (type == null) {\n            throw new IllegalArgumentException(\"type cannot be null.\");\n        }\n        this.fieldName = fieldName;\n        this.fieldType = type;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for FieldNameAndTypeMatcherStrategy.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "21", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameAndTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameAndTypeMatcherStrategy.matches", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "@Override\n    public boolean matches(Field field) {\n        return fieldName.equals(field.getName()) && fieldType.equals(field.getType());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.reflect.Field.getName", "java.lang.String.equals", "java.lang.reflect.Field.getType", "java.lang.Object.equals"], "call_func_parameter": [[""], ["java.lang.Object"], [""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "22", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameAndTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameAndTypeMatcherStrategy.notFound", "methodParameterType": "Class<?>#boolean#", "methodParameterName": "type#isInstanceField#", "methodBody": "@Override\n    public void notFound(Class<?> type, boolean isInstanceField) throws FieldNotFoundException {\n        throw new FieldNotFoundException(String.format(\n                \"No %s field with name \\\"%s\\\" and type \\\"%s\\\" could be found in the class hierarchy of %s.\",\n                isInstanceField ? \"instance\" : \"static\", fieldName, fieldType.getName(), type.getName()));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.Class.getName", "java.lang.String.format", "org.awaitility.reflect.exception.FieldNotFoundException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "23", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameAndTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameAndTypeMatcherStrategy.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String toString() {\n        return \"fieldName \" + fieldName + \", fieldType = \" + fieldType.getName();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>toString.</p>", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""]], "passed_comments": "/"}, {"index": "24", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/exception/FieldNotFoundException.java", "methodName": "org.awaitility.reflect.exception.FieldNotFoundException.FieldNotFoundException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public FieldNotFoundException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "25", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/exception/TooManyFieldsFoundException.java", "methodName": "org.awaitility.reflect.exception.TooManyFieldsFoundException.TooManyFieldsFoundException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public TooManyFieldsFoundException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Constructs a new exception with the specified detail message. The cause is not initialized, and may subsequently be initialized by a call to {@link #initCause}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "26", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameMatcherStrategy.FieldNameMatcherStrategy", "methodParameterType": "String#", "methodParameterName": "fieldName#", "methodBody": "public FieldNameMatcherStrategy(String fieldName) {\n        if (fieldName == null || fieldName.equals(\"\") || fieldName.startsWith(\" \")) {\n            throw new IllegalArgumentException(\"field name cannot be null.\");\n        }\n        this.fieldName = fieldName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for FieldNameMatcherStrategy.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "27", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameMatcherStrategy.matches", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "@Override\n    public boolean matches(Field field) {\n        return fieldName.equals(field.getName());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.reflect.Field.getName", "java.lang.String.equals"], "call_func_parameter": [[""], ["java.lang.Object"]], "passed_comments": "/"}, {"index": "28", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameMatcherStrategy.notFound", "methodParameterType": "Class<?>#boolean#", "methodParameterName": "type#isInstanceField#", "methodBody": "@Override\n    public void notFound(Class<?> type, boolean isInstanceField) throws FieldNotFoundException {\n        throw new FieldNotFoundException(String.format(\n                \"No %s field named \\\"%s\\\" could be found in the class hierarchy of %s.\", isInstanceField ? \"instance\"\n                        : \"static\", fieldName, type.getName()));\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#StringLiteral#SimpleName#StringLiteral#StringLiteral#ConditionalExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ClassInstanceCreation#ThrowStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(ConditionalExpression(SimpleName)SimpleName(StringLiteral)StringLiteral(StringLiteral)StringLiteral)ConditionalExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ClassInstanceCreation)ThrowStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.Class.getName", "java.lang.String.format", "org.awaitility.reflect.exception.FieldNotFoundException.<init>"], "call_func_parameter": [[""], ["java.lang.String", "java.lang.Object[]"], ["java.lang.String"]], "passed_comments": "/"}, {"index": "29", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldNameMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldNameMatcherStrategy.toString", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String toString() {\n        return \"fieldName \" + fieldName;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#StringLiteral#SimpleName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(StringLiteral)StringLiteral(SimpleName)SimpleName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>toString.</p>", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.StringBuilder.toString"], "call_func_parameter": [[""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "30", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/AssignableToFieldTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.AssignableToFieldTypeMatcherStrategy.AssignableToFieldTypeMatcherStrategy", "methodParameterType": "Class<?>#", "methodParameterName": "fieldType#", "methodBody": "public AssignableToFieldTypeMatcherStrategy(Class<?> fieldType) {\n        super(fieldType);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "<p>Constructor for AssignableToFieldTypeMatcherStrategy.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "31", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/AssignableToFieldTypeMatcherStrategy.java", "methodName": "org.awaitility.reflect.AssignableToFieldTypeMatcherStrategy.matches", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "@Override\n    public boolean matches(Field field) {\n        return expectedFieldType.isAssignableFrom(field.getType());\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["java.lang.reflect.Field.getType", "java.lang.Class.isAssignableFrom"], "call_func_parameter": [[""], ["java.lang.Class"]], "passed_comments": "/"}, {"index": "32", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldMatcherStrategy.matches", "methodParameterType": "Field#", "methodParameterName": "field#", "methodBody": "public abstract boolean matches(Field field);", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "A field matcher that checks if a field matches a given criteria.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "33", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/reflect/FieldMatcherStrategy.java", "methodName": "org.awaitility.reflect.FieldMatcherStrategy.notFound", "methodParameterType": "Class<?>#boolean#", "methodParameterName": "type#isInstanceField#", "methodBody": "public abstract void notFound(Class<?> type, boolean isInstanceField) throws FieldNotFoundException;", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "Throws an  {@link org.awaitility.reflect.exception.FieldNotFoundException} if the strategy criteria couldnot be found.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "34", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionTimeoutException.java", "methodName": "org.awaitility.core.ConditionTimeoutException.ConditionTimeoutException", "methodParameterType": "String#", "methodParameterName": "message#", "methodBody": "public ConditionTimeoutException(String message) {\n        super(message);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "<p>Constructor for ConditionTimeoutException.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "35", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionTimeoutException.java", "methodName": "org.awaitility.core.ConditionTimeoutException.ConditionTimeoutException", "methodParameterType": "String#Throwable#", "methodParameterName": "message#throwable#", "methodBody": "public ConditionTimeoutException(String message, Throwable throwable) {\n        super(message, throwable);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "<p>Constructor for ConditionTimeoutException.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "36", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/CheckedExceptionRethrower.java", "methodName": "org.awaitility.core.CheckedExceptionRethrower.safeRethrow", "methodParameterType": "Throwable#", "methodParameterName": "t#", "methodBody": "public static <T> T safeRethrow(Throwable t) {\n        CheckedExceptionRethrower.<RuntimeException>safeRethrow0(t);\n        return null;\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>safeRethrow.</p>", "call_func_name": ["org.awaitility.core.CheckedExceptionRethrower.safeRethrow0"], "call_func_parameter": [["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "37", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluator.java", "methodName": "org.awaitility.core.ConditionEvaluator.eval", "methodParameterType": "Duration#", "methodParameterName": "pollInterval#", "methodBody": "ConditionEvaluationResult eval(Duration pollInterval) throws Exception;", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@param pollInterval The poll interval for the for this evaluation round", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "38", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/Condition.java", "methodName": "org.awaitility.core.Condition.await", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "T await();", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "<p>Await for the condition to complete</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "39", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ThrowingRunnable.java", "methodName": "org.awaitility.core.ThrowingRunnable.run", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "void run() throws Throwable;", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)MethodDeclaration", "methodDoc": "@throws Throwable The exception that may be thrown", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "40", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ForeverDuration.java", "methodName": "org.awaitility.core.ForeverDuration.isForever", "methodParameterType": "Duration#", "methodParameterName": "duration#", "methodBody": "public static boolean isForever(Duration duration) {\n        return FOREVER.equals(duration);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>isForever.</p>", "call_func_name": ["java.time.Duration.equals"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "41", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/InternalExecutorServiceFactory.java", "methodName": "org.awaitility.core.InternalExecutorServiceFactory.sameThreadExecutorService", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ExecutorService sameThreadExecutorService() {\n        return new SameThreadExecutorService();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return A executor service that executes tasks in the caller's thread", "call_func_name": ["org.awaitility.core.SameThreadExecutorService.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "42", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/InternalExecutorServiceFactory.java", "methodName": "org.awaitility.core.InternalExecutorServiceFactory.create", "methodParameterType": "Function<Runnable,Thread>#", "methodParameterName": "threadSupplier#", "methodBody": "public static ExecutorService create(final Function<Runnable, Thread> threadSupplier) {\n        if (threadSupplier == null) {\n            throw new IllegalArgumentException(\"Condition evaluation thread supplier cannot be null\");\n        }\n        return create((runnable, __) -> threadSupplier.apply(runnable), null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an executor service that creates thread's based on the <code>thread supplier</code>", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.function.BiFunction.apply", "org.awaitility.core.InternalExecutorServiceFactory.create"], "call_func_parameter": [["java.lang.String"], ["java.util.function.Function"], ["java.util.function.BiFunction", "java.lang.String"]], "passed_comments": [{"org.awaitility.core.InternalExecutorServiceFactory.create": "Creates an executor services that creates thread's based on the <code>thread supplier</code>. The first argument to the <code>threadSupplier</code> is the Runnable (the condition that will be evaluated). The second argument is the default thread name generated by Awaitility."}]}, {"index": "43", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/InternalExecutorServiceFactory.java", "methodName": "org.awaitility.core.InternalExecutorServiceFactory.create", "methodParameterType": "BiFunction<Runnable,String,Thread>#String#", "methodParameterName": "threadSupplier#alias#", "methodBody": "public static ExecutorService create(final BiFunction<Runnable, String, Thread> threadSupplier, final String alias) {\n        if (threadSupplier == null) {\n            throw new IllegalArgumentException(\"Condition evaluation thread supplier cannot be null\");\n        }\n        return Executors.newSingleThreadExecutor(r -> {\n            final String threadName = generateDefaultThreadName(alias);\n            return threadSupplier.apply(r, threadName);\n        });\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Creates an executor services that creates thread's based on the <code>thread supplier</code>. The first argument to the <code>threadSupplier</code> is the Runnable (the condition that will be evaluated). The second argument is the default thread name generated by Awaitility.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.concurrent.ThreadFactory.newThread", "java.util.concurrent.Executors.newSingleThreadExecutor"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "java.util.function.BiFunction"], ["java.util.concurrent.ThreadFactory"]], "passed_comments": "/"}, {"index": "44", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluationListener.java", "methodName": "org.awaitility.core.ConditionEvaluationListener.conditionEvaluated", "methodParameterType": "EvaluatedCondition<T>#", "methodParameterName": "condition#", "methodBody": "void conditionEvaluated(EvaluatedCondition<T> condition);", "AST": "Javadoc#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Handle an evaluated condition of a matcher.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "45", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/Uninterruptibles.java", "methodName": "org.awaitility.core.Uninterruptibles.getUninterruptibly", "methodParameterType": "Future<V>#", "methodParameterName": "future#", "methodBody": "static <V> V getUninterruptibly(Future<V> future) throws ExecutionException {\n        boolean interrupted = false;\n        try {\n            while (true) {\n                try {\n                    return future.get();\n                } catch (InterruptedException e) {\n                    interrupted = true;\n                }\n            }\n        } finally {\n            if (interrupted) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(WhileStatement(BooleanLiteral)BooleanLiteral(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Invokes  {@code future.}{@link Future#get() get()} uninterruptibly.", "call_func_name": ["java.util.concurrent.Future.get", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt"], "call_func_parameter": [[""], [""], [""]], "passed_comments": "/"}, {"index": "46", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/Uninterruptibles.java", "methodName": "org.awaitility.core.Uninterruptibles.getUninterruptibly", "methodParameterType": "Future<V>#Duration#", "methodParameterName": "future#timeout#", "methodBody": "static <V> V getUninterruptibly(Future<V> future, Duration timeout)\n            throws ExecutionException, TimeoutException {\n        return getUninterruptibly(future, saturatedToNanos(timeout), TimeUnit.NANOSECONDS);\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Invokes  {@code future.}{@link Future#get(long,TimeUnit) get(timeout, unit)} uninterruptibly.", "call_func_name": ["org.awaitility.core.Uninterruptibles.saturatedToNanos", "org.awaitility.core.Uninterruptibles.getUninterruptibly"], "call_func_parameter": [["java.time.Duration"], ["java.util.concurrent.Future", "long", "java.util.concurrent.TimeUnit"]], "passed_comments": [{"org.awaitility.core.Uninterruptibles.saturatedToNanos": "Returns the number of nanoseconds of the given duration without throwing or overflowing. <p>Instead of throwing  {@link ArithmeticException}, this method silently saturates to either {@link Long#MAX_VALUE} or {@link Long#MIN_VALUE}. This behavior can be useful when decomposing a duration in order to call a legacy API which requires a  {@code long, TimeUnit} pair."}, {"org.awaitility.core.Uninterruptibles.getUninterruptibly": "Invokes  {@code future.}{@link Future#get(long,TimeUnit) get(timeout, unit)} uninterruptibly."}]}, {"index": "47", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/Uninterruptibles.java", "methodName": "org.awaitility.core.Uninterruptibles.getUninterruptibly", "methodParameterType": "Future<V>#long#TimeUnit#", "methodParameterName": "future#timeout#unit#", "methodBody": "static <V> V getUninterruptibly(Future<V> future, long timeout, TimeUnit unit)\n            throws ExecutionException, TimeoutException {\n        boolean interrupted = false;\n        try {\n            long remainingNanos = unit.toNanos(timeout);\n            long end = System.nanoTime() + remainingNanos;\n\n            while (true) {\n                try {\n                    // Future treats negative timeouts just like zero.\n                    return future.get(remainingNanos, NANOSECONDS);\n                } catch (InterruptedException e) {\n                    interrupted = true;\n                    remainingNanos = end - System.nanoTime();\n                }\n            }\n        } finally {\n            if (interrupted) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Invokes  {@code future.}{@link Future#get(long,TimeUnit) get(timeout, unit)} uninterruptibly.", "call_func_name": ["java.util.concurrent.TimeUnit.toNanos", "java.lang.System.nanoTime", "java.util.concurrent.Future.get", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt"], "call_func_parameter": [["long"], [""], ["long", "java.util.concurrent.TimeUnit"], [""], [""]], "passed_comments": "/"}, {"index": "48", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/Uninterruptibles.java", "methodName": "org.awaitility.core.Uninterruptibles.shutdownUninterruptibly", "methodParameterType": "ExecutorService#long#TimeUnit#", "methodParameterName": "executor#timeout#unit#", "methodBody": "static void shutdownUninterruptibly(ExecutorService executor, long timeout, TimeUnit unit) {\n        boolean interrupted = false;\n        try {\n            long remainingNanos = unit.toNanos(timeout);\n            long end = System.nanoTime() + remainingNanos;\n            executor.shutdown();\n\n            while (true) {\n                try {\n                    if (!executor.awaitTermination(remainingNanos, unit)) {\n                        executor.shutdownNow();\n                    }\n                    break;\n                } catch (InterruptedException e) {\n                    interrupted = true;\n                    remainingNanos = end - System.nanoTime();\n                    executor.shutdownNow();\n                }\n            }\n        } finally {\n            if (interrupted) {\n                Thread.currentThread().interrupt();\n            }\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#BreakStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#TryStatement#Block#WhileStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(WhileStatement(BooleanLiteral)BooleanLiteral(Block(TryStatement(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(BreakStatement)BreakStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause)TryStatement)Block)WhileStatement)Block(Block(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Shuts down an executor service uninterruptibly Note that this method is created by Johan Haleby and is thus not covered by the Guava license", "call_func_name": ["java.util.concurrent.TimeUnit.toNanos", "java.lang.System.nanoTime", "java.util.concurrent.ExecutorService.shutdown", "java.util.concurrent.ExecutorService.awaitTermination", "java.util.concurrent.ExecutorService.shutdownNow", "java.lang.Thread.currentThread", "java.lang.Thread.interrupt"], "call_func_parameter": [["long"], [""], [""], ["long", "java.util.concurrent.TimeUnit"], [""], [""], [""]], "passed_comments": "/"}, {"index": "49", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/Uninterruptibles.java", "methodName": "org.awaitility.core.Uninterruptibles.saturatedToNanos", "methodParameterType": "Duration#", "methodParameterName": "duration#", "methodBody": "private static long saturatedToNanos(Duration duration) {\n        // Using a try/catch seems lazy, but the catch block will rarely get invoked (except for\n        // durations longer than approximately +/- 292 years).\n        try {\n            return duration.toNanos();\n        } catch (ArithmeticException tooBig) {\n            return duration.isNegative() ? Long.MIN_VALUE : Long.MAX_VALUE;\n        }\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#QualifiedName#ConditionalExpression#ReturnStatement#Block#CatchClause#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(TryStatement(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ConditionalExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConditionalExpression)ReturnStatement)Block)CatchClause)TryStatement)Block)MethodDeclaration", "methodDoc": "Returns the number of nanoseconds of the given duration without throwing or overflowing. <p>Instead of throwing  {@link ArithmeticException}, this method silently saturates to either {@link Long#MAX_VALUE} or {@link Long#MIN_VALUE}. This behavior can be useful when decomposing a duration in order to call a legacy API which requires a  {@code long, TimeUnit} pair.", "call_func_name": ["java.time.Duration.toNanos", "java.time.Duration.isNegative"], "call_func_parameter": [[""], [""]], "passed_comments": "/"}, {"index": "50", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.EvaluatedCondition", "methodParameterType": "String#Matcher<? super T>#T#long#long#boolean#String#Duration#", "methodParameterName": "description#matcher#currentConditionValue#elapsedTimeInMS#remainingTimeInMS#isConditionSatisfied#alias#pollInterval#", "methodBody": "EvaluatedCondition(String description, Matcher<? super T> matcher, T currentConditionValue, long elapsedTimeInMS, long remainingTimeInMS,\n                       boolean isConditionSatisfied, String alias, Duration pollInterval) {\n        this.description = description;\n        this.matcher = matcher;\n        this.currentConditionValue = currentConditionValue;\n        this.elapsedTimeInMS = elapsedTimeInMS;\n        this.remainingTimeInMS = remainingTimeInMS;\n        this.conditionIsFulfilled = isConditionSatisfied;\n        this.alias = alias;\n        this.pollInterval = pollInterval;\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param description           A descriptive match message or mismatch message of the matcher. If <code>isConditionSatisfied</code> is <code>true</code> then itdescribes a match message, if <code>false</code> then it describes a mismatch message.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "51", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.getDescription", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getDescription() {\n        return description;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Descriptive message of the Hamcrest matcher.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "52", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.isHamcrestCondition", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isHamcrestCondition() {\n        return matcher != null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return <code>true</code> if the condition has a matcher (i.e. it's a Hamcrest Based condition) which means that {@link #getMatcher()} will return a non-null value.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "53", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.getMatcher", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Matcher<? super T> getMatcher() {\n        return matcher;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return The Hamcrest matcher used in the condition if this condition is a Hamcrest condition", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "54", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.getValue", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public T getValue() {\n        return currentConditionValue;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return The current value of the condition.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "55", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.getElapsedTimeInMS", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getElapsedTimeInMS() {\n        return elapsedTimeInMS;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Elapsed time in milliseconds.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "56", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.getRemainingTimeInMS", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public long getRemainingTimeInMS() {\n        return remainingTimeInMS;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return Remaining time to wait in milliseconds or <code>Long.MAX_VALUE</code> if no timeout defined, i.e., running forever.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "57", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.isConditionRunningForever", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isConditionRunningForever() {\n        return getRemainingTimeInMS() == Long.MAX_VALUE;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#QualifiedName#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName)MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return <code>true</code> if the condition doesn't have a timeout, <code>false</code> otherwise.", "call_func_name": ["org.awaitility.core.EvaluatedCondition.getRemainingTimeInMS"], "call_func_parameter": [[""]], "passed_comments": [{"org.awaitility.core.EvaluatedCondition.getRemainingTimeInMS": "@return Remaining time to wait in milliseconds or <code>Long.MAX_VALUE</code> if no timeout defined, i.e., running forever."}]}, {"index": "58", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.isSatisfied", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean isSatisfied() {\n        return conditionIsFulfilled;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return <code>true</code> if the condition is satisfied (i.e. hamcrest matcher matches the value), <code>false</code> otherwise (i.e. an intermediate value).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "59", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.getAlias", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAlias() {\n        return alias;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return The Awaitility alias for the condition (if any).", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "60", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.hasAlias", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasAlias() {\n        return alias != null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return <code>true</code> if this condition defined an alias.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "61", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluatedCondition.java", "methodName": "org.awaitility.core.EvaluatedCondition.getPollInterval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getPollInterval() {\n        return pollInterval;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return The poll interval for the evaluation round", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "62", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluationResult.java", "methodName": "org.awaitility.core.ConditionEvaluationResult.ConditionEvaluationResult", "methodParameterType": "boolean#", "methodParameterName": "successful#", "methodBody": "ConditionEvaluationResult(boolean successful) {\n        this(successful, null, null);\n    }", "AST": "Javadoc#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#NullLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(NullLiteral)NullLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Return the result of the condition evaluation as either just <code>true</code> or <code>false</code>. If <code>false</code> this means that the condition could be retried later.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "63", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluationResult.java", "methodName": "org.awaitility.core.ConditionEvaluationResult.ConditionEvaluationResult", "methodParameterType": "boolean#Throwable#Throwable#", "methodParameterName": "successful#throwable#trace#", "methodBody": "ConditionEvaluationResult(boolean successful, Throwable throwable, Throwable trace) {\n        this.successful = successful;\n        this.throwable = throwable;\n        this.trace = trace;\n    }", "AST": "Javadoc#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Fail the condition evaluation due to an exception with an optional trace. The purpose of the trace is to identify where in the code (which line) that contained the condition that failed. Note that a trace is independent of the <code>throwable</code> (i.e. the condition must necessarily have failed with an exception)", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "64", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/AssertionCondition.java", "methodName": "org.awaitility.core.AssertionCondition.AssertionCondition", "methodParameterType": "ThrowingRunnable#ConditionSettings#", "methodParameterName": "supplier#settings#", "methodBody": "public AssertionCondition(final ThrowingRunnable supplier, final ConditionSettings settings) {\n        if (supplier == null) {\n            throw new IllegalArgumentException(\"You must specify a supplier (was null).\");\n        }\n\n        conditionEvaluationHandler = new ConditionEvaluationHandler<Object>(null, settings);\n\n        final ConditionEvaluator callable = pollInterval -> {\n            try {\n                supplier.run();\n                conditionEvaluationHandler.handleConditionResultMatch(getMatchMessage(supplier, settings.getAlias()), null, pollInterval);\n                return new ConditionEvaluationResult(true);\n            } catch (AssertionError e) {\n                lastExceptionMessage = e.getMessage();\n                conditionEvaluationHandler.handleConditionResultMismatch(getMismatchMessage(supplier, lastExceptionMessage, settings.getAlias(), true), null, pollInterval);\n                return new ConditionEvaluationResult(false, null, e);\n            } catch (Throwable throwable) {\n                return CheckedExceptionRethrower.safeRethrow(throwable);\n            }\n        };\n        conditionAwaiter = new ConditionAwaiter(callable, settings) {\n            @Override\n            protected String getTimeoutMessage() {\n                return getMismatchMessage(supplier, lastExceptionMessage, settings.getAlias(), false);\n            }\n        };\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#NullLiteral#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#BooleanLiteral#ClassInstanceCreation#ReturnStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#NullLiteral#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleType#BooleanLiteral#NullLiteral#SimpleName#ClassInstanceCreation#ReturnStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#CatchClause#TryStatement#Block#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#BooleanLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(TryStatement(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral)ClassInstanceCreation)ReturnStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation(NullLiteral)NullLiteral(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)CatchClause)TryStatement)Block)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(BooleanLiteral)BooleanLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for AssertionCondition.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "65", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/AssertionCondition.java", "methodName": "org.awaitility.core.AssertionCondition.await", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Void await() {\n        conditionAwaiter.await(conditionEvaluationHandler);\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>await.</p>", "call_func_name": ["org.awaitility.core.ConditionAwaiter.await", "org.awaitility.core.AssertionCondition.await"], "call_func_parameter": [["org.awaitility.core.ConditionEvaluationHandler"], [""]], "passed_comments": [{"org.awaitility.core.ConditionAwaiter.await": "<p>await.</p>"}, {"org.awaitility.core.AssertionCondition.await": "<p>await.</p>"}]}, {"index": "66", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.ConditionFactory", "methodParameterType": "String#WaitConstraint#PollInterval#Duration#boolean#ExceptionIgnorer#ConditionEvaluationListener#ExecutorLifecycle#", "methodParameterName": "alias#timeoutConstraint#pollInterval#pollDelay#catchUncaughtExceptions#exceptionsIgnorer#conditionEvaluationListener#executorLifecycle#", "methodBody": "public ConditionFactory(final String alias, WaitConstraint timeoutConstraint, PollInterval pollInterval, Duration pollDelay,\n                            boolean catchUncaughtExceptions, ExceptionIgnorer exceptionsIgnorer,\n                            ConditionEvaluationListener conditionEvaluationListener, ExecutorLifecycle executorLifecycle) {\n        if (pollInterval == null) {\n            throw new IllegalArgumentException(\"pollInterval cannot be null\");\n        }\n        if (timeoutConstraint == null) {\n            throw new IllegalArgumentException(\"timeout cannot be null\");\n        }\n\n        this.alias = alias;\n        this.timeoutConstraint = timeoutConstraint;\n        this.pollInterval = pollInterval;\n        this.catchUncaughtExceptions = catchUncaughtExceptions;\n        this.pollDelay = pollDelay;\n        this.conditionEvaluationListener = conditionEvaluationListener;\n        this.exceptionsIgnorer = exceptionsIgnorer;\n        this.executorLifecycle = executorLifecycle;\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instantiates a new condition factory.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "67", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.conditionEvaluationListener", "methodParameterType": "ConditionEvaluationListener#", "methodParameterName": "conditionEvaluationListener#", "methodBody": "public ConditionFactory conditionEvaluationListener(ConditionEvaluationListener conditionEvaluationListener) {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, catchUncaughtExceptions,\n                exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Handle condition evaluation results each time evaluation of a condition occurs. Works only with a Hamcrest matcher-based condition.", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "68", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.timeout", "methodParameterType": "Duration#", "methodParameterName": "timeout#", "methodBody": "public ConditionFactory timeout(Duration timeout) {\n        return atMost(timeout);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await at most <code>timeout</code> before throwing a timeout exception.", "call_func_name": ["org.awaitility.core.ConditionFactory.atMost"], "call_func_parameter": [["java.time.Duration"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.atMost": "Await at most <code>timeout</code> before throwing a timeout exception."}]}, {"index": "69", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.atMost", "methodParameterType": "Duration#", "methodParameterName": "timeout#", "methodBody": "public ConditionFactory atMost(Duration timeout) {\n        return new ConditionFactory(alias, timeoutConstraint.withMaxWaitTime(timeout), pollInterval, pollDelay,\n                catchUncaughtExceptions, exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await at most <code>timeout</code> before throwing a timeout exception.", "call_func_name": ["org.awaitility.constraint.WaitConstraint.withMaxWaitTime", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.time.Duration"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "70", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.during", "methodParameterType": "Duration#", "methodParameterName": "timeout#", "methodBody": "public ConditionFactory during(Duration timeout) {\n        return new ConditionFactory(alias, timeoutConstraint.withHoldPredicateTime(timeout), pollInterval, pollDelay,\n            catchUncaughtExceptions, exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await at the predicate holds during at least <code>timeout</code>", "call_func_name": ["org.awaitility.constraint.WaitConstraint.withHoldPredicateTime", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.time.Duration"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "71", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.during", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#unit#", "methodBody": "public ConditionFactory during(long timeout, TimeUnit unit) {\n        return during(DurationFactory.of(timeout, unit));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await at the predicate holds during at least <code>timeout</code>", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.core.ConditionFactory.during"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.during": "Await at the predicate holds during at least <code>timeout</code>"}]}, {"index": "72", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.alias", "methodParameterType": "String#", "methodParameterName": "alias#", "methodBody": "public ConditionFactory alias(String alias) {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay,\n                catchUncaughtExceptions, exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the alias", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "73", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.atLeast", "methodParameterType": "Duration#", "methodParameterName": "timeout#", "methodBody": "public ConditionFactory atLeast(Duration timeout) {\n        return new ConditionFactory(alias, timeoutConstraint.withMinWaitTime(timeout), pollInterval, pollDelay,\n                catchUncaughtExceptions, exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Condition has to be evaluated not earlier than <code>timeout</code> before throwing a timeout exception.", "call_func_name": ["org.awaitility.constraint.WaitConstraint.withMinWaitTime", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.time.Duration"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "74", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.atLeast", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#unit#", "methodBody": "public ConditionFactory atLeast(long timeout, TimeUnit unit) {\n        return atLeast(DurationFactory.of(timeout, unit));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Condition has to be evaluated not earlier than <code>timeout</code> before throwing a timeout exception.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.core.ConditionFactory.atLeast"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.atLeast": "Condition has to be evaluated not earlier than <code>timeout</code> before throwing a timeout exception."}]}, {"index": "75", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.between", "methodParameterType": "Duration#Duration#", "methodParameterName": "atLeast#atMost#", "methodBody": "public ConditionFactory between(Duration atLeast, Duration atMost) {\n        return atLeast(atLeast).and().atMost(atMost);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specifies the duration window which has to be satisfied during operation execution. In case operation is executed before <code>atLeast</code> or after <code>atMost</code> timeout exception is thrown.", "call_func_name": ["org.awaitility.core.ConditionFactory.atLeast", "org.awaitility.core.ConditionFactory.and", "org.awaitility.core.ConditionFactory.atMost"], "call_func_parameter": [["java.time.Duration"], [""], ["java.time.Duration"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.atLeast": "Condition has to be evaluated not earlier than <code>timeout</code> before throwing a timeout exception."}, {"org.awaitility.core.ConditionFactory.and": "A method to increase the readability of the Awaitility DSL. It simply returns the same condition factory instance."}, {"org.awaitility.core.ConditionFactory.atMost": "Await at most <code>timeout</code> before throwing a timeout exception."}]}, {"index": "76", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.between", "methodParameterType": "long#TimeUnit#long#TimeUnit#", "methodParameterName": "atLeastDuration#atLeastTimeUnit#atMostDuration#atMostTimeUnit#", "methodBody": "public ConditionFactory between(long atLeastDuration, TimeUnit atLeastTimeUnit, long atMostDuration, TimeUnit atMostTimeUnit) {\n        return between(DurationFactory.of(atLeastDuration, atLeastTimeUnit), DurationFactory.of(atMostDuration, atMostTimeUnit));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specifies the duration window which has to be satisfied during operation execution. In case operation is executed before <code>atLeastDuration</code> or after <code>atMostDuration</code> timeout exception is thrown.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.core.ConditionFactory.between"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration", "java.time.Duration"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.between": "Specifies the duration window which has to be satisfied during operation execution. In case operation is executed before <code>atLeast</code> or after <code>atMost</code> timeout exception is thrown."}]}, {"index": "77", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.forever", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory forever() {\n        return new ConditionFactory(alias, AtMostWaitConstraint.FOREVER, pollInterval, pollDelay,\n                catchUncaughtExceptions, exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await forever until the condition is satisfied. Caution: You can block subsequent tests and the entire build can hang indefinitely, it's recommended to always use a timeout.", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "78", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.pollInterval", "methodParameterType": "Duration#", "methodParameterName": "pollInterval#", "methodBody": "public ConditionFactory pollInterval(Duration pollInterval) {\n        return new ConditionFactory(alias, timeoutConstraint, new FixedPollInterval(pollInterval), pollDelay, catchUncaughtExceptions,\n                exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the polling interval Awaitility will use for this await statement. This means the frequency in which the condition is checked for completion. <p> Note that the poll delay will be automatically set as to the same value as the interval (if using a  {@link FixedPollInterval}) unless it's specified explicitly using {@link #pollDelay(Duration)},  {@link #pollDelay(long,TimeUnit)} or{@link org.awaitility.core.ConditionFactory#pollDelay(java.time.Duration)}. </p>", "call_func_name": ["org.awaitility.pollinterval.FixedPollInterval.<init>", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.time.Duration"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "79", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.timeout", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#unit#", "methodBody": "public ConditionFactory timeout(long timeout, TimeUnit unit) {\n        return atMost(timeout, unit);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await at most <code>timeout</code> before throwing a timeout exception.", "call_func_name": ["org.awaitility.core.ConditionFactory.atMost"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.atMost": "Await at most <code>timeout</code> before throwing a timeout exception."}]}, {"index": "80", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.pollDelay", "methodParameterType": "long#TimeUnit#", "methodParameterName": "delay#unit#", "methodBody": "public ConditionFactory pollDelay(long delay, TimeUnit unit) {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, DurationFactory.of(delay, unit),\n                catchUncaughtExceptions, exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the delay that will be used before Awaitility starts polling for the result the first time. If you don't specify a poll delay explicitly it'll be the same as the poll interval.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "81", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.pollDelay", "methodParameterType": "Duration#", "methodParameterName": "pollDelay#", "methodBody": "public ConditionFactory pollDelay(Duration pollDelay) {\n        if (pollDelay == null) {\n            throw new IllegalArgumentException(\"pollDelay cannot be null\");\n        }\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, catchUncaughtExceptions,\n                exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the delay that will be used before Awaitility starts polling for the result the first time. If you don't specify a poll delay explicitly it'll be the same as the poll interval.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "82", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.atMost", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#unit#", "methodBody": "public ConditionFactory atMost(long timeout, TimeUnit unit) {\n        return atMost(DurationFactory.of(timeout, unit));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await at most <code>timeout</code> before throwing a timeout exception.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.core.ConditionFactory.atMost"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.atMost": "Await at most <code>timeout</code> before throwing a timeout exception."}]}, {"index": "83", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.pollInterval", "methodParameterType": "long#TimeUnit#", "methodParameterName": "pollInterval#unit#", "methodBody": "public ConditionFactory pollInterval(long pollInterval, TimeUnit unit) {\n        PollInterval fixedPollInterval = new FixedPollInterval(DurationFactory.of(pollInterval, unit));\n        return new ConditionFactory(alias, timeoutConstraint, fixedPollInterval, definePollDelay(pollDelay, fixedPollInterval),\n                catchUncaughtExceptions, exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the polling interval Awaitility will use for this await statement. This means the frequency in which the condition is checked for completion. <p>&nbsp;</p> Note that the poll delay will be automatically set as to the same value as the interval unless it's specified explicitly using {@link #pollDelay(Duration)},  {@link #pollDelay(long,TimeUnit)} or{@link org.awaitility.core.ConditionFactory#pollDelay(java.time.Duration)} , orConditionFactory#andWithPollDelay(long, TimeUnit)}. This is the same as creating a  {@link FixedPollInterval}.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.pollinterval.FixedPollInterval.<init>", "org.awaitility.core.ConditionFactory.definePollDelay", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"], ["java.time.Duration", "org.awaitility.pollinterval.PollInterval"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.definePollDelay": "Ensures backward compatibility (especially that poll delay is the same as poll interval for fixed poll interval). It also make sure that poll delay is  {@link Duration#ZERO} for all other poll intervals if poll delay was not explicitlydefined. If poll delay was explicitly defined the it will just be returned."}]}, {"index": "84", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.catchUncaughtExceptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory catchUncaughtExceptions() {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, true, exceptionsIgnorer,\n                conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to catch uncaught exceptions from other threads. This is useful in multi-threaded systems when you want your test to fail regardless of which thread throwing the exception. Default is <code>true</code>.", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "85", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.ignoreExceptionsInstanceOf", "methodParameterType": "Class<? extends Throwable>#", "methodParameterName": "exceptionType#", "methodBody": "public ConditionFactory ignoreExceptionsInstanceOf(final Class<? extends Throwable> exceptionType) {\n        if (exceptionType == null) {\n            throw new IllegalArgumentException(\"exceptionType cannot be null\");\n        }\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, catchUncaughtExceptions,\n                new PredicateExceptionIgnorer(e -> exceptionType.isAssignableFrom(e.getClass())),\n                conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#LambdaExpression#ClassInstanceCreation#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)LambdaExpression)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore exceptions instance of the supplied exceptionType type. Exceptions will be treated as evaluating to <code>false</code>. This is useful in situations where the evaluated conditions may temporarily throw exceptions. <p/> <p>If you want to ignore a specific exceptionType then use  {@link #ignoreException(Class)}</p>", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.function.Predicate.test", "org.awaitility.core.PredicateExceptionIgnorer.<init>", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.Class"], ["java.util.function.Predicate"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "86", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.ignoreException", "methodParameterType": "Class<? extends Throwable>#", "methodParameterName": "exceptionType#", "methodBody": "public ConditionFactory ignoreException(final Class<? extends Throwable> exceptionType) {\n        if (exceptionType == null) {\n            throw new IllegalArgumentException(\"exception cannot be null\");\n        }\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, catchUncaughtExceptions,\n                new PredicateExceptionIgnorer(e -> e.getClass().equals(exceptionType)),\n                conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ClassInstanceCreation#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore a specific exception and <i>no</i> subclasses of this exception. Exceptions will be treated as evaluating to <code>false</code>. This is useful in situations where the evaluated conditions may temporarily throw exceptions. <p>If you want to ignore a subtypes of this exception then use  {@link #ignoreExceptionsInstanceOf(Class)}} </p>", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "java.util.function.Predicate.test", "org.awaitility.core.PredicateExceptionIgnorer.<init>", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String"], ["java.lang.Class"], ["java.util.function.Predicate"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "87", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.ignoreExceptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory ignoreExceptions() {\n        return ignoreExceptionsMatching(e -> true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#BooleanLiteral#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(BooleanLiteral)BooleanLiteral)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore <i>all</i> exceptions that occur during evaluation. Exceptions will be treated as evaluating to <code>false</code>. This is useful in situations where the evaluated conditions may temporarily throw exceptions.", "call_func_name": ["java.util.function.Predicate.test", "org.awaitility.core.ConditionFactory.ignoreExceptionsMatching"], "call_func_parameter": [[""], ["java.util.function.Predicate"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.ignoreExceptionsMatching": "Instruct Awaitility to ignore exceptions that occur during evaluation and matches the supplied <code>predicate</code>. Exceptions will be treated as evaluating to <code>false</code>. This is useful in situations where the evaluated conditions may temporarily throw exceptions."}]}, {"index": "88", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.ignoreNoExceptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory ignoreNoExceptions() {\n        return ignoreExceptionsMatching(e -> false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#VariableDeclarationFragment#BooleanLiteral#LambdaExpression#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(BooleanLiteral)BooleanLiteral)LambdaExpression)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to not ignore any exceptions that occur during evaluation. This is only useful if Awaitility is configured to ignore exceptions by default but you want to have a different behavior for a single test case.", "call_func_name": ["java.util.function.Predicate.test", "org.awaitility.core.ConditionFactory.ignoreExceptionsMatching"], "call_func_parameter": [[""], ["java.util.function.Predicate"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.ignoreExceptionsMatching": "Instruct Awaitility to ignore exceptions that occur during evaluation and matches the supplied <code>predicate</code>. Exceptions will be treated as evaluating to <code>false</code>. This is useful in situations where the evaluated conditions may temporarily throw exceptions."}]}, {"index": "89", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.ignoreExceptionsMatching", "methodParameterType": "Matcher<? super Throwable>#", "methodParameterName": "matcher#", "methodBody": "public ConditionFactory ignoreExceptionsMatching(Matcher<? super Throwable> matcher) {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, catchUncaughtExceptions,\n                new HamcrestExceptionIgnorer(matcher), conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore exceptions that occur during evaluation and matches the supplied Hamcrest matcher. Exceptions will be treated as evaluating to <code>false</code>. This is useful in situations where the evaluated conditions may temporarily throw exceptions.", "call_func_name": ["org.awaitility.core.HamcrestExceptionIgnorer.<init>", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["org.hamcrest.Matcher"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "90", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.ignoreExceptionsMatching", "methodParameterType": "Predicate<? super Throwable>#", "methodParameterName": "predicate#", "methodBody": "public ConditionFactory ignoreExceptionsMatching(Predicate<? super Throwable> predicate) {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, catchUncaughtExceptions,\n                new PredicateExceptionIgnorer(predicate), conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore exceptions that occur during evaluation and matches the supplied <code>predicate</code>. Exceptions will be treated as evaluating to <code>false</code>. This is useful in situations where the evaluated conditions may temporarily throw exceptions.", "call_func_name": ["org.awaitility.core.PredicateExceptionIgnorer.<init>", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.util.function.Predicate"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "91", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.await", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory await() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await for an asynchronous operation. This method returns the same {@link org.awaitility.core.ConditionFactory} instance and is used only to get a morefluent-like syntax.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "92", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.await", "methodParameterType": "String#", "methodParameterName": "alias#", "methodBody": "public ConditionFactory await(String alias) {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, catchUncaughtExceptions,\n                exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await for an asynchronous operation and give this await instance a particular name. This is useful in cases when you have several await statements in one test and you want to know which one that fails (the alias will be shown if a timeout exception occurs).", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "93", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.and", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory and() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A method to increase the readability of the Awaitility DSL. It simply returns the same condition factory instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "94", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.with", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory with() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A method to increase the readability of the Awaitility DSL. It simply returns the same condition factory instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "95", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.then", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory then() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A method to increase the readability of the Awaitility DSL. It simply returns the same condition factory instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "96", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.given", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory given() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "A method to increase the readability of the Awaitility DSL. It simply returns the same condition factory instance.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "97", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.dontCatchUncaughtExceptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory dontCatchUncaughtExceptions() {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, false,\n                exceptionsIgnorer, conditionEvaluationListener, executorLifecycle);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Don't catch uncaught exceptions in other threads. This will <i>not</i> make the await statement fail if exceptions occur in other threads.", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "98", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.pollExecutorService", "methodParameterType": "ExecutorService#", "methodParameterName": "executorService#", "methodBody": "public ConditionFactory pollExecutorService(ExecutorService executorService) {\n        if (executorService instanceof ScheduledExecutorService) {\n            throw new IllegalArgumentException(\"Poll executor service cannot be an instance of \" + ScheduledExecutorService.class.getName());\n        }\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, false,\n                exceptionsIgnorer, conditionEvaluationListener, ExecutorLifecycle.withoutCleanup(executorService));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleType#StringLiteral#SimpleName#SimpleType#TypeLiteral#SimpleName#MethodInvocation#InfixExpression#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(TypeLiteral(SimpleType(SimpleName)SimpleName)SimpleType)TypeLiteral(SimpleName)SimpleName)MethodInvocation)InfixExpression)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify the executor service whose threads will be used to evaluate the poll condition in Awaitility. Note that the executor service must be shutdown manually! This is an advanced feature and it should only be used sparingly.", "call_func_name": ["java.lang.StringBuilder.<init>", "java.lang.StringBuilder.append", "java.lang.Class.getName", "java.lang.StringBuilder.toString", "java.lang.IllegalArgumentException.<init>", "org.awaitility.core.ExecutorLifecycle.withoutCleanup", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [[""], ["java.lang.String"], [""], [""], ["java.lang.String"], ["java.util.concurrent.ExecutorService"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "99", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.pollThread", "methodParameterType": "Function<Runnable,Thread>#", "methodParameterName": "threadSupplier#", "methodBody": "public ConditionFactory pollThread(final Function<Runnable, Thread> threadSupplier) {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, false,\n                exceptionsIgnorer, conditionEvaluationListener, ExecutorLifecycle.withNormalCleanupBehavior(() -> InternalExecutorServiceFactory.create(threadSupplier)));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Specify a thread supplier whose thread will be used to evaluate the poll condition in Awaitility. The supplier will be called only once and the thread it returns will be reused during all condition evaluations. This is an advanced feature and it should only be used sparingly.", "call_func_name": ["java.util.function.Supplier.get", "org.awaitility.core.ExecutorLifecycle.withNormalCleanupBehavior", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.util.function.Function"], ["java.util.function.Supplier"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "100", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.pollInSameThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionFactory pollInSameThread() {\n        return new ConditionFactory(alias, timeoutConstraint, pollInterval, pollDelay, false,\n                exceptionsIgnorer, conditionEvaluationListener, ExecutorLifecycle.withNormalCleanupBehavior(InternalExecutorServiceFactory::sameThreadExecutorService));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Instructs Awaitility to execute the polling of the condition from the same as the test. This is an advanced feature and you should be careful when combining this with conditions that wait forever (or a long time) since Awaitility cannot interrupt the thread when it's using the same thread as the test. For safety you should always combine tests using this feature with a test framework specific timeout, for example in JUnit: <pre>", "call_func_name": ["java.util.function.Supplier.get", "org.awaitility.core.ExecutorLifecycle.withNormalCleanupBehavior", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [[""], ["java.util.function.Supplier"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "101", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.until", "methodParameterType": "Callable<T>#Matcher<? super T>#", "methodParameterName": "supplier#matcher#", "methodBody": "public <T> T until(final Callable<T> supplier, final Matcher<? super T> matcher) {\n        return until(new CallableHamcrestCondition<>(supplier, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await until a  {@link java.util.concurrent.Callable} supplies a value matching the specified{@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().until(numberOfPersons(), is(greaterThan(2))); </pre> <p>&nbsp;</p> where \"numberOfPersons()\" returns a standard  {@link java.util.concurrent.Callable}: <p>&nbsp;</p> <pre> private Callable&lt;Integer&gt; numberOfPersons() { return new Callable&lt;Integer&gt;() { public Integer call() { return personRepository.size(); } }; } </pre> <p>&nbsp;</p> Using a generic  {@link java.util.concurrent.Callable} as done by using this version of \"until\"allows you to reuse the \"numberOfPersons()\" definition in multiple await statements. I.e. you can easily create another await statement (perhaps in a different test case) using e.g. <p>&nbsp;</p> <pre> await().until(numberOfPersons(), is(equalTo(6))); </pre>", "call_func_name": ["org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "102", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.until", "methodParameterType": "Callable<T>#Predicate<? super T>#", "methodParameterName": "supplier#predicate#", "methodBody": "public <T> T until(final Callable<T> supplier, final Predicate<? super T> predicate) {\n        return until(supplier, new TypeSafeMatcher<T>() {\n            @Override\n            protected void describeMismatchSafely(T item, Description description) {\n                description.appendText(\"it returned <false> for input of \").appendValue(item);\n            }\n\n            @Override\n            public void describeTo(Description description) {\n                description.appendText(\"the predicate to return <true>\");\n            }\n\n            @Override\n            protected boolean matchesSafely(T item) {\n                return predicate.test(item);\n            }\n        });\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Wait until the given supplier matches the supplied predicate. For example: <pre> await().until(myRepository::count, cnt -> cnt == 2); </pre>", "call_func_name": ["org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [["java.util.concurrent.Callable", "org.hamcrest.Matcher"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.until": "Await until a  {@link java.util.concurrent.Callable} supplies a value matching the specified{@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().until(numberOfPersons(), is(greaterThan(2))); </pre> <p>&nbsp;</p> where \"numberOfPersons()\" returns a standard  {@link java.util.concurrent.Callable}: <p>&nbsp;</p> <pre> private Callable&lt;Integer&gt; numberOfPersons() { return new Callable&lt;Integer&gt;() { public Integer call() { return personRepository.size(); } }; } </pre> <p>&nbsp;</p> Using a generic  {@link java.util.concurrent.Callable} as done by using this version of \"until\"allows you to reuse the \"numberOfPersons()\" definition in multiple await statements. I.e. you can easily create another await statement (perhaps in a different test case) using e.g. <p>&nbsp;</p> <pre> await().until(numberOfPersons(), is(equalTo(6))); </pre>"}]}, {"index": "103", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAsserted", "methodParameterType": "ThrowingRunnable#", "methodParameterName": "assertion#", "methodBody": "public void untilAsserted(final ThrowingRunnable assertion) {\n        until(new AssertionCondition(assertion, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a  {@link java.lang.Runnable} supplier execution passes (ends without throwing an exception). E.g. with Java 8:<p>&nbsp;</p> <pre> await().untilAsserted(() -&gt; Assertions.assertThat(personRepository.size()).isEqualTo(6)); </pre> or <pre> await().untilAsserted(() -&gt; assertEquals(6, personRepository.size())); </pre> <p>&nbsp;</p> This method is intended to benefit from lambda expressions introduced in Java 8. It allows to use standard AssertJ/FEST Assert assertions (by the way also standard JUnit/TestNG assertions) to test asynchronous calls and systems. <p>&nbsp;</p> {@link java.lang.AssertionError} instances thrown by the supplier are treated as an assertion failure and proper error message is propagated on timeout.Other exceptions are rethrown immediately as an execution errors. <p>&nbsp;</p> While technically it is completely valid to use plain Runnable class in Java 7 code, the resulting expression is very verbose and can decrease the readability of the test case, e.g. <p>&nbsp;</p> <pre> await().untilAsserted(new Runnable() { public void run() { Assertions.assertThat(personRepository.size()).isEqualTo(6); } }); </pre> <p>&nbsp;</p> <b>NOTE:</b><br> Be <i>VERY</i> careful so that you're not using this method incorrectly in languages (like Kotlin and Groovy) that doesn't disambiguate between a  {@link ThrowingRunnable} that doesn't return anything (void) and {@link Callable} that returns a value.For example in Kotlin you can do like this: <p>&nbsp;</p> <pre> await().untilAsserted { true == false } </pre> and the compiler won't complain with an error (as is the case in Java). If you were to execute this test in Kotlin it'll pass!", "call_func_name": ["org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.AssertionCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["org.awaitility.core.ThrowingRunnable", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "104", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAtomic", "methodParameterType": "AtomicInteger#Matcher<? super Integer>#", "methodParameterName": "atomic#matcher#", "methodBody": "public Integer untilAtomic(final AtomicInteger atomic, final Matcher<? super Integer> matcher) {\n        return until(new CallableHamcrestCondition<>(new Callable<Integer>() {\n            public Integer call() {\n                return atomic.get();\n            }\n        }, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(AnonymousClassDeclaration(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await until a Atomic variable has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAtomic(myAtomic, is(greaterThan(2))); </pre>", "call_func_name": ["org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "105", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAtomic", "methodParameterType": "AtomicLong#Matcher<? super Long>#", "methodParameterName": "atomic#matcher#", "methodBody": "public Long untilAtomic(final AtomicLong atomic, final Matcher<? super Long> matcher) {\n        return until(new CallableHamcrestCondition<>(atomic::get, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await until a Atomic variable has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAtomic(myAtomic, is(greaterThan(2))); </pre>", "call_func_name": ["java.lang.Object.getClass", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.atomic.AtomicLong"], [""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "106", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAtomic", "methodParameterType": "AtomicBoolean#Matcher<? super Boolean>#", "methodParameterName": "atomic#matcher#", "methodBody": "public void untilAtomic(final AtomicBoolean atomic, final Matcher<? super Boolean> matcher) {\n        until(new CallableHamcrestCondition<>(atomic::get, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a Atomic variable has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAtomic(myAtomic, is(greaterThan(2))); </pre>", "call_func_name": ["java.lang.Object.getClass", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.atomic.AtomicBoolean"], [""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "107", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilTrue", "methodParameterType": "AtomicBoolean#", "methodParameterName": "atomic#", "methodBody": "public void untilTrue(final AtomicBoolean atomic) {\n        untilAtomic(atomic, anyOf(is(Boolean.TRUE), is(true)));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a Atomic boolean becomes true.", "call_func_name": ["org.hamcrest.Matchers.is", "java.lang.Boolean.valueOf", "org.hamcrest.Matchers.anyOf", "org.awaitility.core.ConditionFactory.untilAtomic"], "call_func_parameter": [["java.lang.Object"], ["boolean"], ["org.hamcrest.Matcher", "org.hamcrest.Matcher"], ["java.util.concurrent.atomic.AtomicBoolean", "org.hamcrest.Matcher"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.untilAtomic": "Await until a Atomic variable has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAtomic(myAtomic, is(greaterThan(2))); </pre>"}]}, {"index": "108", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilFalse", "methodParameterType": "AtomicBoolean#", "methodParameterName": "atomic#", "methodBody": "public void untilFalse(final AtomicBoolean atomic) {\n        untilAtomic(atomic, anyOf(is(Boolean.FALSE), is(false)));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#QualifiedName#MethodInvocation#SimpleName#BooleanLiteral#MethodInvocation#MethodInvocation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)MethodInvocation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a Atomic boolean becomes false.", "call_func_name": ["org.hamcrest.Matchers.is", "java.lang.Boolean.valueOf", "org.hamcrest.Matchers.anyOf", "org.awaitility.core.ConditionFactory.untilAtomic"], "call_func_parameter": [["java.lang.Object"], ["boolean"], ["org.hamcrest.Matcher", "org.hamcrest.Matcher"], ["java.util.concurrent.atomic.AtomicBoolean", "org.hamcrest.Matcher"]], "passed_comments": [{"org.awaitility.core.ConditionFactory.untilAtomic": "Await until a Atomic variable has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAtomic(myAtomic, is(greaterThan(2))); </pre>"}]}, {"index": "109", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAdder", "methodParameterType": "LongAdder#Matcher<? super Long>#", "methodParameterName": "adder#matcher#", "methodBody": "public void untilAdder(final LongAdder adder, final Matcher<? super Long> matcher) {\n        until(new CallableHamcrestCondition<>(adder::longValue, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a  {@link LongAdder} has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAdder(myLongAdder, is(greaterThan(2L))); </pre>", "call_func_name": ["java.lang.Object.getClass", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.atomic.LongAdder"], [""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "110", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAdder", "methodParameterType": "DoubleAdder#Matcher<? super Double>#", "methodParameterName": "adder#matcher#", "methodBody": "public void untilAdder(final DoubleAdder adder, final Matcher<? super Double> matcher) {\n        until(new CallableHamcrestCondition<>(adder::doubleValue, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a  {@link DoubleAdder} has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAdder(myDoubleAdder, is(greaterThan(2.0d))); </pre>", "call_func_name": ["java.lang.Object.getClass", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.atomic.DoubleAdder"], [""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "111", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAccumulator", "methodParameterType": "LongAccumulator#Matcher<? super Long>#", "methodParameterName": "accumulator#matcher#", "methodBody": "public void untilAccumulator(final LongAccumulator accumulator, final Matcher<? super Long> matcher) {\n        until(new CallableHamcrestCondition<>(accumulator::longValue, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a  {@link LongAccumulator} has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAccumulator(myLongAccumulator, is(greaterThan(2L))); </pre>", "call_func_name": ["java.lang.Object.getClass", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.atomic.LongAccumulator"], [""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "112", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAccumulator", "methodParameterType": "DoubleAccumulator#Matcher<? super Double>#", "methodParameterName": "accumulator#matcher#", "methodBody": "public void untilAccumulator(final DoubleAccumulator accumulator, final Matcher<? super Double> matcher) {\n        until(new CallableHamcrestCondition<>(accumulator::doubleValue, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a  {@link DoubleAccumulator} has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAccumulator(myDoubleAccumulator, is(greaterThan(2.0d))); </pre>", "call_func_name": ["java.lang.Object.getClass", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.atomic.DoubleAccumulator"], [""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "113", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.untilAtomic", "methodParameterType": "AtomicReference<V>#Matcher<? super V>#", "methodParameterName": "atomic#matcher#", "methodBody": "public <V> V untilAtomic(final AtomicReference<V> atomic, final Matcher<? super V> matcher) {\n        return until(new CallableHamcrestCondition<>(atomic::get, matcher, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ExpressionMethodReference#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await until a Atomic variable has a value matching the specified {@link org.hamcrest.Matcher}. E.g. <p>&nbsp;</p> <pre> await().untilAtomic(myAtomic, is(greaterThan(2))); </pre>", "call_func_name": ["java.lang.Object.getClass", "java.util.concurrent.Callable.call", "org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableHamcrestCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.atomic.AtomicReference"], [""], ["java.util.concurrent.Callable", "org.hamcrest.Matcher", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "114", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.until", "methodParameterType": "Callable<Boolean>#", "methodParameterName": "conditionEvaluator#", "methodBody": "public void until(Callable<Boolean> conditionEvaluator) {\n        until(new CallableCondition(conditionEvaluator, generateConditionSettings()));\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Await until a  {@link java.util.concurrent.Callable} returns <code>true</code>. This is methodis not as generic as the other variants of \"until\" but it allows for a more precise and in some cases even more english-like syntax. E.g. <p>&nbsp;</p> <pre> await().until(numberOfPersonsIsEqualToThree()); </pre> <p>&nbsp;</p> where \"numberOfPersonsIsEqualToThree()\" returns a standard {@link java.util.concurrent.Callable} of type {@link java.lang.Boolean}: <p>&nbsp;</p> <pre> private Callable&lt;Boolean&gt; numberOfPersons() { return new Callable&lt;Boolean&gt;() { public Boolean call() { return personRepository.size() == 3; } }; } </pre>", "call_func_name": ["org.awaitility.core.ConditionFactory.generateConditionSettings", "org.awaitility.core.CallableCondition.<init>", "org.awaitility.core.ConditionFactory.until"], "call_func_parameter": [[""], ["java.util.concurrent.Callable", "org.awaitility.core.ConditionSettings"], ["org.awaitility.core.Condition"]], "passed_comments": "/"}, {"index": "115", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionFactory.java", "methodName": "org.awaitility.core.ConditionFactory.definePollDelay", "methodParameterType": "Duration#PollInterval#", "methodParameterName": "pollDelay#pollInterval#", "methodBody": "private Duration definePollDelay(Duration pollDelay, PollInterval pollInterval) {\n        final Duration pollDelayToUse;\n        // If a poll delay is null then a poll delay has not been explicitly defined by the user\n        if (pollDelay == null) {\n            if (pollInterval instanceof FixedPollInterval) {\n                pollDelayToUse = pollInterval.next(1, Duration.ZERO); // Will return same poll delay as poll interval\n            } else {\n                pollDelayToUse = Duration.ZERO; // Default poll delay for non-fixed poll intervals\n            }\n        } else {\n            // Poll delay was explicitly defined, use it!\n            pollDelayToUse = pollDelay;\n        }\n        return pollDelayToUse;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#InstanceofExpression#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#SimpleName#QualifiedName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(IfStatement(InstanceofExpression(SimpleName)SimpleName(SimpleType(SimpleName)SimpleName)SimpleType)InstanceofExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Ensures backward compatibility (especially that poll delay is the same as poll interval for fixed poll interval). It also make sure that poll delay is  {@link Duration#ZERO} for all other poll intervals if poll delay was not explicitlydefined. If poll delay was explicitly defined the it will just be returned.", "call_func_name": ["org.awaitility.pollinterval.PollInterval.next"], "call_func_parameter": [["int", "java.time.Duration"]], "passed_comments": [{"org.awaitility.pollinterval.PollInterval.next": "Generate the next poll interval ( {@link Duration}) based on the previous  {@link Duration} and/or the <code>poll count</code>.The first time the poll interval is called the poll delay is used as <code>previousDuration</code>. By default the poll delay is equal to  {@link Duration#ZERO}."}]}, {"index": "116", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/FieldSupplierBuilder.java", "methodName": "org.awaitility.core.FieldSupplierBuilder.FieldSupplierBuilder", "methodParameterType": "Object#", "methodParameterName": "object#", "methodBody": "public FieldSupplierBuilder(Object object) {\n        assertNotNullParameter(object, \"Object passed to fieldIn\");\n        this.object = object;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#StringLiteral#MethodInvocation#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for FieldSupplierBuilder.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "117", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/FieldSupplierBuilder.java", "methodName": "org.awaitility.core.FieldSupplierBuilder.ofType", "methodParameterType": "Class<T>#", "methodParameterName": "fieldType#", "methodBody": "public <T> NameAndAnnotationFieldSupplier<T> ofType(Class<T> fieldType) {\n        this.expectedFieldType = fieldType;\n        return new NameAndAnnotationFieldSupplier<T>();\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ReturnStatement(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Find a field based on a type. E.g. <p>&nbsp;</p> <code> await().until(fieldIn(object).ofType(int.class), equalTo(2)); </code> <p>&nbsp;</p> You can also specify the field more accurately by continuing the statement: E.g. <code> await().until(fieldIn(object).ofType(int.class).andWithName(\"fieldName\"), equalTo(2)); </code> <p>&nbsp;</p> or <p>&nbsp;</p> <code> await().until(fieldIn(object).ofType(int.class).andAnnotatedWith(MyAnnotation.class).andWithName(\"fieldName\"), equalTo(2)); </code>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "118", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/CallableHamcrestCondition.java", "methodName": "org.awaitility.core.CallableHamcrestCondition.CallableHamcrestCondition", "methodParameterType": "Callable<T>#Matcher<? super T>#ConditionSettings#", "methodParameterName": "supplier#matcher#settings#", "methodBody": "public CallableHamcrestCondition(final Callable<T> supplier, final Matcher<? super T> matcher, ConditionSettings settings) {\n        super(supplier, matcher, settings);\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SuperConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(SuperConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)SuperConstructorInvocation)Block)MethodDeclaration", "methodDoc": "<p>Constructor for CallableHamcrestCondition.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "119", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/SameThreadExecutorService.java", "methodName": "org.awaitility.core.SameThreadExecutorService.startTask", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void startTask() {\n        lock.lock();\n        try {\n            if (isShutdown()) {\n                throw new RejectedExecutionException(\"Executor already shutdown\");\n            }\n            runningTasks++;\n        } finally {\n            lock.unlock();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#PostfixExpression#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Checks if the executor has been shut down and increments the running task count.", "call_func_name": ["java.util.concurrent.locks.Lock.lock", "org.awaitility.core.SameThreadExecutorService.isShutdown", "java.util.concurrent.RejectedExecutionException.<init>", "java.util.concurrent.locks.Lock.unlock"], "call_func_parameter": [[""], [""], ["java.lang.String"], [""]], "passed_comments": "/"}, {"index": "120", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/SameThreadExecutorService.java", "methodName": "org.awaitility.core.SameThreadExecutorService.endTask", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "private void endTask() {\n        lock.lock();\n        try {\n            runningTasks--;\n            if (isTerminated()) {\n                termination.signalAll();\n            }\n        } finally {\n            lock.unlock();\n        }\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#PostfixExpression#ExpressionStatement#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(TryStatement(Block(ExpressionStatement(PostfixExpression(SimpleName)SimpleName)PostfixExpression)ExpressionStatement(IfStatement(MethodInvocation(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "Decrements the running task count.", "call_func_name": ["java.util.concurrent.locks.Lock.lock", "org.awaitility.core.SameThreadExecutorService.isTerminated", "java.util.concurrent.locks.Condition.signalAll", "java.util.concurrent.locks.Lock.unlock"], "call_func_parameter": [[""], [""], [""], [""]], "passed_comments": "/"}, {"index": "121", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.ConditionSettings", "methodParameterType": "String#boolean#WaitConstraint#PollInterval#Duration#ConditionEvaluationListener#ExceptionIgnorer#ExecutorLifecycle#", "methodParameterName": "alias#catchUncaughtExceptions#waitConstraint#pollInterval#pollDelay#conditionEvaluationListener#ignoreExceptions#executorLifecycle#", "methodBody": "ConditionSettings(String alias, boolean catchUncaughtExceptions, WaitConstraint waitConstraint,\n                      PollInterval pollInterval, Duration pollDelay, ConditionEvaluationListener conditionEvaluationListener,\n                      ExceptionIgnorer ignoreExceptions, ExecutorLifecycle executorLifecycle) {\n        if (waitConstraint == null) {\n            throw new IllegalArgumentException(\"You must specify a maximum waiting time (was null).\");\n        }\n        if (pollInterval == null) {\n            throw new IllegalArgumentException(\"You must specify a poll interval (was null).\");\n        }\n        this.executorLifecycle = executorLifecycle;\n        this.alias = alias;\n        this.waitConstraint = waitConstraint;\n        this.pollInterval = pollInterval;\n        this.pollDelay = pollDelay;\n        this.catchUncaughtExceptions = catchUncaughtExceptions;\n        this.conditionEvaluationListener = conditionEvaluationListener;\n        this.ignoreExceptions = ignoreExceptions;\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for ConditionSettings.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "122", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getAlias", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public String getAlias() {\n        return alias;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Getter for the field <code>alias</code>.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "123", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getMaxWaitTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getMaxWaitTime() {\n        return waitConstraint.getMaxWaitTime();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Returning maximum wait time from field <code>waitConstraint</code>.</p>", "call_func_name": ["org.awaitility.constraint.WaitConstraint.getMaxWaitTime"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "124", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getMinWaitTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getMinWaitTime() {\n        return waitConstraint.getMinWaitTime();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Returning minimum wait time from field <code>waitConstraint</code>.</p>", "call_func_name": ["org.awaitility.constraint.WaitConstraint.getMinWaitTime"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "125", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getHoldPredicateTime", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getHoldPredicateTime() {\n        return waitConstraint.getHoldPredicateTime();\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Returning hold predicate wait time from field <code>waitConstraint</code>.</p>", "call_func_name": ["org.awaitility.constraint.WaitConstraint.getHoldPredicateTime"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "126", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getPollInterval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public PollInterval getPollInterval() {\n        return pollInterval;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Getter for the field <code>pollInterval</code>.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "127", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getPollDelay", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Duration getPollDelay() {\n        return pollDelay;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Getter for the field <code>pollDelay</code>.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "128", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.hasAlias", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean hasAlias() {\n        return alias != null;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#NullLiteral#InfixExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>hasAlias</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "129", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.shouldCatchUncaughtExceptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public boolean shouldCatchUncaughtExceptions() {\n        return catchUncaughtExceptions;\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>shouldCatchUncaughtExceptions.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "130", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getConditionEvaluationListener", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionEvaluationListener getConditionEvaluationListener() {\n        return conditionEvaluationListener;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>Getter for the field <code>conditionResultLogger</code></p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "131", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.shouldExceptionBeIgnored", "methodParameterType": "Throwable#", "methodParameterName": "e#", "methodBody": "public boolean shouldExceptionBeIgnored(Throwable e) {\n        return ignoreExceptions.shouldIgnoreException(e);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return true if a particular exception should be ignored", "call_func_name": ["org.awaitility.core.ExceptionIgnorer.shouldIgnoreException"], "call_func_parameter": [["java.lang.Throwable"]], "passed_comments": "/"}, {"index": "132", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionSettings.java", "methodName": "org.awaitility.core.ConditionSettings.getExecutorLifecycle", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ExecutorLifecycle getExecutorLifecycle() {\n        return executorLifecycle;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "@return The executor lifecycle", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "133", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionAwaiter.java", "methodName": "org.awaitility.core.ConditionAwaiter.ConditionAwaiter", "methodParameterType": "ConditionEvaluator#ConditionSettings#", "methodParameterName": "conditionEvaluator#conditionSettings#", "methodBody": "ConditionAwaiter(final ConditionEvaluator conditionEvaluator, final ConditionSettings conditionSettings) {\n        if (conditionEvaluator == null) {\n            throw new IllegalArgumentException(\"You must specify a condition (was null).\");\n        }\n        if (conditionSettings == null) {\n            throw new IllegalArgumentException(\"You must specify the condition settings (was null).\");\n        }\n        if (conditionSettings.shouldCatchUncaughtExceptions()) {\n            Thread.setDefaultUncaughtExceptionHandler(this);\n        }\n        this.conditionSettings = conditionSettings;\n        this.conditionEvaluator = conditionEvaluator;\n        this.executor = conditionSettings.getExecutorLifecycle().supplyExecutorService();\n        this.uncaughtThrowable = new AtomicReference<>();\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#ThisExpression#MethodInvocation#ExpressionStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#SimpleType#ParameterizedType#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ThisExpression)ThisExpression)MethodInvocation)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for ConditionAwaiter.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "134", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionAwaiter.java", "methodName": "org.awaitility.core.ConditionAwaiter.await", "methodParameterType": "ConditionEvaluationHandler<T>#", "methodParameterName": "conditionEvaluationHandler#", "methodBody": "public <T> void await(final ConditionEvaluationHandler<T> conditionEvaluationHandler) {\n        final Duration pollDelay = conditionSettings.getPollDelay();\n        final Duration maxWaitTime = conditionSettings.getMaxWaitTime();\n        final Duration minWaitTime = conditionSettings.getMinWaitTime();\n        final Duration holdPredicateWaitTime = conditionSettings.getHoldPredicateTime();\n\n        long pollingStartedNanos = System.nanoTime() - pollDelay.toMillis();\n\n        int pollCount = 0;\n        boolean succeededBeforeTimeout = false;\n        ConditionEvaluationResult lastResult = null;\n        Duration evaluationDuration = Duration.of(0, MILLIS);\n        Future<ConditionEvaluationResult> currentConditionEvaluation = null;\n        long firstSucceedSinceStarted = 0L;\n        try {\n            if (executor.isShutdown() || executor.isTerminated()) {\n                throw new IllegalStateException(\"The executor service that Awaitility is instructed to use has been shutdown so condition evaluation cannot be performed. Is there something wrong the thread or executor configuration?\");\n            }\n\n            conditionEvaluationHandler.start();\n            if (!pollDelay.isZero()) {\n                sleepUninterruptibly(pollDelay.toNanos(), NANOSECONDS);\n            }\n            Duration pollInterval = pollDelay;\n            while (maxWaitTime.compareTo(evaluationDuration) > 0) {\n                pollCount = pollCount + 1;\n                // Only wait for the next condition evaluation for at most what's remaining of\n                Duration maxWaitTimeForThisCondition = maxWaitTime.minus(evaluationDuration);\n                currentConditionEvaluation = executor.submit(new ConditionPoller(pollInterval));\n                // Wait for condition evaluation to complete with \"maxWaitTimeForThisCondition\" or else throw TimeoutException\n                lastResult = ChronoUnit.FOREVER.getDuration().equals(maxWaitTime) ? getUninterruptibly(currentConditionEvaluation) : getUninterruptibly(currentConditionEvaluation, maxWaitTimeForThisCondition);\n                if (lastResult.isSuccessful() && firstSucceedSinceStarted == 0L) {\n                    firstSucceedSinceStarted = System.nanoTime();\n                } else if (lastResult.isError()) {\n                    firstSucceedSinceStarted = 0L;\n                }\n                if (lastResult.isSuccessful() && (System.nanoTime() - firstSucceedSinceStarted >= holdPredicateWaitTime.toNanos() ) || lastResult.hasThrowable()) {\n                    break;\n                }\n                pollInterval = conditionSettings.getPollInterval().next(pollCount, pollInterval);\n                sleepUninterruptibly(pollInterval.toNanos(), NANOSECONDS);\n                evaluationDuration = calculateConditionEvaluationDuration(pollDelay, pollingStartedNanos);\n            }\n            evaluationDuration = calculateConditionEvaluationDuration(pollDelay, pollingStartedNanos);\n            succeededBeforeTimeout = maxWaitTime.compareTo(evaluationDuration) > 0;\n        } catch (TimeoutException e) {\n            lastResult = new ConditionEvaluationResult(false, null, e);\n        } catch (ExecutionException e) {\n            lastResult = new ConditionEvaluationResult(false, e.getCause(), null);\n        } catch (Throwable e) {\n            lastResult = new ConditionEvaluationResult(false, e, null);\n        } finally {\n            if (currentConditionEvaluation != null) {\n                // Cancelling future in order to avoid race-condition with last result for Hamcrest matchers\n                // See https://github.com/awaitility/awaitility/issues/109\n                currentConditionEvaluation.cancel(true);\n            }\n        }\n\n        try {\n            if (uncaughtThrowable.get() != null) {\n                throw uncaughtThrowable.get();\n            } else if (lastResult != null && lastResult.hasThrowable()) {\n                throw lastResult.getThrowable();\n            } else if (!succeededBeforeTimeout) {\n                final String message;\n                String timeoutMessage = getTimeoutMessage();\n                String durationAsString = formatAsString(maxWaitTime);\n                if (conditionSettings.hasAlias()) {\n                    message = String.format(\"Condition with alias '%s' didn't complete within %s because %s.\",\n                            conditionSettings.getAlias(), durationAsString, decapitalize(timeoutMessage));\n                } else {\n                    message = String.format(\"%s within %s.\", timeoutMessage, durationAsString);\n                }\n\n                Throwable cause = lastResult != null && lastResult.hasTrace() ? lastResult.getTrace() : null;\n                // Not all systems support deadlock detection so ignore if ThreadMXBean & ManagementFactory is not in classpath\n                if (existInCP(\"java.lang.management.ThreadMXBean\") && existInCP(\"java.lang.management.ManagementFactory\")) {\n                    java.lang.management.ThreadMXBean bean = java.lang.management.ManagementFactory.getThreadMXBean();\n                    try {\n                        long[] threadIds = bean.findDeadlockedThreads();\n                        if (threadIds != null) {\n                            cause = new DeadlockException(threadIds);\n                        }\n                    } catch (UnsupportedOperationException ignored) {\n                        // findDeadLockedThreads() not supported on this VM,\n                        // don't init trace and move on.\n                    }\n                }\n                throw new ConditionTimeoutException(message, cause);\n            } else if (evaluationDuration.compareTo(minWaitTime) < 0) {\n                String message = String.format(\"Condition was evaluated in %s which is earlier than expected minimum timeout %s\",\n                        formatAsString(evaluationDuration), formatAsString(minWaitTime));\n                throw new ConditionTimeoutException(message);\n            }\n        } catch (Throwable e) {\n            CheckedExceptionRethrower.safeRethrow(e);\n        } finally {\n            uncaughtThrowable.set(null);\n            conditionSettings.getExecutorLifecycle().executeNormalCleanupBehavior(executor);\n        }\n    }", "AST": "Javadoc#Modifier#SimpleName#TypeParameter#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#BooleanLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#NumberLiteral#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#NullLiteral#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#SimpleName#NumberLiteral#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleName#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#ConditionalExpression#Assignment#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#NumberLiteral#Assignment#ExpressionStatement#Block#IfStatement#IfStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#ParenthesizedExpression#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#BreakStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#WhileStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#BooleanLiteral#NullLiteral#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#BooleanLiteral#SimpleName#SimpleName#MethodInvocation#NullLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#CatchClause#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#BooleanLiteral#SimpleName#NullLiteral#ClassInstanceCreation#Assignment#ExpressionStatement#Block#CatchClause#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#TryStatement#SimpleName#SimpleName#MethodInvocation#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#ThrowStatement#Block#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#ThrowStatement#Block#SimpleName#PrefixExpression#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleName#MethodInvocation#NullLiteral#ConditionalExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#StringLiteral#MethodInvocation#SimpleName#StringLiteral#MethodInvocation#InfixExpression#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleType#SimpleName#SimpleName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#QualifiedName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#PrimitiveType#Dimension#ArrayType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Block#CatchClause#TryStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#NumberLiteral#InfixExpression#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#IfStatement#IfStatement#Block#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#CatchClause#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#TryStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(TypeParameter(SimpleName)SimpleName)TypeParameter(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(NullLiteral)NullLiteral)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(WhileStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ConditionalExpression(MethodInvocation(MethodInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConditionalExpression)Assignment)ExpressionStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(NumberLiteral)NumberLiteral)Assignment)ExpressionStatement)Block)IfStatement)IfStatement(IfStatement(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(ParenthesizedExpression(InfixExpression(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression)ParenthesizedExpression)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(BreakStatement)BreakStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)WhileStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression)Assignment)ExpressionStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral(NullLiteral)NullLiteral(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block)CatchClause(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(NullLiteral)NullLiteral)ClassInstanceCreation)Assignment)ExpressionStatement)Block)CatchClause(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)TryStatement(TryStatement(Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ThrowStatement)Block(IfStatement(PrefixExpression(SimpleName)SimpleName)PrefixExpression(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ConditionalExpression(InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NullLiteral)NullLiteral)ConditionalExpression)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation(MethodInvocation(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)InfixExpression(Block(VariableDeclarationStatement(SimpleType(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(QualifiedName(QualifiedName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(TryStatement(Block(VariableDeclarationStatement(ArrayType(PrimitiveType)PrimitiveType(Dimension)Dimension)ArrayType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block)Block)CatchClause)TryStatement)Block)IfStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(NumberLiteral)NumberLiteral)InfixExpression(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement)IfStatement)IfStatement)Block(CatchClause(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)CatchClause(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)TryStatement)Block)MethodDeclaration", "methodDoc": "<p>await.</p>", "call_func_name": ["org.awaitility.core.ConditionSettings.getPollDelay", "org.awaitility.core.ConditionSettings.getMaxWaitTime", "org.awaitility.core.ConditionSettings.getMinWaitTime", "org.awaitility.core.ConditionSettings.getHoldPredicateTime", "java.lang.System.nanoTime", "java.time.Duration.toMillis", "java.time.Duration.of", "java.util.concurrent.ExecutorService.isShutdown", "java.util.concurrent.ExecutorService.isTerminated", "java.lang.IllegalStateException.<init>", "org.awaitility.core.ConditionEvaluationHandler.start", "java.time.Duration.isZero", "java.time.Duration.toNanos", "org.awaitility.core.Uninterruptibles.sleepUninterruptibly", "java.time.Duration.compareTo", "java.time.Duration.minus", "java.util.concurrent.ExecutorService.submit", "java.time.temporal.ChronoUnit.getDuration", "java.time.Duration.equals", "org.awaitility.core.Uninterruptibles.getUninterruptibly", "org.awaitility.core.Uninterruptibles.getUninterruptibly", "org.awaitility.core.ConditionEvaluationResult.isSuccessful", "org.awaitility.core.ConditionEvaluationResult.isError", "org.awaitility.core.ConditionEvaluationResult.hasThrowable", "org.awaitility.core.ConditionSettings.getPollInterval", "org.awaitility.pollinterval.PollInterval.next", "org.awaitility.core.ConditionAwaiter.calculateConditionEvaluationDuration", "java.util.concurrent.Future.cancel", "org.awaitility.core.ConditionEvaluationResult.<init>", "java.util.concurrent.ExecutionException.getCause", "java.util.concurrent.atomic.AtomicReference.get", "org.awaitility.core.ConditionEvaluationResult.getThrowable", "org.awaitility.core.ConditionAwaiter.getTimeoutMessage", "org.awaitility.core.TemporalDuration.formatAsString", "org.awaitility.core.ConditionSettings.hasAlias", "org.awaitility.core.ConditionSettings.getAlias", "org.awaitility.core.ConditionAwaiter.decapitalize", "java.lang.String.format", "org.awaitility.core.ConditionEvaluationResult.hasTrace", "org.awaitility.core.ConditionEvaluationResult.getTrace", "org.awaitility.classpath.ClassPathResolver.existInCP", "java.lang.management.ManagementFactory.getThreadMXBean", "java.lang.management.ThreadMXBean.findDeadlockedThreads", "org.awaitility.core.DeadlockException.<init>", "org.awaitility.core.ConditionTimeoutException.<init>", "org.awaitility.core.ConditionTimeoutException.<init>", "java.util.concurrent.atomic.AtomicReference.set", "org.awaitility.core.ConditionSettings.getExecutorLifecycle", "org.awaitility.core.ExecutorLifecycle.executeNormalCleanupBehavior", "org.awaitility.core.CheckedExceptionRethrower.safeRethrow"], "call_func_parameter": [[""], [""], [""], [""], [""], [""], ["long", "java.time.temporal.TemporalUnit"], [""], [""], ["java.lang.String"], [""], [""], [""], ["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"], ["java.time.Duration"], ["java.util.concurrent.Callable"], [""], ["java.lang.Object"], ["java.util.concurrent.Future"], ["java.util.concurrent.Future", "java.time.Duration"], [""], [""], [""], [""], ["int", "java.time.Duration"], ["java.time.Duration", "long"], ["boolean"], ["boolean", "java.lang.Throwable", "java.lang.Throwable"], [""], [""], [""], [""], ["java.time.Duration"], [""], [""], ["java.lang.String"], ["java.lang.String", "java.lang.Object[]"], [""], [""], ["java.lang.String"], [""], [""], ["long[]"], ["java.lang.String", "java.lang.Throwable"], ["java.lang.String"], ["java.lang.Object"], [""], ["java.util.concurrent.ExecutorService"], ["java.lang.Throwable"]], "passed_comments": [{"org.awaitility.core.ConditionSettings.getPollDelay": "<p>Getter for the field <code>pollDelay</code>.</p>"}, {"org.awaitility.core.ConditionSettings.getMaxWaitTime": "<p>Returning maximum wait time from field <code>waitConstraint</code>.</p>"}, {"org.awaitility.core.ConditionSettings.getMinWaitTime": "<p>Returning minimum wait time from field <code>waitConstraint</code>.</p>"}, {"org.awaitility.core.ConditionSettings.getHoldPredicateTime": "<p>Returning hold predicate wait time from field <code>waitConstraint</code>.</p>"}, {"org.awaitility.core.Uninterruptibles.getUninterruptibly": "Invokes  {@code future.}{@link Future#get() get()} uninterruptibly."}, {"org.awaitility.core.Uninterruptibles.getUninterruptibly": "Invokes  {@code future.}{@link Future#get(long,TimeUnit) get(timeout, unit)} uninterruptibly."}, {"org.awaitility.core.ConditionSettings.getPollInterval": "<p>Getter for the field <code>pollInterval</code>.</p>"}, {"org.awaitility.pollinterval.PollInterval.next": "Generate the next poll interval ( {@link Duration}) based on the previous  {@link Duration} and/or the <code>poll count</code>.The first time the poll interval is called the poll delay is used as <code>previousDuration</code>. By default the poll delay is equal to  {@link Duration#ZERO}."}, {"org.awaitility.core.ConditionAwaiter.getTimeoutMessage": "<p>getTimeoutMessage.</p>"}, {"org.awaitility.core.ConditionSettings.hasAlias": "<p>hasAlias</p>"}, {"org.awaitility.core.ConditionSettings.getAlias": "<p>Getter for the field <code>alias</code>.</p>"}, {"org.awaitility.core.ConditionSettings.getExecutorLifecycle": "@return The executor lifecycle"}, {"org.awaitility.core.CheckedExceptionRethrower.safeRethrow": "<p>safeRethrow.</p>"}]}, {"index": "135", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionAwaiter.java", "methodName": "org.awaitility.core.ConditionAwaiter.getTimeoutMessage", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "protected abstract String getTimeoutMessage();", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)MethodDeclaration", "methodDoc": "<p>getTimeoutMessage.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "136", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionAwaiter.java", "methodName": "org.awaitility.core.ConditionAwaiter.uncaughtException", "methodParameterType": "Thread#Throwable#", "methodParameterName": "thread#throwable#", "methodBody": "@Override\n    public void uncaughtException(Thread thread, Throwable throwable) {\n        if (!conditionSettings.shouldExceptionBeIgnored(throwable)) {\n            uncaughtThrowable.set(throwable);\n            // We shutdown the executor \"now\" in order to fail the test immediately\n            conditionSettings.getExecutorLifecycle().executeUnexpectedCleanupBehavior(executor);\n        }\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#MethodInvocation#PrefixExpression#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(PrefixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)PrefixExpression(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ExpressionStatement(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement)Block)MethodDeclaration", "methodDoc": "{@inheritDoc}", "call_func_name": ["org.awaitility.core.ConditionSettings.shouldExceptionBeIgnored", "java.util.concurrent.atomic.AtomicReference.set", "org.awaitility.core.ConditionSettings.getExecutorLifecycle", "org.awaitility.core.ExecutorLifecycle.executeUnexpectedCleanupBehavior"], "call_func_parameter": [["java.lang.Throwable"], ["java.lang.Object"], [""], ["java.util.concurrent.ExecutorService"]], "passed_comments": [{"org.awaitility.core.ConditionSettings.shouldExceptionBeIgnored": "@return true if a particular exception should be ignored"}, {"org.awaitility.core.ConditionSettings.getExecutorLifecycle": "@return The executor lifecycle"}]}, {"index": "137", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/CallableCondition.java", "methodName": "org.awaitility.core.CallableCondition.CallableCondition", "methodParameterType": "Callable<Boolean>#ConditionSettings#", "methodParameterName": "matcher#settings#", "methodBody": "CallableCondition(final Callable<Boolean> matcher, ConditionSettings settings) {\n        conditionEvaluationHandler = new ConditionEvaluationHandler<Object>(null, settings);\n        ConditionEvaluationWrapper conditionEvaluationWrapper = new ConditionEvaluationWrapper(matcher, settings, conditionEvaluationHandler);\n        conditionAwaiter = new ConditionAwaiter(conditionEvaluationWrapper, settings) {\n            @SuppressWarnings(\"rawtypes\")\n            @Override\n            protected String getTimeoutMessage() {\n                if (timeout_message != null) {\n                    return timeout_message;\n                }\n                final String timeoutMessage;\n                if (matcher == null) {\n                    timeoutMessage = \"\";\n                } else {\n                    final Class<? extends Callable> type = matcher.getClass();\n                    final Method enclosingMethod = type.getEnclosingMethod();\n                    if (type.isAnonymousClass() && enclosingMethod != null) {\n                        timeoutMessage = String.format(\"Condition returned by method \\\"%s\\\" in class %s was not fulfilled\",\n                                enclosingMethod.getName(), enclosingMethod.getDeclaringClass().getName());\n                    } else {\n                        final String message;\n                        if (isLambdaClass(type)) {\n                            message = \"with \" + generateLambdaErrorMessagePrefix(type, false);\n                        } else {\n                            message = type.getName();\n                        }\n                        timeoutMessage = String.format(\"Condition %s was not fulfilled\", message);\n                    }\n                }\n                return timeoutMessage;\n            }\n        };\n    }", "AST": "Javadoc#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#NullLiteral#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#StringLiteral#SingleMemberAnnotation#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#InfixExpression#SimpleName#ReturnStatement#Block#IfStatement#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#StringLiteral#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#MethodInvocation#SimpleName#StringLiteral#SimpleName#SimpleName#BooleanLiteral#MethodInvocation#InfixExpression#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#StringLiteral#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#IfStatement#Block#IfStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(NullLiteral)NullLiteral(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(AnonymousClassDeclaration(MethodDeclaration(SingleMemberAnnotation(SimpleName)SimpleName(StringLiteral)StringLiteral)SingleMemberAnnotation(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)IfStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(StringLiteral)StringLiteral)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(InfixExpression(StringLiteral)StringLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)MethodInvocation)InfixExpression)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)IfStatement)Block)IfStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for CallableCondition.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "138", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/CallableCondition.java", "methodName": "org.awaitility.core.CallableCondition.await", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public Void await() {\n        conditionAwaiter.await(conditionEvaluationHandler);\n        return null;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#NullLiteral#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(NullLiteral)NullLiteral)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>await</p>", "call_func_name": ["org.awaitility.core.ConditionAwaiter.await", "org.awaitility.core.CallableCondition.await"], "call_func_parameter": [["org.awaitility.core.ConditionEvaluationHandler"], [""]], "passed_comments": [{"org.awaitility.core.ConditionAwaiter.await": "<p>await.</p>"}, {"org.awaitility.core.CallableCondition.await": "<p>await</p>"}]}, {"index": "139", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluationLogger.java", "methodName": "org.awaitility.core.ConditionEvaluationLogger.ConditionEvaluationLogger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public ConditionEvaluationLogger() {\n        this(MILLISECONDS);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Uses  {@link java.util.concurrent.TimeUnit#MILLISECONDS} as unit for elapsed and remaining time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "140", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluationLogger.java", "methodName": "org.awaitility.core.ConditionEvaluationLogger.ConditionEvaluationLogger", "methodParameterType": "TimeUnit#", "methodParameterName": "unit#", "methodBody": "public ConditionEvaluationLogger(TimeUnit unit) {\n        if (unit == null) {\n            throw new IllegalArgumentException(\"TimeUnit cannot be null\");\n        }\n        this.unit = unit;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Specifies the  {@link java.util.concurrent.TimeUnit} to use as unit for elapsed and remaining time.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "141", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluationLogger.java", "methodName": "org.awaitility.core.ConditionEvaluationLogger.conditionEvaluationLogger", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ConditionEvaluationLogger conditionEvaluationLogger() {\n        return new ConditionEvaluationLogger();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar to avoid writing the <code>new</code> keyword in Java. Uses  {@link java.util.concurrent.TimeUnit#MILLISECONDS} as unit for elapsed and remaining time.", "call_func_name": ["org.awaitility.core.ConditionEvaluationLogger.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "142", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/ConditionEvaluationLogger.java", "methodName": "org.awaitility.core.ConditionEvaluationLogger.conditionEvaluationLogger", "methodParameterType": "TimeUnit#", "methodParameterName": "unit#", "methodBody": "public static ConditionEvaluationLogger conditionEvaluationLogger(TimeUnit unit) {\n        return new ConditionEvaluationLogger(unit);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar to avoid writing the <code>new</code> keyword in Java. Specifies the  {@link java.util.concurrent.TimeUnit} to use as unit for elapsed and remaining time.", "call_func_name": ["org.awaitility.core.ConditionEvaluationLogger.<init>"], "call_func_parameter": [["java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "143", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/EvaluationCleanup.java", "methodName": "org.awaitility.core.EvaluationCleanup.EvaluationCleanup", "methodParameterType": "Consumer<ExecutorService>#Consumer<ExecutorService>#", "methodParameterName": "normalShutdownBehavior#unexpectedShutdownBehavior#", "methodBody": "EvaluationCleanup(Consumer<ExecutorService> normalShutdownBehavior, Consumer<ExecutorService> unexpectedShutdownBehavior) {\n        this.normalShutdownBehavior = normalShutdownBehavior;\n        this.unexpectedShutdownBehavior = unexpectedShutdownBehavior;\n    }", "AST": "Javadoc#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "@param normalShutdownBehavior The cleanup behavior that is executed when an <code>until</code> method call succeeds, fails or times out.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "144", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/AbstractHamcrestCondition.java", "methodName": "org.awaitility.core.AbstractHamcrestCondition.AbstractHamcrestCondition", "methodParameterType": "Callable<T>#Matcher<? super T>#ConditionSettings#", "methodParameterName": "supplier#matcher#settings#", "methodBody": "protected AbstractHamcrestCondition(final Callable<T> supplier, final Matcher<? super T> matcher, final ConditionSettings settings) {\n        if (supplier == null) {\n            throw new IllegalArgumentException(\"You must specify a supplier (was null).\");\n        }\n        if (matcher == null) {\n            throw new IllegalArgumentException(\"You must specify a matcher (was null).\");\n        }\n\n        conditionEvaluationHandler = new ConditionEvaluationHandler<T>(matcher, settings);\n        final ConditionEvaluator callable = pollInterval -> {\n            lastResult = supplier.call();\n            boolean matches = matcher.matches(lastResult);\n            if (matches) {\n                conditionEvaluationHandler.handleConditionResultMatch(getMatchMessage(supplier, matcher), lastResult, pollInterval);\n            } else {\n                conditionEvaluationHandler.handleConditionResultMismatch(getMismatchMessage(supplier, matcher), lastResult, pollInterval);\n            }\n            return new ConditionEvaluationResult(matches);\n\n        };\n        conditionAwaiter = new ConditionAwaiter(callable, settings) {\n            @Override\n            protected String getTimeoutMessage() {\n                return getMismatchMessage(supplier, matcher);\n            }\n        };\n    }", "AST": "Javadoc#Modifier#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#Block#IfStatement#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#LambdaExpression#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#AnonymousClassDeclaration#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement(VariableDeclarationStatement(PrimitiveType)PrimitiveType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement)Block)IfStatement(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)LambdaExpression)VariableDeclarationFragment)VariableDeclarationStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(AnonymousClassDeclaration(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration)AnonymousClassDeclaration)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "<p>Constructor for AbstractHamcrestCondition.</p>", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "145", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/AbstractHamcrestCondition.java", "methodName": "org.awaitility.core.AbstractHamcrestCondition.await", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public T await() {\n        conditionAwaiter.await(conditionEvaluationHandler);\n        return lastResult;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ExpressionStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ExpressionStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "<p>await.</p>", "call_func_name": ["org.awaitility.core.ConditionAwaiter.await"], "call_func_parameter": [["org.awaitility.core.ConditionEvaluationHandler"]], "passed_comments": [{"org.awaitility.core.ConditionAwaiter.await": "<p>await.</p>"}]}, {"index": "146", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/core/HamcrestToStringFilter.java", "methodName": "org.awaitility.core.HamcrestToStringFilter.filter", "methodParameterType": "Matcher<?>#", "methodParameterName": "matcher#", "methodBody": "static String filter(Matcher<?> matcher) {\n\t\tString matcherToString = matcher.toString();\n\t\tfor (String wordToRemove : wordsToRemove) {\n\t\t\tmatcherToString = matcherToString.replaceAll(wordToRemove, \"\");\n\t\t}\n\t\treturn matcherToString;\n\t}", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#MethodInvocation#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#StringLiteral#MethodInvocation#Assignment#ExpressionStatement#Block#EnhancedForStatement#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)VariableDeclarationFragment)VariableDeclarationStatement(EnhancedForStatement(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(StringLiteral)StringLiteral)MethodInvocation)Assignment)ExpressionStatement)Block)EnhancedForStatement(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Filter words from the <code>matcher.toString()</code> so it looks nicer when printed out. E.g. \"not not\" is removed and \"is\" are removed.", "call_func_name": ["java.lang.Object.toString", "java.util.List.iterator", "java.util.Iterator.hasNext", "java.util.Iterator.next", "java.lang.String.replaceAll"], "call_func_parameter": [[""], [""], [""], [""], ["java.lang.String", "java.lang.String"]], "passed_comments": "/"}, {"index": "147", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/PollInterval.java", "methodName": "org.awaitility.pollinterval.PollInterval.next", "methodParameterType": "int#Duration#", "methodParameterName": "pollCount#previousDuration#", "methodBody": "Duration next(int pollCount, Duration previousDuration);", "AST": "Javadoc#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#MethodDeclaration#", "SBT": "(MethodDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration)MethodDeclaration", "methodDoc": "Generate the next poll interval ( {@link Duration}) based on the previous  {@link Duration} and/or the <code>poll count</code>.The first time the poll interval is called the poll delay is used as <code>previousDuration</code>. By default the poll delay is equal to  {@link Duration#ZERO}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "148", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FixedPollInterval.java", "methodName": "org.awaitility.pollinterval.FixedPollInterval.FixedPollInterval", "methodParameterType": "Duration#", "methodParameterName": "duration#", "methodBody": "public FixedPollInterval(Duration duration) {\n        if (duration == null) {\n            throw new IllegalArgumentException(\"Duration cannot be null\");\n        } else if (isForever(duration)) {\n            throw new IllegalArgumentException(\"Cannot use a fixed poll interval of length 'forever'\");\n        }\n\n        this.duration = duration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(IfStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create a new instance of the  {@link FixedPollInterval}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "149", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FixedPollInterval.java", "methodName": "org.awaitility.pollinterval.FixedPollInterval.FixedPollInterval", "methodParameterType": "long#TimeUnit#", "methodParameterName": "pollInterval#unit#", "methodBody": "public FixedPollInterval(long pollInterval, TimeUnit unit) {\n        this(DurationFactory.of(pollInterval, unit));\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create a new instance of the  {@link FixedPollInterval}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "150", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FixedPollInterval.java", "methodName": "org.awaitility.pollinterval.FixedPollInterval.next", "methodParameterType": "int#Duration#", "methodParameterName": "pollCount#previousDuration#", "methodBody": "public Duration next(int pollCount, Duration previousDuration) {\n        return duration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(SimpleName)SimpleName)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the next duration", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "151", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FixedPollInterval.java", "methodName": "org.awaitility.pollinterval.FixedPollInterval.fixed", "methodParameterType": "Duration#", "methodParameterName": "duration#", "methodBody": "public static FixedPollInterval fixed(Duration duration) {\n        return new FixedPollInterval(duration);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar for create a new instance of  {@link FixedPollInterval}.", "call_func_name": ["org.awaitility.pollinterval.FixedPollInterval.<init>"], "call_func_parameter": [["java.time.Duration"]], "passed_comments": "/"}, {"index": "152", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FixedPollInterval.java", "methodName": "org.awaitility.pollinterval.FixedPollInterval.fixed", "methodParameterType": "long#TimeUnit#", "methodParameterName": "pollInterval#unit#", "methodBody": "public static FixedPollInterval fixed(long pollInterval, TimeUnit unit) {\n        return new FixedPollInterval(pollInterval, unit);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar for create a new instance of  {@link FixedPollInterval}.", "call_func_name": ["org.awaitility.pollinterval.FixedPollInterval.<init>"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "153", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.FibonacciPollInterval", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FibonacciPollInterval() {\n        this(TimeUnit.MILLISECONDS);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleName#QualifiedName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(Block(ConstructorInvocation(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an instance of the  {@link FibonacciPollInterval} with the time unit of {@link java.util.concurrent.TimeUnit#MILLISECONDS}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "154", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.FibonacciPollInterval", "methodParameterType": "TimeUnit#", "methodParameterName": "unit#", "methodBody": "public FibonacciPollInterval(TimeUnit unit) {\n        this(DEFAULT_OFFSET, unit);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Create an instance of the  {@link FibonacciPollInterval} with the supplied time unit starting with offset equal to {@value #DEFAULT_OFFSET}.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "155", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.FibonacciPollInterval", "methodParameterType": "int#TimeUnit#", "methodParameterName": "offset#unit#", "methodBody": "public FibonacciPollInterval(int offset, TimeUnit unit) {\n        if (offset <= -1) {\n            throw new IllegalArgumentException(\"Offset must be greater than or equal to -1\");\n        }\n        if (unit == null) {\n            throw new IllegalArgumentException(\"Chrono unit cannot be null\");\n        }\n        this.offset = offset;\n        this.unit = unit;\n    }", "AST": "Javadoc#Modifier#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NumberLiteral#PrefixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(PrefixExpression(NumberLiteral)NumberLiteral)PrefixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Create an instance of the  {@link FibonacciPollInterval} with a supplied time unit.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "156", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.next", "methodParameterType": "int#Duration#", "methodParameterName": "pollCount#previousDuration#", "methodBody": "@Override\n    public Duration next(int pollCount, Duration previousDuration) {\n        return DurationFactory.of(fibonacci(offset + pollCount), unit);\n    }", "AST": "Javadoc#SimpleName#MarkerAnnotation#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#InfixExpression#MethodInvocation#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(MarkerAnnotation(SimpleName)SimpleName)MarkerAnnotation(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(SimpleName)SimpleName)InfixExpression)MethodInvocation(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the next duration", "call_func_name": ["org.awaitility.pollinterval.FibonacciPollInterval.fibonacci", "org.awaitility.core.DurationFactory.of"], "call_func_parameter": [["int"], ["long", "java.util.concurrent.TimeUnit"]], "passed_comments": [{"org.awaitility.pollinterval.FibonacciPollInterval.fibonacci": "Generate the value of the fibonacci sequence for <code>number</code>."}]}, {"index": "157", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.fibonacci", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static FibonacciPollInterval fibonacci() {\n        return new FibonacciPollInterval();\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar for <code>new FibonacciPollInterval()</code>", "call_func_name": ["org.awaitility.pollinterval.FibonacciPollInterval.<init>"], "call_func_parameter": [[""]], "passed_comments": "/"}, {"index": "158", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.fibonacci", "methodParameterType": "TimeUnit#", "methodParameterName": "unit#", "methodBody": "public static FibonacciPollInterval fibonacci(TimeUnit unit) {\n        return new FibonacciPollInterval(unit);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar for <code>new FibonacciPollInterval(unit)</code>", "call_func_name": ["org.awaitility.pollinterval.FibonacciPollInterval.<init>"], "call_func_parameter": [["java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "159", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.fibonacci", "methodParameterType": "int#TimeUnit#", "methodParameterName": "offset#unit#", "methodBody": "public static FibonacciPollInterval fibonacci(int offset, TimeUnit unit) {\n        return new FibonacciPollInterval(offset, unit);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar for <code>new FibonacciPollInterval(offset, unit)</code>", "call_func_name": ["org.awaitility.pollinterval.FibonacciPollInterval.<init>"], "call_func_parameter": [["int", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "160", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.with", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FibonacciPollInterval with() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "161", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.and", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public FibonacciPollInterval and() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "162", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.unit", "methodParameterType": "TimeUnit#", "methodParameterName": "unit#", "methodBody": "public FibonacciPollInterval unit(TimeUnit unit) {\n        return new FibonacciPollInterval(offset, unit);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link FibonacciPollInterval} with the same offset but with a different time unit", "call_func_name": ["org.awaitility.pollinterval.FibonacciPollInterval.<init>"], "call_func_parameter": [["int", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "163", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.offset", "methodParameterType": "int#", "methodParameterName": "offset#", "methodBody": "public FibonacciPollInterval offset(int offset) {\n        return new FibonacciPollInterval(offset, unit);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Create a new  {@link FibonacciPollInterval} with the same time unit but with a different offset", "call_func_name": ["org.awaitility.pollinterval.FibonacciPollInterval.<init>"], "call_func_parameter": [["int", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "164", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/FibonacciPollInterval.java", "methodName": "org.awaitility.pollinterval.FibonacciPollInterval.fibonacci", "methodParameterType": "int#", "methodParameterName": "value#", "methodBody": "protected int fibonacci(int value) {\n        return fib(value, 1, 0);\n    }", "AST": "Javadoc#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#NumberLiteral#NumberLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NumberLiteral)NumberLiteral(NumberLiteral)NumberLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the value of the fibonacci sequence for <code>number</code>.", "call_func_name": ["org.awaitility.pollinterval.FibonacciPollInterval.fib"], "call_func_parameter": [["int", "int", "int"]], "passed_comments": "/"}, {"index": "165", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.IterativePollInterval", "methodParameterType": "Function<Duration,Duration>#", "methodParameterName": "function#", "methodBody": "public IterativePollInterval(Function<Duration, Duration> function) {\n        this(function, null, false);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Generate an iterative poll interval based on the supplied function.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "166", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.IterativePollInterval", "methodParameterType": "Function<Duration,Duration>#Duration#", "methodParameterName": "function#startDuration#", "methodBody": "public IterativePollInterval(Function<Duration, Duration> function, Duration startDuration) {\n        this(function, startDuration, true);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#BooleanLiteral#ConstructorInvocation#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ConstructorInvocation(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)ConstructorInvocation)Block)MethodDeclaration", "methodDoc": "Generate a iterative poll interval based on the supplied function and start duration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "167", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.IterativePollInterval", "methodParameterType": "Function<Duration,Duration>#Duration#boolean#", "methodParameterName": "function#startDuration#startDurationExplicitlyDefined#", "methodBody": "private IterativePollInterval(Function<Duration, Duration> function, Duration startDuration, boolean startDurationExplicitlyDefined) {\n        if (function == null) {\n            throw new IllegalArgumentException(\"Function<Duration, Duration> cannot be null\");\n        }\n        if (startDurationExplicitlyDefined && startDuration == null) {\n            throw new IllegalArgumentException(\"Start duration cannot be null\");\n        } else if (startDurationExplicitlyDefined && isForever(startDuration)) {\n            throw new IllegalArgumentException(\"Cannot use a poll interval of length 'forever'\");\n        }\n        this.function = function;\n        this.startDuration = startDuration;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#SimpleName#SimpleName#SimpleName#MethodInvocation#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#IfStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#ThisExpression#SimpleName#FieldAccess#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(IfStatement(InfixExpression(SimpleName)SimpleName(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block(IfStatement(InfixExpression(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement)IfStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(FieldAccess(ThisExpression)ThisExpression(SimpleName)SimpleName)FieldAccess(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Generate a iterative poll interval based on the supplied function and start duration.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "168", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.next", "methodParameterType": "int#Duration#", "methodParameterName": "pollCount#previousDuration#", "methodBody": "public Duration next(int pollCount, Duration previousDuration) {\n        final Duration durationToUse;\n        if (pollCount == 1 && startDuration != null) {\n            durationToUse = startDuration;\n        } else {\n            durationToUse = previousDuration;\n        }\n        return function.apply(durationToUse);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#Modifier#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#VariableDeclarationStatement#SimpleName#NumberLiteral#InfixExpression#SimpleName#NullLiteral#InfixExpression#InfixExpression#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(VariableDeclarationStatement(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment)VariableDeclarationStatement(IfStatement(InfixExpression(InfixExpression(SimpleName)SimpleName(NumberLiteral)NumberLiteral)InfixExpression(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression)InfixExpression(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)IfStatement(ReturnStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Generate the next Duration based on the supplied function. If you've specified a start duration explicitly then this start duration will override the value of <code>previousDuration</code> when <code>pollCount</code> is 1 (i.e. the poll delay).", "call_func_name": ["java.util.function.Function.apply"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "169", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.iterative", "methodParameterType": "Function<Duration,Duration>#", "methodParameterName": "function#", "methodBody": "public static IterativePollInterval iterative(Function<Duration, Duration> function) {\n        return new IterativePollInterval(function);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar for creating a  {@link IterativePollInterval}.", "call_func_name": ["org.awaitility.pollinterval.IterativePollInterval.<init>"], "call_func_parameter": [["java.util.function.Function"]], "passed_comments": "/"}, {"index": "170", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.iterative", "methodParameterType": "Function<Duration,Duration>#Duration#", "methodParameterName": "function#startDuration#", "methodBody": "public static IterativePollInterval iterative(Function<Duration, Duration> function, Duration startDuration) {\n        return new IterativePollInterval(function, startDuration);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar for creating a  {@link IterativePollInterval}.", "call_func_name": ["org.awaitility.pollinterval.IterativePollInterval.<init>"], "call_func_parameter": [["java.util.function.Function", "java.time.Duration"]], "passed_comments": "/"}, {"index": "171", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.with", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public IterativePollInterval with() {\n        return this;\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#ThisExpression#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ThisExpression)ThisExpression)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Syntactic sugar", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "172", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/pollinterval/IterativePollInterval.java", "methodName": "org.awaitility.pollinterval.IterativePollInterval.startDuration", "methodParameterType": "Duration#", "methodParameterName": "duration#", "methodBody": "public IterativePollInterval startDuration(Duration duration) {\n        return new IterativePollInterval(function, duration);\n    }", "AST": "Javadoc#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Set the start duration of this poll interval", "call_func_name": ["org.awaitility.pollinterval.IterativePollInterval.<init>"], "call_func_parameter": [["java.util.function.Function", "java.time.Duration"]], "passed_comments": "/"}, {"index": "173", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.catchUncaughtExceptionsByDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void catchUncaughtExceptionsByDefault() {\n        defaultCatchUncaughtExceptions = true;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to catch uncaught exceptions from other threads by default. This is useful in multi-threaded systems when you want your test to fail regardless of which thread throwing the exception. Default is <code>true</code>.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "174", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.doNotCatchUncaughtExceptionsByDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void doNotCatchUncaughtExceptionsByDefault() {\n        defaultCatchUncaughtExceptions = false;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility not to catch uncaught exceptions from other threads. Your test will not fail if another thread throws an exception.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "175", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.ignoreExceptionsByDefault", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void ignoreExceptionsByDefault() {\n        defaultExceptionIgnorer = new PredicateExceptionIgnorer(e -> true);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#BooleanLiteral#LambdaExpression#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(BooleanLiteral)BooleanLiteral)LambdaExpression)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore caught or uncaught exceptions during condition evaluation. Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail upon an exception, unless it times out.", "call_func_name": ["java.util.function.Predicate.test", "org.awaitility.core.PredicateExceptionIgnorer.<init>"], "call_func_parameter": [[""], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "176", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.ignoreExceptionByDefault", "methodParameterType": "Class<? extends Throwable>#", "methodParameterName": "exceptionType#", "methodBody": "public static void ignoreExceptionByDefault(final Class<? extends Throwable> exceptionType) {\n        defaultExceptionIgnorer = new PredicateExceptionIgnorer(e -> e.getClass().equals(exceptionType));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#MethodInvocation#LambdaExpression#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(MethodInvocation(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore caught exception of the given type during condition evaluation. Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail upon an exception matching the supplied exception type, unless it times out.", "call_func_name": ["java.util.function.Predicate.test", "org.awaitility.core.PredicateExceptionIgnorer.<init>"], "call_func_parameter": [["java.lang.Class"], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "177", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.ignoreExceptionsByDefaultMatching", "methodParameterType": "Predicate<? super Throwable>#", "methodParameterName": "predicate#", "methodBody": "public static void ignoreExceptionsByDefaultMatching(Predicate<? super Throwable> predicate) {\n        defaultExceptionIgnorer = new PredicateExceptionIgnorer(predicate);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore caught exceptions matching the given <code>predicate</code> during condition evaluation. Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail upon an exception matching the supplied predicate, unless it times out.", "call_func_name": ["org.awaitility.core.PredicateExceptionIgnorer.<init>"], "call_func_parameter": [["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "178", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.ignoreExceptionsByDefaultMatching", "methodParameterType": "Matcher<? super Throwable>#", "methodParameterName": "matcher#", "methodBody": "public static void ignoreExceptionsByDefaultMatching(Matcher<? super Throwable> matcher) {\n        defaultExceptionIgnorer = new HamcrestExceptionIgnorer(matcher);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType(SimpleType(SimpleName)SimpleName)SimpleType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instruct Awaitility to ignore caught exceptions matching the supplied <code>matcher</code> during condition evaluation. Exceptions will be treated as evaluating to <code>false</code>. Your test will not fail upon an exception matching the supplied exception type, unless it times out.", "call_func_name": ["org.awaitility.core.HamcrestExceptionIgnorer.<init>"], "call_func_parameter": [["org.hamcrest.Matcher"]], "passed_comments": "/"}, {"index": "179", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.pollInSameThread", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void pollInSameThread() {\n        defaultExecutorLifecycle = ExecutorLifecycle.withNormalCleanupBehavior(InternalExecutorServiceFactory::sameThreadExecutorService);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ExpressionMethodReference#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(ExpressionMethodReference(SimpleName)SimpleName(SimpleName)SimpleName)ExpressionMethodReference)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Instructs Awaitility to execute the polling of the condition from the same as the test. This is an advanced feature and you should be careful when combining this with conditions that wait forever (or a long time) since Awaitility cannot interrupt the thread when using the same thread as the test. For safety you should always combine tests using this feature with a test framework specific timeout, for example in JUnit: <pre>", "call_func_name": ["java.util.function.Supplier.get", "org.awaitility.core.ExecutorLifecycle.withNormalCleanupBehavior"], "call_func_parameter": [[""], ["java.util.function.Supplier"]], "passed_comments": "/"}, {"index": "180", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.pollExecutorService", "methodParameterType": "ExecutorService#", "methodParameterName": "executorService#", "methodBody": "public static void pollExecutorService(final ExecutorService executorService) {\n        defaultExecutorLifecycle = ExecutorLifecycle.withoutCleanup(executorService);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Specify the executor service whose threads will be used to evaluate the poll condition in Awaitility. Note that the executor service must be shutdown manually! This is an advanced feature and it should only be used sparingly.", "call_func_name": ["org.awaitility.core.ExecutorLifecycle.withoutCleanup"], "call_func_parameter": [["java.util.concurrent.ExecutorService"]], "passed_comments": "/"}, {"index": "181", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.pollThread", "methodParameterType": "Function<Runnable,Thread>#", "methodParameterName": "threadSupplier#", "methodBody": "public static void pollThread(final Function<Runnable, Thread> threadSupplier) {\n        defaultExecutorLifecycle = ExecutorLifecycle.withNormalCleanupBehavior(() -> InternalExecutorServiceFactory.create(threadSupplier));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#Modifier#SimpleName#SimpleType#SimpleName#SimpleType#SimpleName#SimpleType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#LambdaExpression#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(Modifier)Modifier(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType(SimpleType(SimpleName)SimpleName)SimpleType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(LambdaExpression(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)LambdaExpression)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Specify a thread supplier whose thread will be used to evaluate the poll condition in Awaitility. The supplier will be called only once and the thread it returns will be reused during all condition evaluations. This is an advanced feature and it should only be used sparingly.", "call_func_name": ["java.util.function.Supplier.get", "org.awaitility.core.ExecutorLifecycle.withNormalCleanupBehavior"], "call_func_parameter": [["java.util.function.Function"], ["java.util.function.Supplier"]], "passed_comments": "/"}, {"index": "182", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.reset", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static void reset() {\n        defaultPollInterval = DEFAULT_POLL_INTERVAL;\n        defaultPollDelay = DEFAULT_POLL_DELAY;\n        defaultWaitConstraint = AtMostWaitConstraint.TEN_SECONDS;\n        defaultCatchUncaughtExceptions = true;\n        defaultConditionEvaluationListener = null;\n        defaultExecutorLifecycle = null;\n        defaultExceptionIgnorer = new PredicateExceptionIgnorer(e -> false);\n        Thread.setDefaultUncaughtExceptionHandler(null);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleName#QualifiedName#Assignment#ExpressionStatement#SimpleName#BooleanLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#NullLiteral#Assignment#ExpressionStatement#SimpleName#SimpleName#SimpleType#SimpleName#VariableDeclarationFragment#BooleanLiteral#LambdaExpression#ClassInstanceCreation#Assignment#ExpressionStatement#SimpleName#SimpleName#NullLiteral#MethodInvocation#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(NullLiteral)NullLiteral)Assignment)ExpressionStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(LambdaExpression(VariableDeclarationFragment(SimpleName)SimpleName)VariableDeclarationFragment(BooleanLiteral)BooleanLiteral)LambdaExpression)ClassInstanceCreation)Assignment)ExpressionStatement(ExpressionStatement(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Reset the timeout, poll interval, poll delay, uncaught exception handling to their default values: <p>&nbsp;</p> <ul> <li>timeout - 10 seconds</li> <li>poll interval - 100 milliseconds</li> <li>poll delay - 100 milliseconds</li> <li>Catch all uncaught exceptions - true</li> <li>Do not ignore caught exceptions</li> <li>Don't handle condition evaluation results</li> </ul>", "call_func_name": ["java.util.function.Predicate.test", "org.awaitility.core.PredicateExceptionIgnorer.<init>"], "call_func_parameter": [[""], ["java.util.function.Predicate"]], "passed_comments": "/"}, {"index": "183", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.await", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ConditionFactory await() {\n        return await(null);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#NullLiteral#MethodInvocation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(MethodInvocation(SimpleName)SimpleName(NullLiteral)NullLiteral)MethodInvocation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start building an await statement.", "call_func_name": ["org.awaitility.Awaitility.await"], "call_func_parameter": [["java.lang.String"]], "passed_comments": [{"org.awaitility.Awaitility.await": "Start building a named await statement. This is useful is cases when you have several awaits in your test and you need to tell them apart. If a named await timeout's the <code>alias</code> will be displayed indicating which await statement that failed."}]}, {"index": "184", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.await", "methodParameterType": "String#", "methodParameterName": "alias#", "methodBody": "public static ConditionFactory await(String alias) {\n        return new ConditionFactory(alias, defaultWaitConstraint, defaultPollInterval, defaultPollDelay,\n                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener,\n                defaultExecutorLifecycle);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start building a named await statement. This is useful is cases when you have several awaits in your test and you need to tell them apart. If a named await timeout's the <code>alias</code> will be displayed indicating which await statement that failed.", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "185", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.catchUncaughtExceptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ConditionFactory catchUncaughtExceptions() {\n        return new ConditionFactory(null, defaultWaitConstraint, defaultPollInterval, defaultPollDelay,\n                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener,\n                defaultExecutorLifecycle);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Catching uncaught exceptions in other threads. This will make the await statement fail even if exceptions occur in other threads. This is the default behavior.", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "186", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.dontCatchUncaughtExceptions", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ConditionFactory dontCatchUncaughtExceptions() {\n        return new ConditionFactory(null, defaultWaitConstraint, defaultPollInterval, defaultPollDelay,\n                false, defaultExceptionIgnorer, defaultConditionEvaluationListener,\n                defaultExecutorLifecycle);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#SimpleName#BooleanLiteral#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(BooleanLiteral)BooleanLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Don't catch uncaught exceptions in other threads. This will <i>not</i> make the await statement fail if exceptions occur in other threads.", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "187", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.with", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ConditionFactory with() {\n        return new ConditionFactory(null, defaultWaitConstraint, defaultPollInterval, defaultPollDelay,\n                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener,\n                defaultExecutorLifecycle);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start constructing an await statement with some settings. E.g. <p> <pre> with().pollInterval(20, MILLISECONDS).await().until(somethingHappens()); </pre>", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "188", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.given", "methodParameterType": "/", "methodParameterName": "/", "methodBody": "public static ConditionFactory given() {\n        return new ConditionFactory(null, defaultWaitConstraint, defaultPollInterval, defaultPollDelay,\n                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener,\n                defaultExecutorLifecycle);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Start constructing an await statement given some settings. E.g. <p> <pre> given().pollInterval(20, MILLISECONDS).then().await().until(somethingHappens()); </pre>", "call_func_name": ["org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "189", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.waitAtMost", "methodParameterType": "Duration#", "methodParameterName": "timeout#", "methodBody": "public static ConditionFactory waitAtMost(Duration timeout) {\n        return new ConditionFactory(null, defaultWaitConstraint.withMaxWaitTime(timeout), defaultPollInterval, defaultPollDelay,\n                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener,\n                defaultExecutorLifecycle);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#SimpleName#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "An alternative to using  {@link #await()} if you want to specify a timeoutdirectly.", "call_func_name": ["org.awaitility.constraint.WaitConstraint.withMaxWaitTime", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["java.time.Duration"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "190", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.waitAtMost", "methodParameterType": "long#TimeUnit#", "methodParameterName": "value#unit#", "methodBody": "public static ConditionFactory waitAtMost(long value, TimeUnit unit) {\n        return new ConditionFactory(null, defaultWaitConstraint.withMaxWaitTime(DurationFactory.of(value, unit)), defaultPollInterval, defaultPollDelay,\n                defaultCatchUncaughtExceptions, defaultExceptionIgnorer, defaultConditionEvaluationListener,\n                defaultExecutorLifecycle);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#NullLiteral#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(NullLiteral)NullLiteral(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "An alternative to using  {@link #await()} if you want to specify a timeoutdirectly.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.constraint.WaitConstraint.withMaxWaitTime", "org.awaitility.core.ConditionFactory.<init>"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"], ["java.lang.String", "org.awaitility.constraint.WaitConstraint", "org.awaitility.pollinterval.PollInterval", "java.time.Duration", "boolean", "org.awaitility.core.ExceptionIgnorer", "org.awaitility.core.ConditionEvaluationListener", "org.awaitility.core.ExecutorLifecycle"]], "passed_comments": "/"}, {"index": "191", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultPollInterval", "methodParameterType": "long#TimeUnit#", "methodParameterName": "pollInterval#unit#", "methodBody": "public static void setDefaultPollInterval(long pollInterval, TimeUnit unit) {\n        defaultPollInterval = new FixedPollInterval(DurationFactory.of(pollInterval, unit));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleType#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default poll interval that all await statements will use.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.pollinterval.FixedPollInterval.<init>"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"]], "passed_comments": "/"}, {"index": "192", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultPollDelay", "methodParameterType": "long#TimeUnit#", "methodParameterName": "pollDelay#unit#", "methodBody": "public static void setDefaultPollDelay(long pollDelay, TimeUnit unit) {\n        defaultPollDelay = DurationFactory.of(pollDelay, unit);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default poll delay all await statements will use.", "call_func_name": ["org.awaitility.core.DurationFactory.of"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"]], "passed_comments": "/"}, {"index": "193", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultTimeout", "methodParameterType": "long#TimeUnit#", "methodParameterName": "timeout#unit#", "methodBody": "public static void setDefaultTimeout(long timeout, TimeUnit unit) {\n        defaultWaitConstraint = defaultWaitConstraint.withMaxWaitTime(DurationFactory.of(timeout, unit));\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#PrimitiveType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(PrimitiveType)PrimitiveType(SimpleName)SimpleName)SingleVariableDeclaration(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default timeout all await statements will use.", "call_func_name": ["org.awaitility.core.DurationFactory.of", "org.awaitility.constraint.WaitConstraint.withMaxWaitTime"], "call_func_parameter": [["long", "java.util.concurrent.TimeUnit"], ["java.time.Duration"]], "passed_comments": "/"}, {"index": "194", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultPollInterval", "methodParameterType": "Duration#", "methodParameterName": "pollInterval#", "methodBody": "public static void setDefaultPollInterval(Duration pollInterval) {\n        if (pollInterval == null) {\n            throw new IllegalArgumentException(\"You must specify a poll interval (was null).\");\n        }\n        defaultPollInterval = new FixedPollInterval(pollInterval);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default poll interval that all await statements will use.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.awaitility.pollinterval.FixedPollInterval.<init>"], "call_func_parameter": [["java.lang.String"], ["java.time.Duration"]], "passed_comments": "/"}, {"index": "195", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultPollInterval", "methodParameterType": "PollInterval#", "methodParameterName": "pollInterval#", "methodBody": "public static void setDefaultPollInterval(PollInterval pollInterval) {\n        if (pollInterval == null) {\n            throw new IllegalArgumentException(\"You must specify a poll interval (was null).\");\n        }\n        defaultPollInterval = pollInterval;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default poll interval that all await statements will use.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "196", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultPollDelay", "methodParameterType": "Duration#", "methodParameterName": "pollDelay#", "methodBody": "public static void setDefaultPollDelay(Duration pollDelay) {\n        if (pollDelay == null) {\n            throw new IllegalArgumentException(\"You must specify a poll delay (was null).\");\n        }\n        defaultPollDelay = pollDelay;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default poll delay that all await statements will use.", "call_func_name": ["java.lang.IllegalArgumentException.<init>"], "call_func_parameter": [["java.lang.String"]], "passed_comments": "/"}, {"index": "197", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultTimeout", "methodParameterType": "Duration#", "methodParameterName": "defaultTimeout#", "methodBody": "public static void setDefaultTimeout(Duration defaultTimeout) {\n        if (defaultTimeout == null) {\n            throw new IllegalArgumentException(\"You must specify a default timeout (was null).\");\n        }\n        defaultWaitConstraint = defaultWaitConstraint.withMaxWaitTime(defaultTimeout);\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#NullLiteral#InfixExpression#SimpleName#SimpleType#StringLiteral#ClassInstanceCreation#ThrowStatement#Block#IfStatement#SimpleName#SimpleName#SimpleName#SimpleName#MethodInvocation#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(IfStatement(InfixExpression(SimpleName)SimpleName(NullLiteral)NullLiteral)InfixExpression(Block(ThrowStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(StringLiteral)StringLiteral)ClassInstanceCreation)ThrowStatement)Block)IfStatement(ExpressionStatement(Assignment(SimpleName)SimpleName(MethodInvocation(SimpleName)SimpleName(SimpleName)SimpleName(SimpleName)SimpleName)MethodInvocation)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default timeout that all await statements will use.", "call_func_name": ["java.lang.IllegalArgumentException.<init>", "org.awaitility.constraint.WaitConstraint.withMaxWaitTime"], "call_func_parameter": [["java.lang.String"], ["java.time.Duration"]], "passed_comments": "/"}, {"index": "198", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.setDefaultConditionEvaluationListener", "methodParameterType": "ConditionEvaluationListener#", "methodParameterName": "defaultConditionEvaluationListener#", "methodBody": "public static void setDefaultConditionEvaluationListener(ConditionEvaluationListener defaultConditionEvaluationListener) {\n        Awaitility.defaultConditionEvaluationListener = defaultConditionEvaluationListener;\n    }", "AST": "Javadoc#Modifier#Modifier#PrimitiveType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleName#QualifiedName#SimpleName#Assignment#ExpressionStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(PrimitiveType)PrimitiveType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ExpressionStatement(Assignment(QualifiedName(SimpleName)SimpleName(SimpleName)SimpleName)QualifiedName(SimpleName)SimpleName)Assignment)ExpressionStatement)Block)MethodDeclaration", "methodDoc": "Sets the default condition evaluation listener that all await statements will use.", "call_func_name": "/", "call_func_parameter": "/", "passed_comments": "/"}, {"index": "199", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.fieldIn", "methodParameterType": "Object#", "methodParameterName": "object#", "methodBody": "public static FieldSupplierBuilder fieldIn(Object object) {\n        return new FieldSupplierBuilder(object);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await until an instance field matches something. E.g. <p> <pre> await().until(fieldIn(service).ofType(int.class).andWithName(\"fieldName\"), greaterThan(2)); </pre> <p> Here Awaitility waits until a field with name <code>fieldName</code> and of the <code>int.class</code> in object <code>service</code> is greater than 2. <p> Note that the field must be thread-safe in order to guarantee correct behavior.", "call_func_name": ["org.awaitility.core.FieldSupplierBuilder.<init>"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}, {"index": "200", "file": "/root/repos/repos6/awaitility/awaitility/src/main/java/org/awaitility/Awaitility.java", "methodName": "org.awaitility.Awaitility.fieldIn", "methodParameterType": "Class<?>#", "methodParameterName": "clazz#", "methodBody": "public static FieldSupplierBuilder fieldIn(Class<?> clazz) {\n        return new FieldSupplierBuilder(clazz);\n    }", "AST": "Javadoc#Modifier#Modifier#SimpleName#SimpleType#SimpleName#SimpleName#SimpleType#WildcardType#ParameterizedType#SimpleName#SingleVariableDeclaration#SimpleName#SimpleType#SimpleName#ClassInstanceCreation#ReturnStatement#Block#MethodDeclaration#", "SBT": "(MethodDeclaration(Modifier)Modifier(Modifier)Modifier(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName(SingleVariableDeclaration(ParameterizedType(SimpleType(SimpleName)SimpleName)SimpleType(WildcardType)WildcardType)ParameterizedType(SimpleName)SimpleName)SingleVariableDeclaration(Block(ReturnStatement(ClassInstanceCreation(SimpleType(SimpleName)SimpleName)SimpleType(SimpleName)SimpleName)ClassInstanceCreation)ReturnStatement)Block)MethodDeclaration", "methodDoc": "Await until a static field matches something. E.g. <p> <pre> await().until(fieldIn(Service.class).ofType(int.class).andWithName(\"fieldName\"), greaterThan(2)); </pre> <p> Here Awaitility waits until a static field with name <code>fieldName</code> and of the <code>int.class</code> in object <code>service</code> is greater than 2. <p> Note that the field must be thread-safe in order to guarantee correct behavior.", "call_func_name": ["org.awaitility.core.FieldSupplierBuilder.<init>"], "call_func_parameter": [["java.lang.Object"]], "passed_comments": "/"}]